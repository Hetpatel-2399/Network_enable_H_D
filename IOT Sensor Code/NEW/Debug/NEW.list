
NEW.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000752c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  080076bc  080076bc  000176bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077b0  080077b0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080077b0  080077b0  000177b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077b8  080077b8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077b8  080077b8  000177b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077bc  080077bc  000177bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080077c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006d0  20000070  08007830  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000740  08007830  00020740  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002983d  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e4  00000000  00000000  000498dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002110  00000000  00000000  0004d2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f78  00000000  00000000  0004f3d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029a4b  00000000  00000000  00051350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cfff  00000000  00000000  0007ad9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fbf4c  00000000  00000000  00097d9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00193ce6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000096a8  00000000  00000000  00193d3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080076a4 	.word	0x080076a4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080076a4 	.word	0x080076a4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96e 	b.w	8000564 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468c      	mov	ip, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	f040 8083 	bne.w	80003b6 <__udivmoddi4+0x116>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d947      	bls.n	8000346 <__udivmoddi4+0xa6>
 80002b6:	fab2 f282 	clz	r2, r2
 80002ba:	b142      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002bc:	f1c2 0020 	rsb	r0, r2, #32
 80002c0:	fa24 f000 	lsr.w	r0, r4, r0
 80002c4:	4091      	lsls	r1, r2
 80002c6:	4097      	lsls	r7, r2
 80002c8:	ea40 0c01 	orr.w	ip, r0, r1
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbbc f6f8 	udiv	r6, ip, r8
 80002d8:	fa1f fe87 	uxth.w	lr, r7
 80002dc:	fb08 c116 	mls	r1, r8, r6, ip
 80002e0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e4:	fb06 f10e 	mul.w	r1, r6, lr
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18fb      	adds	r3, r7, r3
 80002ee:	f106 30ff 	add.w	r0, r6, #4294967295
 80002f2:	f080 8119 	bcs.w	8000528 <__udivmoddi4+0x288>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8116 	bls.w	8000528 <__udivmoddi4+0x288>
 80002fc:	3e02      	subs	r6, #2
 80002fe:	443b      	add	r3, r7
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0f8 	udiv	r0, r3, r8
 8000308:	fb08 3310 	mls	r3, r8, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fe0e 	mul.w	lr, r0, lr
 8000314:	45a6      	cmp	lr, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8105 	bcs.w	800052c <__udivmoddi4+0x28c>
 8000322:	45a6      	cmp	lr, r4
 8000324:	f240 8102 	bls.w	800052c <__udivmoddi4+0x28c>
 8000328:	3802      	subs	r0, #2
 800032a:	443c      	add	r4, r7
 800032c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000330:	eba4 040e 	sub.w	r4, r4, lr
 8000334:	2600      	movs	r6, #0
 8000336:	b11d      	cbz	r5, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c5 4300 	strd	r4, r3, [r5]
 8000340:	4631      	mov	r1, r6
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	b902      	cbnz	r2, 800034a <__udivmoddi4+0xaa>
 8000348:	deff      	udf	#255	; 0xff
 800034a:	fab2 f282 	clz	r2, r2
 800034e:	2a00      	cmp	r2, #0
 8000350:	d150      	bne.n	80003f4 <__udivmoddi4+0x154>
 8000352:	1bcb      	subs	r3, r1, r7
 8000354:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000358:	fa1f f887 	uxth.w	r8, r7
 800035c:	2601      	movs	r6, #1
 800035e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000362:	0c21      	lsrs	r1, r4, #16
 8000364:	fb0e 331c 	mls	r3, lr, ip, r3
 8000368:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800036c:	fb08 f30c 	mul.w	r3, r8, ip
 8000370:	428b      	cmp	r3, r1
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0xe4>
 8000374:	1879      	adds	r1, r7, r1
 8000376:	f10c 30ff 	add.w	r0, ip, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0xe2>
 800037c:	428b      	cmp	r3, r1
 800037e:	f200 80e9 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 8000382:	4684      	mov	ip, r0
 8000384:	1ac9      	subs	r1, r1, r3
 8000386:	b2a3      	uxth	r3, r4
 8000388:	fbb1 f0fe 	udiv	r0, r1, lr
 800038c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000390:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000394:	fb08 f800 	mul.w	r8, r8, r0
 8000398:	45a0      	cmp	r8, r4
 800039a:	d907      	bls.n	80003ac <__udivmoddi4+0x10c>
 800039c:	193c      	adds	r4, r7, r4
 800039e:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a2:	d202      	bcs.n	80003aa <__udivmoddi4+0x10a>
 80003a4:	45a0      	cmp	r8, r4
 80003a6:	f200 80d9 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003aa:	4618      	mov	r0, r3
 80003ac:	eba4 0408 	sub.w	r4, r4, r8
 80003b0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003b4:	e7bf      	b.n	8000336 <__udivmoddi4+0x96>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x12e>
 80003ba:	2d00      	cmp	r5, #0
 80003bc:	f000 80b1 	beq.w	8000522 <__udivmoddi4+0x282>
 80003c0:	2600      	movs	r6, #0
 80003c2:	e9c5 0100 	strd	r0, r1, [r5]
 80003c6:	4630      	mov	r0, r6
 80003c8:	4631      	mov	r1, r6
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f683 	clz	r6, r3
 80003d2:	2e00      	cmp	r6, #0
 80003d4:	d14a      	bne.n	800046c <__udivmoddi4+0x1cc>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0x140>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80b8 	bhi.w	8000550 <__udivmoddi4+0x2b0>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0103 	sbc.w	r1, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	468c      	mov	ip, r1
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	d0a8      	beq.n	8000340 <__udivmoddi4+0xa0>
 80003ee:	e9c5 4c00 	strd	r4, ip, [r5]
 80003f2:	e7a5      	b.n	8000340 <__udivmoddi4+0xa0>
 80003f4:	f1c2 0320 	rsb	r3, r2, #32
 80003f8:	fa20 f603 	lsr.w	r6, r0, r3
 80003fc:	4097      	lsls	r7, r2
 80003fe:	fa01 f002 	lsl.w	r0, r1, r2
 8000402:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000406:	40d9      	lsrs	r1, r3
 8000408:	4330      	orrs	r0, r6
 800040a:	0c03      	lsrs	r3, r0, #16
 800040c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000410:	fa1f f887 	uxth.w	r8, r7
 8000414:	fb0e 1116 	mls	r1, lr, r6, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb06 f108 	mul.w	r1, r6, r8
 8000420:	4299      	cmp	r1, r3
 8000422:	fa04 f402 	lsl.w	r4, r4, r2
 8000426:	d909      	bls.n	800043c <__udivmoddi4+0x19c>
 8000428:	18fb      	adds	r3, r7, r3
 800042a:	f106 3cff 	add.w	ip, r6, #4294967295
 800042e:	f080 808d 	bcs.w	800054c <__udivmoddi4+0x2ac>
 8000432:	4299      	cmp	r1, r3
 8000434:	f240 808a 	bls.w	800054c <__udivmoddi4+0x2ac>
 8000438:	3e02      	subs	r6, #2
 800043a:	443b      	add	r3, r7
 800043c:	1a5b      	subs	r3, r3, r1
 800043e:	b281      	uxth	r1, r0
 8000440:	fbb3 f0fe 	udiv	r0, r3, lr
 8000444:	fb0e 3310 	mls	r3, lr, r0, r3
 8000448:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800044c:	fb00 f308 	mul.w	r3, r0, r8
 8000450:	428b      	cmp	r3, r1
 8000452:	d907      	bls.n	8000464 <__udivmoddi4+0x1c4>
 8000454:	1879      	adds	r1, r7, r1
 8000456:	f100 3cff 	add.w	ip, r0, #4294967295
 800045a:	d273      	bcs.n	8000544 <__udivmoddi4+0x2a4>
 800045c:	428b      	cmp	r3, r1
 800045e:	d971      	bls.n	8000544 <__udivmoddi4+0x2a4>
 8000460:	3802      	subs	r0, #2
 8000462:	4439      	add	r1, r7
 8000464:	1acb      	subs	r3, r1, r3
 8000466:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800046a:	e778      	b.n	800035e <__udivmoddi4+0xbe>
 800046c:	f1c6 0c20 	rsb	ip, r6, #32
 8000470:	fa03 f406 	lsl.w	r4, r3, r6
 8000474:	fa22 f30c 	lsr.w	r3, r2, ip
 8000478:	431c      	orrs	r4, r3
 800047a:	fa20 f70c 	lsr.w	r7, r0, ip
 800047e:	fa01 f306 	lsl.w	r3, r1, r6
 8000482:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000486:	fa21 f10c 	lsr.w	r1, r1, ip
 800048a:	431f      	orrs	r7, r3
 800048c:	0c3b      	lsrs	r3, r7, #16
 800048e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000492:	fa1f f884 	uxth.w	r8, r4
 8000496:	fb0e 1119 	mls	r1, lr, r9, r1
 800049a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800049e:	fb09 fa08 	mul.w	sl, r9, r8
 80004a2:	458a      	cmp	sl, r1
 80004a4:	fa02 f206 	lsl.w	r2, r2, r6
 80004a8:	fa00 f306 	lsl.w	r3, r0, r6
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x220>
 80004ae:	1861      	adds	r1, r4, r1
 80004b0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b4:	d248      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 80004b6:	458a      	cmp	sl, r1
 80004b8:	d946      	bls.n	8000548 <__udivmoddi4+0x2a8>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4421      	add	r1, r4
 80004c0:	eba1 010a 	sub.w	r1, r1, sl
 80004c4:	b2bf      	uxth	r7, r7
 80004c6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ca:	fb0e 1110 	mls	r1, lr, r0, r1
 80004ce:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004d2:	fb00 f808 	mul.w	r8, r0, r8
 80004d6:	45b8      	cmp	r8, r7
 80004d8:	d907      	bls.n	80004ea <__udivmoddi4+0x24a>
 80004da:	19e7      	adds	r7, r4, r7
 80004dc:	f100 31ff 	add.w	r1, r0, #4294967295
 80004e0:	d22e      	bcs.n	8000540 <__udivmoddi4+0x2a0>
 80004e2:	45b8      	cmp	r8, r7
 80004e4:	d92c      	bls.n	8000540 <__udivmoddi4+0x2a0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4427      	add	r7, r4
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	eba7 0708 	sub.w	r7, r7, r8
 80004f2:	fba0 8902 	umull	r8, r9, r0, r2
 80004f6:	454f      	cmp	r7, r9
 80004f8:	46c6      	mov	lr, r8
 80004fa:	4649      	mov	r1, r9
 80004fc:	d31a      	bcc.n	8000534 <__udivmoddi4+0x294>
 80004fe:	d017      	beq.n	8000530 <__udivmoddi4+0x290>
 8000500:	b15d      	cbz	r5, 800051a <__udivmoddi4+0x27a>
 8000502:	ebb3 020e 	subs.w	r2, r3, lr
 8000506:	eb67 0701 	sbc.w	r7, r7, r1
 800050a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800050e:	40f2      	lsrs	r2, r6
 8000510:	ea4c 0202 	orr.w	r2, ip, r2
 8000514:	40f7      	lsrs	r7, r6
 8000516:	e9c5 2700 	strd	r2, r7, [r5]
 800051a:	2600      	movs	r6, #0
 800051c:	4631      	mov	r1, r6
 800051e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000522:	462e      	mov	r6, r5
 8000524:	4628      	mov	r0, r5
 8000526:	e70b      	b.n	8000340 <__udivmoddi4+0xa0>
 8000528:	4606      	mov	r6, r0
 800052a:	e6e9      	b.n	8000300 <__udivmoddi4+0x60>
 800052c:	4618      	mov	r0, r3
 800052e:	e6fd      	b.n	800032c <__udivmoddi4+0x8c>
 8000530:	4543      	cmp	r3, r8
 8000532:	d2e5      	bcs.n	8000500 <__udivmoddi4+0x260>
 8000534:	ebb8 0e02 	subs.w	lr, r8, r2
 8000538:	eb69 0104 	sbc.w	r1, r9, r4
 800053c:	3801      	subs	r0, #1
 800053e:	e7df      	b.n	8000500 <__udivmoddi4+0x260>
 8000540:	4608      	mov	r0, r1
 8000542:	e7d2      	b.n	80004ea <__udivmoddi4+0x24a>
 8000544:	4660      	mov	r0, ip
 8000546:	e78d      	b.n	8000464 <__udivmoddi4+0x1c4>
 8000548:	4681      	mov	r9, r0
 800054a:	e7b9      	b.n	80004c0 <__udivmoddi4+0x220>
 800054c:	4666      	mov	r6, ip
 800054e:	e775      	b.n	800043c <__udivmoddi4+0x19c>
 8000550:	4630      	mov	r0, r6
 8000552:	e74a      	b.n	80003ea <__udivmoddi4+0x14a>
 8000554:	f1ac 0c02 	sub.w	ip, ip, #2
 8000558:	4439      	add	r1, r7
 800055a:	e713      	b.n	8000384 <__udivmoddi4+0xe4>
 800055c:	3802      	subs	r0, #2
 800055e:	443c      	add	r4, r7
 8000560:	e724      	b.n	80003ac <__udivmoddi4+0x10c>
 8000562:	bf00      	nop

08000564 <__aeabi_idiv0>:
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop

08000568 <MEMS_Init>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void MEMS_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b08a      	sub	sp, #40	; 0x28
 800056c:	af00      	add	r7, sp, #0
  LSM6DSL_IO_t io_ctx;
  uint8_t id;
  LSM6DSL_AxesRaw_t axes;

  /* Link I2C functions to the LSM6DSL driver */
  io_ctx.BusType     = LSM6DSL_I2C_BUS;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
  io_ctx.Address     = LSM6DSL_I2C_ADD_L;
 8000572:	23d5      	movs	r3, #213	; 0xd5
 8000574:	763b      	strb	r3, [r7, #24]
  io_ctx.Init        = BSP_I2C2_Init;
 8000576:	4b1b      	ldr	r3, [pc, #108]	; (80005e4 <MEMS_Init+0x7c>)
 8000578:	60fb      	str	r3, [r7, #12]
  io_ctx.DeInit      = BSP_I2C2_DeInit;
 800057a:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MEMS_Init+0x80>)
 800057c:	613b      	str	r3, [r7, #16]
  io_ctx.ReadReg     = BSP_I2C2_ReadReg;
 800057e:	4b1b      	ldr	r3, [pc, #108]	; (80005ec <MEMS_Init+0x84>)
 8000580:	623b      	str	r3, [r7, #32]
  io_ctx.WriteReg    = BSP_I2C2_WriteReg;
 8000582:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MEMS_Init+0x88>)
 8000584:	61fb      	str	r3, [r7, #28]
  io_ctx.GetTick     = BSP_GetTick;
 8000586:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MEMS_Init+0x8c>)
 8000588:	627b      	str	r3, [r7, #36]	; 0x24
  LSM6DSL_RegisterBusIO(&MotionSensor, &io_ctx);
 800058a:	f107 030c 	add.w	r3, r7, #12
 800058e:	4619      	mov	r1, r3
 8000590:	4819      	ldr	r0, [pc, #100]	; (80005f8 <MEMS_Init+0x90>)
 8000592:	f001 f8a9 	bl	80016e8 <LSM6DSL_RegisterBusIO>

  /* Read the LSM6DSL WHO_AM_I register */
  LSM6DSL_ReadID(&MotionSensor, &id);
 8000596:	f107 030b 	add.w	r3, r7, #11
 800059a:	4619      	mov	r1, r3
 800059c:	4816      	ldr	r0, [pc, #88]	; (80005f8 <MEMS_Init+0x90>)
 800059e:	f001 f972 	bl	8001886 <LSM6DSL_ReadID>
  if (id != LSM6DSL_ID) {
 80005a2:	7afb      	ldrb	r3, [r7, #11]
 80005a4:	2b6a      	cmp	r3, #106	; 0x6a
 80005a6:	d001      	beq.n	80005ac <MEMS_Init+0x44>
    Error_Handler();
 80005a8:	f000 fc06 	bl	8000db8 <Error_Handler>
  }

  /* Initialize the LSM6DSL sensor */
  LSM6DSL_Init(&MotionSensor);
 80005ac:	4812      	ldr	r0, [pc, #72]	; (80005f8 <MEMS_Init+0x90>)
 80005ae:	f001 f901 	bl	80017b4 <LSM6DSL_Init>

  /* Configure the LSM6DSL accelerometer (ODR, scale and interrupt) */
  LSM6DSL_ACC_SetOutputDataRate(&MotionSensor, 26.0f); /* 26 Hz */
 80005b2:	eeb3 0a0a 	vmov.f32	s0, #58	; 0x41d00000  26.0
 80005b6:	4810      	ldr	r0, [pc, #64]	; (80005f8 <MEMS_Init+0x90>)
 80005b8:	f001 f9e6 	bl	8001988 <LSM6DSL_ACC_SetOutputDataRate>
  LSM6DSL_ACC_SetFullScale(&MotionSensor, 4);          /* [-4000mg; +4000mg] */
 80005bc:	2104      	movs	r1, #4
 80005be:	480e      	ldr	r0, [pc, #56]	; (80005f8 <MEMS_Init+0x90>)
 80005c0:	f001 f9fe 	bl	80019c0 <LSM6DSL_ACC_SetFullScale>
  LSM6DSL_ACC_Set_INT1_DRDY(&MotionSensor, ENABLE);    /* Enable DRDY */
 80005c4:	2101      	movs	r1, #1
 80005c6:	480c      	ldr	r0, [pc, #48]	; (80005f8 <MEMS_Init+0x90>)
 80005c8:	f001 fab8 	bl	8001b3c <LSM6DSL_ACC_Set_INT1_DRDY>
  LSM6DSL_ACC_GetAxesRaw(&MotionSensor, &axes);        /* Clear DRDY */
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	4619      	mov	r1, r3
 80005d0:	4809      	ldr	r0, [pc, #36]	; (80005f8 <MEMS_Init+0x90>)
 80005d2:	f001 fa1d 	bl	8001a10 <LSM6DSL_ACC_GetAxesRaw>

  /* Start the LSM6DSL accelerometer */
  LSM6DSL_ACC_Enable(&MotionSensor);
 80005d6:	4808      	ldr	r0, [pc, #32]	; (80005f8 <MEMS_Init+0x90>)
 80005d8:	f001 f96b 	bl	80018b2 <LSM6DSL_ACC_Enable>
}
 80005dc:	bf00      	nop
 80005de:	3728      	adds	r7, #40	; 0x28
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}
 80005e4:	080013f9 	.word	0x080013f9
 80005e8:	08001475 	.word	0x08001475
 80005ec:	08001529 	.word	0x08001529
 80005f0:	080014c5 	.word	0x080014c5
 80005f4:	0800158d 	.word	0x0800158d
 80005f8:	200005ec 	.word	0x200005ec

080005fc <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == GPIO_PIN_11) {
 8000606:	88fb      	ldrh	r3, [r7, #6]
 8000608:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800060c:	d104      	bne.n	8000618 <HAL_GPIO_EXTI_Callback+0x1c>
    dataRdyIntReceived++;
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <HAL_GPIO_EXTI_Callback+0x28>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3301      	adds	r3, #1
 8000614:	4a03      	ldr	r2, [pc, #12]	; (8000624 <HAL_GPIO_EXTI_Callback+0x28>)
 8000616:	6013      	str	r3, [r2, #0]
  }
}
 8000618:	bf00      	nop
 800061a:	370c      	adds	r7, #12
 800061c:	46bd      	mov	sp, r7
 800061e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000622:	4770      	bx	lr
 8000624:	20000584 	.word	0x20000584

08000628 <_write>:

int _write(int fd, char * ptr, int len)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af00      	add	r7, sp, #0
 800062e:	60f8      	str	r0, [r7, #12]
 8000630:	60b9      	str	r1, [r7, #8]
 8000632:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	b29a      	uxth	r2, r3
 8000638:	f04f 33ff 	mov.w	r3, #4294967295
 800063c:	68b9      	ldr	r1, [r7, #8]
 800063e:	4804      	ldr	r0, [pc, #16]	; (8000650 <_write+0x28>)
 8000640:	f005 f999 	bl	8005976 <HAL_UART_Transmit>
  return len;
 8000644:	687b      	ldr	r3, [r7, #4]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	2000061c 	.word	0x2000061c

08000654 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b084      	sub	sp, #16
 8000658:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

	HAL_Init();
 800065a:	f001 ffee 	bl	800263a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065e:	f000 f82d 	bl	80006bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000662:	f000 f9f9 	bl	8000a58 <MX_GPIO_Init>
  MX_DFSDM1_Init();
 8000666:	f000 f8cd 	bl	8000804 <MX_DFSDM1_Init>
  MX_QUADSPI_Init();
 800066a:	f000 f903 	bl	8000874 <MX_QUADSPI_Init>
  MX_SPI3_Init();
 800066e:	f000 f927 	bl	80008c0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000672:	f000 f963 	bl	800093c <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 8000676:	f000 f991 	bl	800099c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800067a:	f000 f9bf 	bl	80009fc <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE BEGIN 2 */
  dataRdyIntReceived = 0;
 800067e:	4b0c      	ldr	r3, [pc, #48]	; (80006b0 <main+0x5c>)
 8000680:	2200      	movs	r2, #0
 8000682:	601a      	str	r2, [r3, #0]
  MEMS_Init();
 8000684:	f7ff ff70 	bl	8000568 <MEMS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (dataRdyIntReceived != 0)
 8000688:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <main+0x5c>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0fb      	beq.n	8000688 <main+0x34>
	  {
		  dataRdyIntReceived = 0;
 8000690:	4b07      	ldr	r3, [pc, #28]	; (80006b0 <main+0x5c>)
 8000692:	2200      	movs	r2, #0
 8000694:	601a      	str	r2, [r3, #0]
		  LSM6DSL_Axes_t acc_axes;
		  LSM6DSL_ACC_GetAxes(&MotionSensor, &acc_axes);
 8000696:	1d3b      	adds	r3, r7, #4
 8000698:	4619      	mov	r1, r3
 800069a:	4806      	ldr	r0, [pc, #24]	; (80006b4 <main+0x60>)
 800069c:	f001 f9dc 	bl	8001a58 <LSM6DSL_ACC_GetAxes>
		  printf("% 5d, % 5d, % 5d\r\n",  (int) acc_axes.x, (int) acc_axes.y, (int) acc_axes.z);
 80006a0:	6879      	ldr	r1, [r7, #4]
 80006a2:	68ba      	ldr	r2, [r7, #8]
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4804      	ldr	r0, [pc, #16]	; (80006b8 <main+0x64>)
 80006a8:	f006 f8a6 	bl	80067f8 <iprintf>
	  if (dataRdyIntReceived != 0)
 80006ac:	e7ec      	b.n	8000688 <main+0x34>
 80006ae:	bf00      	nop
 80006b0:	20000584 	.word	0x20000584
 80006b4:	200005ec 	.word	0x200005ec
 80006b8:	080076bc 	.word	0x080076bc

080006bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b0b8      	sub	sp, #224	; 0xe0
 80006c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006c6:	2244      	movs	r2, #68	; 0x44
 80006c8:	2100      	movs	r1, #0
 80006ca:	4618      	mov	r0, r3
 80006cc:	f006 f88c 	bl	80067e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006d0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
 80006d8:	605a      	str	r2, [r3, #4]
 80006da:	609a      	str	r2, [r3, #8]
 80006dc:	60da      	str	r2, [r3, #12]
 80006de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80006e0:	463b      	mov	r3, r7
 80006e2:	2288      	movs	r2, #136	; 0x88
 80006e4:	2100      	movs	r1, #0
 80006e6:	4618      	mov	r0, r3
 80006e8:	f006 f87e 	bl	80067e8 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006ec:	f003 fc5a 	bl	8003fa4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006f0:	4b42      	ldr	r3, [pc, #264]	; (80007fc <SystemClock_Config+0x140>)
 80006f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80006f6:	4a41      	ldr	r2, [pc, #260]	; (80007fc <SystemClock_Config+0x140>)
 80006f8:	f023 0318 	bic.w	r3, r3, #24
 80006fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000700:	2314      	movs	r3, #20
 8000702:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000706:	2301      	movs	r3, #1
 8000708:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800070c:	2301      	movs	r3, #1
 800070e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000718:	2360      	movs	r3, #96	; 0x60
 800071a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071e:	2302      	movs	r3, #2
 8000720:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000724:	2301      	movs	r3, #1
 8000726:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 800072a:	2301      	movs	r3, #1
 800072c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000730:	2328      	movs	r3, #40	; 0x28
 8000732:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000736:	2307      	movs	r3, #7
 8000738:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800073c:	2302      	movs	r3, #2
 800073e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000742:	2302      	movs	r3, #2
 8000744:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800074c:	4618      	mov	r0, r3
 800074e:	f003 fd69 	bl	8004224 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000758:	f000 fb2e 	bl	8000db8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000762:	2303      	movs	r3, #3
 8000764:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000768:	2300      	movs	r3, #0
 800076a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000774:	2300      	movs	r3, #0
 8000776:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800077a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 800077e:	2104      	movs	r1, #4
 8000780:	4618      	mov	r0, r3
 8000782:	f004 f935 	bl	80049f0 <HAL_RCC_ClockConfig>
 8000786:	4603      	mov	r3, r0
 8000788:	2b00      	cmp	r3, #0
 800078a:	d001      	beq.n	8000790 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 800078c:	f000 fb14 	bl	8000db8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART3
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <SystemClock_Config+0x144>)
 8000792:	603b      	str	r3, [r7, #0]
                              |RCC_PERIPHCLK_I2C2|RCC_PERIPHCLK_DFSDM1
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000794:	2300      	movs	r3, #0
 8000796:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000798:	2300      	movs	r3, #0
 800079a:	643b      	str	r3, [r7, #64]	; 0x40
  PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800079c:	2300      	movs	r3, #0
 800079e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80007a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80007aa:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80007ac:	2301      	movs	r3, #1
 80007ae:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80007b0:	2301      	movs	r3, #1
 80007b2:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80007b4:	2318      	movs	r3, #24
 80007b6:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80007b8:	2307      	movs	r3, #7
 80007ba:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80007bc:	2302      	movs	r3, #2
 80007be:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80007c4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80007c8:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	4618      	mov	r0, r3
 80007ce:	f004 fb15 	bl	8004dfc <HAL_RCCEx_PeriphCLKConfig>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <SystemClock_Config+0x120>
  {
    Error_Handler();
 80007d8:	f000 faee 	bl	8000db8 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007dc:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007e0:	f003 fbfe 	bl	8003fe0 <HAL_PWREx_ControlVoltageScaling>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d001      	beq.n	80007ee <SystemClock_Config+0x132>
  {
    Error_Handler();
 80007ea:	f000 fae5 	bl	8000db8 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007ee:	f004 fdef 	bl	80053d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007f2:	bf00      	nop
 80007f4:	37e0      	adds	r7, #224	; 0xe0
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40021000 	.word	0x40021000
 8000800:	00012085 	.word	0x00012085

08000804 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 8000808:	4b18      	ldr	r3, [pc, #96]	; (800086c <MX_DFSDM1_Init+0x68>)
 800080a:	4a19      	ldr	r2, [pc, #100]	; (8000870 <MX_DFSDM1_Init+0x6c>)
 800080c:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 800080e:	4b17      	ldr	r3, [pc, #92]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000810:	2201      	movs	r2, #1
 8000812:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8000814:	4b15      	ldr	r3, [pc, #84]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000816:	2200      	movs	r2, #0
 8000818:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 800081a:	4b14      	ldr	r3, [pc, #80]	; (800086c <MX_DFSDM1_Init+0x68>)
 800081c:	2202      	movs	r2, #2
 800081e:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8000820:	4b12      	ldr	r3, [pc, #72]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000822:	2200      	movs	r2, #0
 8000824:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 8000826:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000828:	2200      	movs	r2, #0
 800082a:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_FOLLOWING_CHANNEL_PINS;
 800082c:	4b0f      	ldr	r3, [pc, #60]	; (800086c <MX_DFSDM1_Init+0x68>)
 800082e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000832:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8000834:	4b0d      	ldr	r3, [pc, #52]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_INTERNAL;
 800083a:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_DFSDM1_Init+0x68>)
 800083c:	2204      	movs	r2, #4
 800083e:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8000840:	4b0a      	ldr	r3, [pc, #40]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000848:	2201      	movs	r2, #1
 800084a:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 800084c:	4b07      	ldr	r3, [pc, #28]	; (800086c <MX_DFSDM1_Init+0x68>)
 800084e:	2200      	movs	r2, #0
 8000850:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_DFSDM1_Init+0x68>)
 8000854:	2200      	movs	r2, #0
 8000856:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	; (800086c <MX_DFSDM1_Init+0x68>)
 800085a:	f002 f899 	bl	8002990 <HAL_DFSDM_ChannelInit>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8000864:	f000 faa8 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	200000c4 	.word	0x200000c4
 8000870:	40016020 	.word	0x40016020

08000874 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 8000878:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 800087a:	4a10      	ldr	r2, [pc, #64]	; (80008bc <MX_QUADSPI_Init+0x48>)
 800087c:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 2;
 800087e:	4b0e      	ldr	r3, [pc, #56]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 8000880:	2202      	movs	r2, #2
 8000882:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 8000886:	2204      	movs	r2, #4
 8000888:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 800088a:	4b0b      	ldr	r3, [pc, #44]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 800088c:	2210      	movs	r2, #16
 800088e:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 23;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 8000892:	2217      	movs	r2, #23
 8000894:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000896:	4b08      	ldr	r3, [pc, #32]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 800089e:	2200      	movs	r2, #0
 80008a0:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80008a2:	4805      	ldr	r0, [pc, #20]	; (80008b8 <MX_QUADSPI_Init+0x44>)
 80008a4:	f003 fc02 	bl	80040ac <HAL_QSPI_Init>
 80008a8:	4603      	mov	r3, r0
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d001      	beq.n	80008b2 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 80008ae:	f000 fa83 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 80008b2:	bf00      	nop
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	2000069c 	.word	0x2000069c
 80008bc:	a0001000 	.word	0xa0001000

080008c0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_SPI3_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <MX_SPI3_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_SPI3_Init+0x74>)
 80008cc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008d0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_SPI3_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI3_Init+0x74>)
 80008da:	f44f 7240 	mov.w	r2, #768	; 0x300
 80008de:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI3_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_SPI3_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI3_Init+0x74>)
 80008ee:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008f2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI3_Init+0x74>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_SPI3_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI3_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_SPI3_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI3_Init+0x74>)
 800090e:	2207      	movs	r2, #7
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_SPI3_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI3_Init+0x74>)
 800091a:	2208      	movs	r2, #8
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800091e:	4805      	ldr	r0, [pc, #20]	; (8000934 <MX_SPI3_Init+0x74>)
 8000920:	f004 ff38 	bl	8005794 <HAL_SPI_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 fa45 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	20000588 	.word	0x20000588
 8000938:	40003c00 	.word	0x40003c00

0800093c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000940:	4b14      	ldr	r3, [pc, #80]	; (8000994 <MX_USART1_UART_Init+0x58>)
 8000942:	4a15      	ldr	r2, [pc, #84]	; (8000998 <MX_USART1_UART_Init+0x5c>)
 8000944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000946:	4b13      	ldr	r3, [pc, #76]	; (8000994 <MX_USART1_UART_Init+0x58>)
 8000948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800094c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800094e:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART1_UART_Init+0x58>)
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000954:	4b0f      	ldr	r3, [pc, #60]	; (8000994 <MX_USART1_UART_Init+0x58>)
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART1_UART_Init+0x58>)
 800095c:	2200      	movs	r2, #0
 800095e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART1_UART_Init+0x58>)
 8000962:	220c      	movs	r2, #12
 8000964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART1_UART_Init+0x58>)
 8000968:	2200      	movs	r2, #0
 800096a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART1_UART_Init+0x58>)
 800096e:	2200      	movs	r2, #0
 8000970:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART1_UART_Init+0x58>)
 8000974:	2200      	movs	r2, #0
 8000976:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART1_UART_Init+0x58>)
 800097a:	2200      	movs	r2, #0
 800097c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART1_UART_Init+0x58>)
 8000980:	f004 ffab 	bl	80058da <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800098a:	f000 fa15 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	2000061c 	.word	0x2000061c
 8000998:	40013800 	.word	0x40013800

0800099c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a0:	4b14      	ldr	r3, [pc, #80]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009a2:	4a15      	ldr	r2, [pc, #84]	; (80009f8 <MX_USART3_UART_Init+0x5c>)
 80009a4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009a6:	4b13      	ldr	r3, [pc, #76]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009ac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009ae:	4b11      	ldr	r3, [pc, #68]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b4:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009ba:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009bc:	2200      	movs	r2, #0
 80009be:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009c2:	220c      	movs	r2, #12
 80009c4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009c6:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009cc:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d2:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009da:	2200      	movs	r2, #0
 80009dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009de:	4805      	ldr	r0, [pc, #20]	; (80009f4 <MX_USART3_UART_Init+0x58>)
 80009e0:	f004 ff7b 	bl	80058da <HAL_UART_Init>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ea:	f000 f9e5 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000fc 	.word	0x200000fc
 80009f8:	40004800 	.word	0x40004800

080009fc <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a02:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000a06:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000a08:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a0a:	2206      	movs	r2, #6
 8000a0c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000a0e:	4b11      	ldr	r3, [pc, #68]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a10:	2202      	movs	r2, #2
 8000a12:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000a14:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a16:	2202      	movs	r2, #2
 8000a18:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000a26:	4b0b      	ldr	r3, [pc, #44]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8000a2c:	4b09      	ldr	r3, [pc, #36]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a32:	4b08      	ldr	r3, [pc, #32]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a3e:	4805      	ldr	r0, [pc, #20]	; (8000a54 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000a40:	f003 f967 	bl	8003d12 <HAL_PCD_Init>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000a4a:	f000 f9b5 	bl	8000db8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	2000017c 	.word	0x2000017c

08000a58 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b08a      	sub	sp, #40	; 0x28
 8000a5c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a5e:	f107 0314 	add.w	r3, r7, #20
 8000a62:	2200      	movs	r2, #0
 8000a64:	601a      	str	r2, [r3, #0]
 8000a66:	605a      	str	r2, [r3, #4]
 8000a68:	609a      	str	r2, [r3, #8]
 8000a6a:	60da      	str	r2, [r3, #12]
 8000a6c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a6e:	4bba      	ldr	r3, [pc, #744]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4ab9      	ldr	r2, [pc, #740]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000a74:	f043 0310 	orr.w	r3, r3, #16
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4bb7      	ldr	r3, [pc, #732]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0310 	and.w	r3, r3, #16
 8000a82:	613b      	str	r3, [r7, #16]
 8000a84:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a86:	4bb4      	ldr	r3, [pc, #720]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4ab3      	ldr	r2, [pc, #716]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000a8c:	f043 0304 	orr.w	r3, r3, #4
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4bb1      	ldr	r3, [pc, #708]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0304 	and.w	r3, r3, #4
 8000a9a:	60fb      	str	r3, [r7, #12]
 8000a9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4bae      	ldr	r3, [pc, #696]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4aad      	ldr	r2, [pc, #692]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4bab      	ldr	r3, [pc, #684]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60bb      	str	r3, [r7, #8]
 8000ab4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4ba8      	ldr	r3, [pc, #672]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4aa7      	ldr	r2, [pc, #668]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4ba5      	ldr	r3, [pc, #660]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	607b      	str	r3, [r7, #4]
 8000acc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4ba2      	ldr	r3, [pc, #648]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4aa1      	ldr	r2, [pc, #644]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b9f      	ldr	r3, [pc, #636]	; (8000d58 <MX_GPIO_Init+0x300>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f44f 718a 	mov.w	r1, #276	; 0x114
 8000aec:	489b      	ldr	r0, [pc, #620]	; (8000d5c <MX_GPIO_Init+0x304>)
 8000aee:	f002 faf9 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	f248 1104 	movw	r1, #33028	; 0x8104
 8000af8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000afc:	f002 faf2 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000b00:	2200      	movs	r2, #0
 8000b02:	f24f 0114 	movw	r1, #61460	; 0xf014
 8000b06:	4896      	ldr	r0, [pc, #600]	; (8000d60 <MX_GPIO_Init+0x308>)
 8000b08:	f002 faec 	bl	80030e4 <HAL_GPIO_WritePin>
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, USB_OTG_FS_PWR_EN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin, GPIO_PIN_RESET);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f241 0181 	movw	r1, #4225	; 0x1081
 8000b12:	4894      	ldr	r0, [pc, #592]	; (8000d64 <MX_GPIO_Init+0x30c>)
 8000b14:	f002 fae6 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPBTLE_RF_SPI3_CSN_GPIO_Port, SPBTLE_RF_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b18:	2201      	movs	r2, #1
 8000b1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b1e:	4891      	ldr	r0, [pc, #580]	; (8000d64 <MX_GPIO_Init+0x30c>)
 8000b20:	f002 fae0 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin, GPIO_PIN_RESET);
 8000b24:	2200      	movs	r2, #0
 8000b26:	f44f 7110 	mov.w	r1, #576	; 0x240
 8000b2a:	488f      	ldr	r0, [pc, #572]	; (8000d68 <MX_GPIO_Init+0x310>)
 8000b2c:	f002 fada 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPSGRF_915_SPI3_CSN_GPIO_Port, SPSGRF_915_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b30:	2201      	movs	r2, #1
 8000b32:	2120      	movs	r1, #32
 8000b34:	488a      	ldr	r0, [pc, #552]	; (8000d60 <MX_GPIO_Init+0x308>)
 8000b36:	f002 fad5 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ISM43362_SPI3_CSN_GPIO_Port, ISM43362_SPI3_CSN_Pin, GPIO_PIN_SET);
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	4887      	ldr	r0, [pc, #540]	; (8000d5c <MX_GPIO_Init+0x304>)
 8000b40:	f002 fad0 	bl	80030e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : M24SR64_Y_RF_DISABLE_Pin M24SR64_Y_GPO_Pin ISM43362_RST_Pin ISM43362_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = M24SR64_Y_RF_DISABLE_Pin|M24SR64_Y_GPO_Pin|ISM43362_RST_Pin|ISM43362_SPI3_CSN_Pin;
 8000b44:	f240 1315 	movw	r3, #277	; 0x115
 8000b48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b52:	2300      	movs	r3, #0
 8000b54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	487f      	ldr	r0, [pc, #508]	; (8000d5c <MX_GPIO_Init+0x304>)
 8000b5e:	f002 f823 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_OVRCR_EXTI3_Pin SPSGRF_915_GPIO3_EXTI5_Pin SPBTLE_RF_IRQ_EXTI6_Pin ISM43362_DRDY_EXTI1_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVRCR_EXTI3_Pin|SPSGRF_915_GPIO3_EXTI5_Pin|SPBTLE_RF_IRQ_EXTI6_Pin|ISM43362_DRDY_EXTI1_Pin;
 8000b62:	236a      	movs	r3, #106	; 0x6a
 8000b64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b66:	4b81      	ldr	r3, [pc, #516]	; (8000d6c <MX_GPIO_Init+0x314>)
 8000b68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4879      	ldr	r0, [pc, #484]	; (8000d5c <MX_GPIO_Init+0x304>)
 8000b76:	f002 f817 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_EXTI13_Pin */
  GPIO_InitStruct.Pin = BUTTON_EXTI13_Pin;
 8000b7a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b80:	4b7b      	ldr	r3, [pc, #492]	; (8000d70 <MX_GPIO_Init+0x318>)
 8000b82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_EXTI13_GPIO_Port, &GPIO_InitStruct);
 8000b88:	f107 0314 	add.w	r3, r7, #20
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4876      	ldr	r0, [pc, #472]	; (8000d68 <MX_GPIO_Init+0x310>)
 8000b90:	f002 f80a 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_A5_Pin ARD_A4_Pin ARD_A3_Pin ARD_A2_Pin
                           ARD_A1_Pin ARD_A0_Pin */
  GPIO_InitStruct.Pin = ARD_A5_Pin|ARD_A4_Pin|ARD_A3_Pin|ARD_A2_Pin
 8000b94:	233f      	movs	r3, #63	; 0x3f
 8000b96:	617b      	str	r3, [r7, #20]
                          |ARD_A1_Pin|ARD_A0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b98:	230b      	movs	r3, #11
 8000b9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ba0:	f107 0314 	add.w	r3, r7, #20
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	4870      	ldr	r0, [pc, #448]	; (8000d68 <MX_GPIO_Init+0x310>)
 8000ba8:	f001 fffe 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D1_Pin ARD_D0_Pin */
  GPIO_InitStruct.Pin = ARD_D1_Pin|ARD_D0_Pin;
 8000bac:	2303      	movs	r3, #3
 8000bae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bb8:	2303      	movs	r3, #3
 8000bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bbc:	2308      	movs	r3, #8
 8000bbe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bca:	f001 ffed 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D10_Pin SPBTLE_RF_RST_Pin ARD_D9_Pin */
  GPIO_InitStruct.Pin = ARD_D10_Pin|SPBTLE_RF_RST_Pin|ARD_D9_Pin;
 8000bce:	f248 1304 	movw	r3, #33028	; 0x8104
 8000bd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000be0:	f107 0314 	add.w	r3, r7, #20
 8000be4:	4619      	mov	r1, r3
 8000be6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bea:	f001 ffdd 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D4_Pin */
  GPIO_InitStruct.Pin = ARD_D4_Pin;
 8000bee:	2308      	movs	r3, #8
 8000bf0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(ARD_D4_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0314 	add.w	r3, r7, #20
 8000c06:	4619      	mov	r1, r3
 8000c08:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0c:	f001 ffcc 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D7_Pin */
  GPIO_InitStruct.Pin = ARD_D7_Pin;
 8000c10:	2310      	movs	r3, #16
 8000c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c14:	230b      	movs	r3, #11
 8000c16:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D7_GPIO_Port, &GPIO_InitStruct);
 8000c1c:	f107 0314 	add.w	r3, r7, #20
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f001 ffbf 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D13_Pin ARD_D12_Pin ARD_D11_Pin */
  GPIO_InitStruct.Pin = ARD_D13_Pin|ARD_D12_Pin|ARD_D11_Pin;
 8000c2a:	23e0      	movs	r3, #224	; 0xe0
 8000c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c36:	2303      	movs	r3, #3
 8000c38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000c3a:	2305      	movs	r3, #5
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c3e:	f107 0314 	add.w	r3, r7, #20
 8000c42:	4619      	mov	r1, r3
 8000c44:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c48:	f001 ffae 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D3_Pin */
  GPIO_InitStruct.Pin = ARD_D3_Pin;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c50:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <MX_GPIO_Init+0x314>)
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D3_GPIO_Port, &GPIO_InitStruct);
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	4840      	ldr	r0, [pc, #256]	; (8000d60 <MX_GPIO_Init+0x308>)
 8000c60:	f001 ffa2 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ARD_D6_Pin */
  GPIO_InitStruct.Pin = ARD_D6_Pin;
 8000c64:	2302      	movs	r3, #2
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c68:	230b      	movs	r3, #11
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ARD_D6_GPIO_Port, &GPIO_InitStruct);
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	4619      	mov	r1, r3
 8000c76:	483a      	ldr	r0, [pc, #232]	; (8000d60 <MX_GPIO_Init+0x308>)
 8000c78:	f001 ff96 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D8_Pin ISM43362_BOOT0_Pin ISM43362_WAKEUP_Pin LED2_Pin
                           SPSGRF_915_SDN_Pin ARD_D5_Pin SPSGRF_915_SPI3_CSN_Pin */
  GPIO_InitStruct.Pin = ARD_D8_Pin|ISM43362_BOOT0_Pin|ISM43362_WAKEUP_Pin|LED2_Pin
 8000c7c:	f24f 0334 	movw	r3, #61492	; 0xf034
 8000c80:	617b      	str	r3, [r7, #20]
                          |SPSGRF_915_SDN_Pin|ARD_D5_Pin|SPSGRF_915_SPI3_CSN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c82:	2301      	movs	r3, #1
 8000c84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c86:	2300      	movs	r3, #0
 8000c88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8e:	f107 0314 	add.w	r3, r7, #20
 8000c92:	4619      	mov	r1, r3
 8000c94:	4832      	ldr	r0, [pc, #200]	; (8000d60 <MX_GPIO_Init+0x308>)
 8000c96:	f001 ff87 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LPS22HB_INT_DRDY_EXTI0_Pin LSM6DSL_INT1_EXTI11_Pin ARD_D2_Pin HTS221_DRDY_EXTI15_Pin
                           PMOD_IRQ_EXTI12_Pin */
  GPIO_InitStruct.Pin = LPS22HB_INT_DRDY_EXTI0_Pin|LSM6DSL_INT1_EXTI11_Pin|ARD_D2_Pin|HTS221_DRDY_EXTI15_Pin
 8000c9a:	f64c 4304 	movw	r3, #52228	; 0xcc04
 8000c9e:	617b      	str	r3, [r7, #20]
                          |PMOD_IRQ_EXTI12_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ca0:	4b32      	ldr	r3, [pc, #200]	; (8000d6c <MX_GPIO_Init+0x314>)
 8000ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca8:	f107 0314 	add.w	r3, r7, #20
 8000cac:	4619      	mov	r1, r3
 8000cae:	482d      	ldr	r0, [pc, #180]	; (8000d64 <MX_GPIO_Init+0x30c>)
 8000cb0:	f001 ff7a 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin SPBTLE_RF_SPI3_CSN_Pin PMOD_RESET_Pin STSAFE_A100_RESET_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|SPBTLE_RF_SPI3_CSN_Pin|PMOD_RESET_Pin|STSAFE_A100_RESET_Pin;
 8000cb4:	f243 0381 	movw	r3, #12417	; 0x3081
 8000cb8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4825      	ldr	r0, [pc, #148]	; (8000d64 <MX_GPIO_Init+0x30c>)
 8000cce:	f001 ff6b 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_XSHUT_Pin LED3_WIFI__LED4_BLE_Pin */
  GPIO_InitStruct.Pin = VL53L0X_XSHUT_Pin|LED3_WIFI__LED4_BLE_Pin;
 8000cd2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ce4:	f107 0314 	add.w	r3, r7, #20
 8000ce8:	4619      	mov	r1, r3
 8000cea:	481f      	ldr	r0, [pc, #124]	; (8000d68 <MX_GPIO_Init+0x310>)
 8000cec:	f001 ff5c 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : VL53L0X_GPIO1_EXTI7_Pin LSM3MDL_DRDY_EXTI8_Pin */
  GPIO_InitStruct.Pin = VL53L0X_GPIO1_EXTI7_Pin|LSM3MDL_DRDY_EXTI8_Pin;
 8000cf0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000cf4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cf6:	4b1d      	ldr	r3, [pc, #116]	; (8000d6c <MX_GPIO_Init+0x314>)
 8000cf8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cfe:	f107 0314 	add.w	r3, r7, #20
 8000d02:	4619      	mov	r1, r3
 8000d04:	4818      	ldr	r0, [pc, #96]	; (8000d68 <MX_GPIO_Init+0x310>)
 8000d06:	f001 ff4f 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PMOD_SPI2_SCK_Pin */
  GPIO_InitStruct.Pin = PMOD_SPI2_SCK_Pin;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d16:	2303      	movs	r3, #3
 8000d18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d1a:	2305      	movs	r3, #5
 8000d1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(PMOD_SPI2_SCK_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	480f      	ldr	r0, [pc, #60]	; (8000d64 <MX_GPIO_Init+0x30c>)
 8000d26:	f001 ff3f 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PMOD_UART2_CTS_Pin PMOD_UART2_RTS_Pin PMOD_UART2_TX_Pin PMOD_UART2_RX_Pin */
  GPIO_InitStruct.Pin = PMOD_UART2_CTS_Pin|PMOD_UART2_RTS_Pin|PMOD_UART2_TX_Pin|PMOD_UART2_RX_Pin;
 8000d2a:	2378      	movs	r3, #120	; 0x78
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2e:	2302      	movs	r3, #2
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d36:	2303      	movs	r3, #3
 8000d38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d3a:	2307      	movs	r3, #7
 8000d3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4807      	ldr	r0, [pc, #28]	; (8000d64 <MX_GPIO_Init+0x30c>)
 8000d46:	f001 ff2f 	bl	8002ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : ARD_D15_Pin ARD_D14_Pin */
  GPIO_InitStruct.Pin = ARD_D15_Pin|ARD_D14_Pin;
 8000d4a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d50:	2312      	movs	r3, #18
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e00d      	b.n	8000d74 <MX_GPIO_Init+0x31c>
 8000d58:	40021000 	.word	0x40021000
 8000d5c:	48001000 	.word	0x48001000
 8000d60:	48000400 	.word	0x48000400
 8000d64:	48000c00 	.word	0x48000c00
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	10110000 	.word	0x10110000
 8000d70:	10210000 	.word	0x10210000
 8000d74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d76:	2303      	movs	r3, #3
 8000d78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7a:	2304      	movs	r3, #4
 8000d7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7e:	f107 0314 	add.w	r3, r7, #20
 8000d82:	4619      	mov	r1, r3
 8000d84:	480b      	ldr	r0, [pc, #44]	; (8000db4 <MX_GPIO_Init+0x35c>)
 8000d86:	f001 ff0f 	bl	8002ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2017      	movs	r0, #23
 8000d90:	f001 fdc7 	bl	8002922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000d94:	2017      	movs	r0, #23
 8000d96:	f001 fde0 	bl	800295a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	2028      	movs	r0, #40	; 0x28
 8000da0:	f001 fdbf 	bl	8002922 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000da4:	2028      	movs	r0, #40	; 0x28
 8000da6:	f001 fdd8 	bl	800295a <HAL_NVIC_EnableIRQ>

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	; 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	48000400 	.word	0x48000400

08000db8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dbc:	b672      	cpsid	i
}
 8000dbe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000dc0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dc4:	4803      	ldr	r0, [pc, #12]	; (8000dd4 <Error_Handler+0x1c>)
 8000dc6:	f002 f9a5 	bl	8003114 <HAL_GPIO_TogglePin>
	  HAL_Delay(50); /* wait 50 ms */
 8000dca:	2032      	movs	r0, #50	; 0x32
 8000dcc:	f001 fcaa 	bl	8002724 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8000dd0:	e7f6      	b.n	8000dc0 <Error_Handler+0x8>
 8000dd2:	bf00      	nop
 8000dd4:	48000400 	.word	0x48000400

08000dd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b083      	sub	sp, #12
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dde:	4b0f      	ldr	r3, [pc, #60]	; (8000e1c <HAL_MspInit+0x44>)
 8000de0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000de2:	4a0e      	ldr	r2, [pc, #56]	; (8000e1c <HAL_MspInit+0x44>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6613      	str	r3, [r2, #96]	; 0x60
 8000dea:	4b0c      	ldr	r3, [pc, #48]	; (8000e1c <HAL_MspInit+0x44>)
 8000dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000df6:	4b09      	ldr	r3, [pc, #36]	; (8000e1c <HAL_MspInit+0x44>)
 8000df8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dfa:	4a08      	ldr	r2, [pc, #32]	; (8000e1c <HAL_MspInit+0x44>)
 8000dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e00:	6593      	str	r3, [r2, #88]	; 0x58
 8000e02:	4b06      	ldr	r3, [pc, #24]	; (8000e1c <HAL_MspInit+0x44>)
 8000e04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e0a:	603b      	str	r3, [r7, #0]
 8000e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	40021000 	.word	0x40021000

08000e20 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b08a      	sub	sp, #40	; 0x28
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e28:	f107 0314 	add.w	r3, r7, #20
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	601a      	str	r2, [r3, #0]
 8000e30:	605a      	str	r2, [r3, #4]
 8000e32:	609a      	str	r2, [r3, #8]
 8000e34:	60da      	str	r2, [r3, #12]
 8000e36:	611a      	str	r2, [r3, #16]
  if(DFSDM1_Init == 0)
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d12d      	bne.n	8000e9c <HAL_DFSDM_ChannelMspInit+0x7c>
  {
  /* USER CODE BEGIN DFSDM1_MspInit 0 */

  /* USER CODE END DFSDM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8000e40:	4b19      	ldr	r3, [pc, #100]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000e42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e44:	4a18      	ldr	r2, [pc, #96]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000e46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000e4a:	6613      	str	r3, [r2, #96]	; 0x60
 8000e4c:	4b16      	ldr	r3, [pc, #88]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000e54:	613b      	str	r3, [r7, #16]
 8000e56:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e58:	4b13      	ldr	r3, [pc, #76]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000e5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e5c:	4a12      	ldr	r2, [pc, #72]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000e5e:	f043 0310 	orr.w	r3, r3, #16
 8000e62:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e64:	4b10      	ldr	r3, [pc, #64]	; (8000ea8 <HAL_DFSDM_ChannelMspInit+0x88>)
 8000e66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e68:	f003 0310 	and.w	r3, r3, #16
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PE7     ------> DFSDM1_DATIN2
    PE9     ------> DFSDM1_CKOUT
    */
    GPIO_InitStruct.Pin = DFSDM1_DATIN2_Pin|DFSDM1_CKOUT_Pin;
 8000e70:	f44f 7320 	mov.w	r3, #640	; 0x280
 8000e74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8000e82:	2306      	movs	r3, #6
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e86:	f107 0314 	add.w	r3, r7, #20
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4807      	ldr	r0, [pc, #28]	; (8000eac <HAL_DFSDM_ChannelMspInit+0x8c>)
 8000e8e:	f001 fe8b 	bl	8002ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	3301      	adds	r3, #1
 8000e98:	4a02      	ldr	r2, [pc, #8]	; (8000ea4 <HAL_DFSDM_ChannelMspInit+0x84>)
 8000e9a:	6013      	str	r3, [r2, #0]
  }

}
 8000e9c:	bf00      	nop
 8000e9e:	3728      	adds	r7, #40	; 0x28
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	2000008c 	.word	0x2000008c
 8000ea8:	40021000 	.word	0x40021000
 8000eac:	48001000 	.word	0x48001000

08000eb0 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b08a      	sub	sp, #40	; 0x28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb8:	f107 0314 	add.w	r3, r7, #20
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	601a      	str	r2, [r3, #0]
 8000ec0:	605a      	str	r2, [r3, #4]
 8000ec2:	609a      	str	r2, [r3, #8]
 8000ec4:	60da      	str	r2, [r3, #12]
 8000ec6:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a17      	ldr	r2, [pc, #92]	; (8000f2c <HAL_QSPI_MspInit+0x7c>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d128      	bne.n	8000f24 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8000ed2:	4b17      	ldr	r3, [pc, #92]	; (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ed4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ed6:	4a16      	ldr	r2, [pc, #88]	; (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	6513      	str	r3, [r2, #80]	; 0x50
 8000ede:	4b14      	ldr	r3, [pc, #80]	; (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ee0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000ee2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ee6:	613b      	str	r3, [r7, #16]
 8000ee8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eea:	4b11      	ldr	r3, [pc, #68]	; (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000eec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eee:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ef6:	4b0e      	ldr	r3, [pc, #56]	; (8000f30 <HAL_QSPI_MspInit+0x80>)
 8000ef8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QUADSPI_CLK_Pin|QUADSPI_NCS_Pin|OQUADSPI_BK1_IO0_Pin|QUADSPI_BK1_IO1_Pin
 8000f02:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8000f06:	617b      	str	r3, [r7, #20]
                          |QUAD_SPI_BK1_IO2_Pin|QUAD_SPI_BK1_IO3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f08:	2302      	movs	r3, #2
 8000f0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f10:	2303      	movs	r3, #3
 8000f12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000f14:	230a      	movs	r3, #10
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f18:	f107 0314 	add.w	r3, r7, #20
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <HAL_QSPI_MspInit+0x84>)
 8000f20:	f001 fe42 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8000f24:	bf00      	nop
 8000f26:	3728      	adds	r7, #40	; 0x28
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	a0001000 	.word	0xa0001000
 8000f30:	40021000 	.word	0x40021000
 8000f34:	48001000 	.word	0x48001000

08000f38 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b08a      	sub	sp, #40	; 0x28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f40:	f107 0314 	add.w	r3, r7, #20
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	4a17      	ldr	r2, [pc, #92]	; (8000fb4 <HAL_SPI_MspInit+0x7c>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d128      	bne.n	8000fac <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f5a:	4b17      	ldr	r3, [pc, #92]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f5e:	4a16      	ldr	r2, [pc, #88]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f60:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f64:	6593      	str	r3, [r2, #88]	; 0x58
 8000f66:	4b14      	ldr	r3, [pc, #80]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f72:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	4a10      	ldr	r2, [pc, #64]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f78:	f043 0304 	orr.w	r3, r3, #4
 8000f7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f7e:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <HAL_SPI_MspInit+0x80>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	f003 0304 	and.w	r3, r3, #4
 8000f86:	60fb      	str	r3, [r7, #12]
 8000f88:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = INTERNAL_SPI3_SCK_Pin|INTERNAL_SPI3_MISO_Pin|INTERNAL_SPI3_MOSI_Pin;
 8000f8a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8000f8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f90:	2302      	movs	r3, #2
 8000f92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	2300      	movs	r3, #0
 8000f96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f9c:	2306      	movs	r3, #6
 8000f9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa0:	f107 0314 	add.w	r3, r7, #20
 8000fa4:	4619      	mov	r1, r3
 8000fa6:	4805      	ldr	r0, [pc, #20]	; (8000fbc <HAL_SPI_MspInit+0x84>)
 8000fa8:	f001 fdfe 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000fac:	bf00      	nop
 8000fae:	3728      	adds	r7, #40	; 0x28
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	40003c00 	.word	0x40003c00
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	48000800 	.word	0x48000800

08000fc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08c      	sub	sp, #48	; 0x30
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 031c 	add.w	r3, r7, #28
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a2e      	ldr	r2, [pc, #184]	; (8001098 <HAL_UART_MspInit+0xd8>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d128      	bne.n	8001034 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_UART_MspInit+0xdc>)
 8000fe4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	; (800109c <HAL_UART_MspInit+0xdc>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fec:	6613      	str	r3, [r2, #96]	; 0x60
 8000fee:	4b2b      	ldr	r3, [pc, #172]	; (800109c <HAL_UART_MspInit+0xdc>)
 8000ff0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ff6:	61bb      	str	r3, [r7, #24]
 8000ff8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	4b28      	ldr	r3, [pc, #160]	; (800109c <HAL_UART_MspInit+0xdc>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ffe:	4a27      	ldr	r2, [pc, #156]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001000:	f043 0302 	orr.w	r3, r3, #2
 8001004:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001006:	4b25      	ldr	r3, [pc, #148]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800100a:	f003 0302 	and.w	r3, r3, #2
 800100e:	617b      	str	r3, [r7, #20]
 8001010:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = ST_LINK_UART1_TX_Pin|ST_LINK_UART1_RX_Pin;
 8001012:	23c0      	movs	r3, #192	; 0xc0
 8001014:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101e:	2303      	movs	r3, #3
 8001020:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001022:	2307      	movs	r3, #7
 8001024:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001026:	f107 031c 	add.w	r3, r7, #28
 800102a:	4619      	mov	r1, r3
 800102c:	481c      	ldr	r0, [pc, #112]	; (80010a0 <HAL_UART_MspInit+0xe0>)
 800102e:	f001 fdbb 	bl	8002ba8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001032:	e02d      	b.n	8001090 <HAL_UART_MspInit+0xd0>
  else if(huart->Instance==USART3)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <HAL_UART_MspInit+0xe4>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d128      	bne.n	8001090 <HAL_UART_MspInit+0xd0>
    __HAL_RCC_USART3_CLK_ENABLE();
 800103e:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001040:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001042:	4a16      	ldr	r2, [pc, #88]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001044:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001048:	6593      	str	r3, [r2, #88]	; 0x58
 800104a:	4b14      	ldr	r3, [pc, #80]	; (800109c <HAL_UART_MspInit+0xdc>)
 800104c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800104e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001056:	4b11      	ldr	r3, [pc, #68]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001058:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800105a:	4a10      	ldr	r2, [pc, #64]	; (800109c <HAL_UART_MspInit+0xdc>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_UART_MspInit+0xdc>)
 8001064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = INTERNAL_UART3_TX_Pin|INTERNAL_UART3_RX_Pin;
 800106e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800107c:	2303      	movs	r3, #3
 800107e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001080:	2307      	movs	r3, #7
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001084:	f107 031c 	add.w	r3, r7, #28
 8001088:	4619      	mov	r1, r3
 800108a:	4807      	ldr	r0, [pc, #28]	; (80010a8 <HAL_UART_MspInit+0xe8>)
 800108c:	f001 fd8c 	bl	8002ba8 <HAL_GPIO_Init>
}
 8001090:	bf00      	nop
 8001092:	3730      	adds	r7, #48	; 0x30
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	40013800 	.word	0x40013800
 800109c:	40021000 	.word	0x40021000
 80010a0:	48000400 	.word	0x48000400
 80010a4:	40004800 	.word	0x40004800
 80010a8:	48000c00 	.word	0x48000c00

080010ac <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b08a      	sub	sp, #40	; 0x28
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b4:	f107 0314 	add.w	r3, r7, #20
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010cc:	d154      	bne.n	8001178 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ce:	4b2c      	ldr	r3, [pc, #176]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 80010d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d2:	4a2b      	ldr	r2, [pc, #172]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010da:	4b29      	ldr	r3, [pc, #164]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 80010dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010de:	f003 0301 	and.w	r3, r3, #1
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_OTG_FS_VBUS_Pin;
 80010e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010ec:	2300      	movs	r3, #0
 80010ee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f0:	2300      	movs	r3, #0
 80010f2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	4619      	mov	r1, r3
 80010fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010fe:	f001 fd53 	bl	8002ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_OTG_FS_ID_Pin|USB_OTG_FS_DM_Pin|USB_OTG_FS_DP_Pin;
 8001102:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8001106:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001108:	2302      	movs	r3, #2
 800110a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110c:	2300      	movs	r3, #0
 800110e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001110:	2303      	movs	r3, #3
 8001112:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001114:	230a      	movs	r3, #10
 8001116:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001118:	f107 0314 	add.w	r3, r7, #20
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001122:	f001 fd41 	bl	8002ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001126:	4b16      	ldr	r3, [pc, #88]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 8001128:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800112a:	4a15      	ldr	r2, [pc, #84]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 800112c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001130:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001132:	4b13      	ldr	r3, [pc, #76]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 8001134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800113a:	60fb      	str	r3, [r7, #12]
 800113c:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113e:	4b10      	ldr	r3, [pc, #64]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 8001140:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d114      	bne.n	8001174 <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	4b0d      	ldr	r3, [pc, #52]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 800114c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800114e:	4a0c      	ldr	r2, [pc, #48]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6593      	str	r3, [r2, #88]	; 0x58
 8001156:	4b0a      	ldr	r3, [pc, #40]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 8001158:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8001162:	f002 ff93 	bl	800408c <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001166:	4b06      	ldr	r3, [pc, #24]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 8001168:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <HAL_PCD_MspInit+0xd4>)
 800116c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001170:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001172:	e001      	b.n	8001178 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8001174:	f002 ff8a 	bl	800408c <HAL_PWREx_EnableVddUSB>
}
 8001178:	bf00      	nop
 800117a:	3728      	adds	r7, #40	; 0x28
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40021000 	.word	0x40021000

08001184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001188:	e7fe      	b.n	8001188 <NMI_Handler+0x4>

0800118a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800118a:	b480      	push	{r7}
 800118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800118e:	e7fe      	b.n	800118e <HardFault_Handler+0x4>

08001190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001194:	e7fe      	b.n	8001194 <MemManage_Handler+0x4>

08001196 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800119a:	e7fe      	b.n	800119a <BusFault_Handler+0x4>

0800119c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011a0:	e7fe      	b.n	80011a0 <UsageFault_Handler+0x4>

080011a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a2:	b480      	push	{r7}
 80011a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr

080011be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c2:	bf00      	nop
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr

080011cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f001 fa88 	bl	80026e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80011dc:	2020      	movs	r0, #32
 80011de:	f001 ffb3 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80011e2:	2040      	movs	r0, #64	; 0x40
 80011e4:	f001 ffb0 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80011e8:	2080      	movs	r0, #128	; 0x80
 80011ea:	f001 ffad 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80011ee:	f44f 7080 	mov.w	r0, #256	; 0x100
 80011f2:	f001 ffa9 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}

080011fa <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80011fa:	b580      	push	{r7, lr}
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_10);
 80011fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001202:	f001 ffa1 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8001206:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800120a:	f001 ff9d 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 800120e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001212:	f001 ff99 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_14);
 8001216:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800121a:	f001 ff95 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800121e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001222:	f001 ff91 	bl	8003148 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}

0800122a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800122a:	b580      	push	{r7, lr}
 800122c:	b086      	sub	sp, #24
 800122e:	af00      	add	r7, sp, #0
 8001230:	60f8      	str	r0, [r7, #12]
 8001232:	60b9      	str	r1, [r7, #8]
 8001234:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001236:	2300      	movs	r3, #0
 8001238:	617b      	str	r3, [r7, #20]
 800123a:	e00a      	b.n	8001252 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800123c:	f3af 8000 	nop.w
 8001240:	4601      	mov	r1, r0
 8001242:	68bb      	ldr	r3, [r7, #8]
 8001244:	1c5a      	adds	r2, r3, #1
 8001246:	60ba      	str	r2, [r7, #8]
 8001248:	b2ca      	uxtb	r2, r1
 800124a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	3301      	adds	r3, #1
 8001250:	617b      	str	r3, [r7, #20]
 8001252:	697a      	ldr	r2, [r7, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	429a      	cmp	r2, r3
 8001258:	dbf0      	blt.n	800123c <_read+0x12>
	}

return len;
 800125a:	687b      	ldr	r3, [r7, #4]
}
 800125c:	4618      	mov	r0, r3
 800125e:	3718      	adds	r7, #24
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
	return -1;
 800126c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001270:	4618      	mov	r0, r3
 8001272:	370c      	adds	r7, #12
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800128c:	605a      	str	r2, [r3, #4]
	return 0;
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <_isatty>:

int _isatty(int file)
{
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
	return 1;
 80012a4:	2301      	movs	r3, #1
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr

080012b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	60f8      	str	r0, [r7, #12]
 80012ba:	60b9      	str	r1, [r7, #8]
 80012bc:	607a      	str	r2, [r7, #4]
	return 0;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr

080012cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b086      	sub	sp, #24
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012d4:	4a14      	ldr	r2, [pc, #80]	; (8001328 <_sbrk+0x5c>)
 80012d6:	4b15      	ldr	r3, [pc, #84]	; (800132c <_sbrk+0x60>)
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e0:	4b13      	ldr	r3, [pc, #76]	; (8001330 <_sbrk+0x64>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d102      	bne.n	80012ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012e8:	4b11      	ldr	r3, [pc, #68]	; (8001330 <_sbrk+0x64>)
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <_sbrk+0x68>)
 80012ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012ee:	4b10      	ldr	r3, [pc, #64]	; (8001330 <_sbrk+0x64>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	4413      	add	r3, r2
 80012f6:	693a      	ldr	r2, [r7, #16]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d207      	bcs.n	800130c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012fc:	f005 fa4a 	bl	8006794 <__errno>
 8001300:	4603      	mov	r3, r0
 8001302:	220c      	movs	r2, #12
 8001304:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001306:	f04f 33ff 	mov.w	r3, #4294967295
 800130a:	e009      	b.n	8001320 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800130c:	4b08      	ldr	r3, [pc, #32]	; (8001330 <_sbrk+0x64>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001312:	4b07      	ldr	r3, [pc, #28]	; (8001330 <_sbrk+0x64>)
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4413      	add	r3, r2
 800131a:	4a05      	ldr	r2, [pc, #20]	; (8001330 <_sbrk+0x64>)
 800131c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3718      	adds	r7, #24
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20018000 	.word	0x20018000
 800132c:	00000400 	.word	0x00000400
 8001330:	20000090 	.word	0x20000090
 8001334:	20000740 	.word	0x20000740

08001338 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800133c:	4b17      	ldr	r3, [pc, #92]	; (800139c <SystemInit+0x64>)
 800133e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001342:	4a16      	ldr	r2, [pc, #88]	; (800139c <SystemInit+0x64>)
 8001344:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001348:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800134c:	4b14      	ldr	r3, [pc, #80]	; (80013a0 <SystemInit+0x68>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	4a13      	ldr	r2, [pc, #76]	; (80013a0 <SystemInit+0x68>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001358:	4b11      	ldr	r3, [pc, #68]	; (80013a0 <SystemInit+0x68>)
 800135a:	2200      	movs	r2, #0
 800135c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800135e:	4b10      	ldr	r3, [pc, #64]	; (80013a0 <SystemInit+0x68>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4a0f      	ldr	r2, [pc, #60]	; (80013a0 <SystemInit+0x68>)
 8001364:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001368:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800136c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <SystemInit+0x68>)
 8001370:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001374:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001376:	4b0a      	ldr	r3, [pc, #40]	; (80013a0 <SystemInit+0x68>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4a09      	ldr	r2, [pc, #36]	; (80013a0 <SystemInit+0x68>)
 800137c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001380:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001382:	4b07      	ldr	r3, [pc, #28]	; (80013a0 <SystemInit+0x68>)
 8001384:	2200      	movs	r2, #0
 8001386:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001388:	4b04      	ldr	r3, [pc, #16]	; (800139c <SystemInit+0x64>)
 800138a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800138e:	609a      	str	r2, [r3, #8]
#endif
}
 8001390:	bf00      	nop
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	e000ed00 	.word	0xe000ed00
 80013a0:	40021000 	.word	0x40021000

080013a4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80013dc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013a8:	f7ff ffc6 	bl	8001338 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013ac:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ae:	e003      	b.n	80013b8 <LoopCopyDataInit>

080013b0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013b0:	4b0b      	ldr	r3, [pc, #44]	; (80013e0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013b2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013b4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013b6:	3104      	adds	r1, #4

080013b8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013b8:	480a      	ldr	r0, [pc, #40]	; (80013e4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013ba:	4b0b      	ldr	r3, [pc, #44]	; (80013e8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013bc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013be:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80013c0:	d3f6      	bcc.n	80013b0 <CopyDataInit>
	ldr	r2, =_sbss
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LoopForever+0x12>)
	b	LoopFillZerobss
 80013c4:	e002      	b.n	80013cc <LoopFillZerobss>

080013c6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80013c6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80013c8:	f842 3b04 	str.w	r3, [r2], #4

080013cc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80013cc:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <LoopForever+0x16>)
	cmp	r2, r3
 80013ce:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80013d0:	d3f9      	bcc.n	80013c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80013d2:	f005 f9e5 	bl	80067a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80013d6:	f7ff f93d 	bl	8000654 <main>

080013da <LoopForever>:

LoopForever:
    b LoopForever
 80013da:	e7fe      	b.n	80013da <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80013dc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80013e0:	080077c0 	.word	0x080077c0
	ldr	r0, =_sdata
 80013e4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80013e8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80013ec:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80013f0:	20000740 	.word	0x20000740

080013f4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013f4:	e7fe      	b.n	80013f4 <ADC1_2_IRQHandler>
	...

080013f8 <BSP_I2C2_Init>:
/**
  * @brief  Initialize I2C HAL
  * @retval BSP status
  */
int32_t BSP_I2C2_Init(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0

  int32_t ret = BSP_ERROR_NONE;
 80013fe:	2300      	movs	r3, #0
 8001400:	607b      	str	r3, [r7, #4]

  hi2c2.Instance  = I2C2;
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <BSP_I2C2_Init+0x70>)
 8001404:	4a19      	ldr	r2, [pc, #100]	; (800146c <BSP_I2C2_Init+0x74>)
 8001406:	601a      	str	r2, [r3, #0]

  if(I2C2InitCounter++ == 0)
 8001408:	4b19      	ldr	r3, [pc, #100]	; (8001470 <BSP_I2C2_Init+0x78>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	1c5a      	adds	r2, r3, #1
 800140e:	4918      	ldr	r1, [pc, #96]	; (8001470 <BSP_I2C2_Init+0x78>)
 8001410:	600a      	str	r2, [r1, #0]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d122      	bne.n	800145c <BSP_I2C2_Init+0x64>
  {
    if (HAL_I2C_GetState(&hi2c2) == HAL_I2C_STATE_RESET)
 8001416:	4814      	ldr	r0, [pc, #80]	; (8001468 <BSP_I2C2_Init+0x70>)
 8001418:	f002 f9ae 	bl	8003778 <HAL_I2C_GetState>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d11c      	bne.n	800145c <BSP_I2C2_Init+0x64>
    {
    #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* Init the I2C Msp */
      I2C2_MspInit(&hi2c2);
 8001422:	4811      	ldr	r0, [pc, #68]	; (8001468 <BSP_I2C2_Init+0x70>)
 8001424:	f000 f8fe 	bl	8001624 <I2C2_MspInit>
        {
          return BSP_ERROR_MSP_FAILURE;
        }
      }
    #endif
      if(ret == BSP_ERROR_NONE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d116      	bne.n	800145c <BSP_I2C2_Init+0x64>
	  {
    	/* Init the I2C */
    	if(MX_I2C2_Init(&hi2c2) != HAL_OK)
 800142e:	480e      	ldr	r0, [pc, #56]	; (8001468 <BSP_I2C2_Init+0x70>)
 8001430:	f000 f8b4 	bl	800159c <MX_I2C2_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <BSP_I2C2_Init+0x4a>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 800143a:	f06f 0307 	mvn.w	r3, #7
 800143e:	607b      	str	r3, [r7, #4]
 8001440:	e00c      	b.n	800145c <BSP_I2C2_Init+0x64>
    	}
    	else if(HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001442:	2100      	movs	r1, #0
 8001444:	4808      	ldr	r0, [pc, #32]	; (8001468 <BSP_I2C2_Init+0x70>)
 8001446:	f002 fbcd 	bl	8003be4 <HAL_I2CEx_ConfigAnalogFilter>
 800144a:	4603      	mov	r3, r0
 800144c:	2b00      	cmp	r3, #0
 800144e:	d003      	beq.n	8001458 <BSP_I2C2_Init+0x60>
    	{
      	  ret = BSP_ERROR_BUS_FAILURE;
 8001450:	f06f 0307 	mvn.w	r3, #7
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	e001      	b.n	800145c <BSP_I2C2_Init+0x64>
    	}
        else
        {
      	  ret = BSP_ERROR_NONE;
 8001458:	2300      	movs	r3, #0
 800145a:	607b      	str	r3, [r7, #4]
        }
      }
    }
  }
  return ret;
 800145c:	687b      	ldr	r3, [r7, #4]
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200006e0 	.word	0x200006e0
 800146c:	40005800 	.word	0x40005800
 8001470:	20000094 	.word	0x20000094

08001474 <BSP_I2C2_DeInit>:
/**
  * @brief  DeInitialize I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C2_DeInit(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800147a:	2300      	movs	r3, #0
 800147c:	607b      	str	r3, [r7, #4]

  if (I2C2InitCounter > 0)
 800147e:	4b0f      	ldr	r3, [pc, #60]	; (80014bc <BSP_I2C2_DeInit+0x48>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d014      	beq.n	80014b0 <BSP_I2C2_DeInit+0x3c>
  {
    if (--I2C2InitCounter == 0)
 8001486:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <BSP_I2C2_DeInit+0x48>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	3b01      	subs	r3, #1
 800148c:	4a0b      	ldr	r2, [pc, #44]	; (80014bc <BSP_I2C2_DeInit+0x48>)
 800148e:	6013      	str	r3, [r2, #0]
 8001490:	4b0a      	ldr	r3, [pc, #40]	; (80014bc <BSP_I2C2_DeInit+0x48>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10b      	bne.n	80014b0 <BSP_I2C2_DeInit+0x3c>
    {
  #if (USE_HAL_I2C_REGISTER_CALLBACKS == 0U)
      /* DeInit the I2C */
      I2C2_MspDeInit(&hi2c2);
 8001498:	4809      	ldr	r0, [pc, #36]	; (80014c0 <BSP_I2C2_DeInit+0x4c>)
 800149a:	f000 f909 	bl	80016b0 <I2C2_MspDeInit>
  #endif
      /* DeInit the I2C */
      if (HAL_I2C_DeInit(&hi2c2) != HAL_OK)
 800149e:	4808      	ldr	r0, [pc, #32]	; (80014c0 <BSP_I2C2_DeInit+0x4c>)
 80014a0:	f001 fef9 	bl	8003296 <HAL_I2C_DeInit>
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d002      	beq.n	80014b0 <BSP_I2C2_DeInit+0x3c>
      {
        ret = BSP_ERROR_BUS_FAILURE;
 80014aa:	f06f 0307 	mvn.w	r3, #7
 80014ae:	607b      	str	r3, [r7, #4]
      }
    }
  }
  return ret;
 80014b0:	687b      	ldr	r3, [r7, #4]
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000094 	.word	0x20000094
 80014c0:	200006e0 	.word	0x200006e0

080014c4 <BSP_I2C2_WriteReg>:
  * @param  Length Data Length
  * @retval BSP status
  */

int32_t BSP_I2C2_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08a      	sub	sp, #40	; 0x28
 80014c8:	af04      	add	r7, sp, #16
 80014ca:	60ba      	str	r2, [r7, #8]
 80014cc:	461a      	mov	r2, r3
 80014ce:	4603      	mov	r3, r0
 80014d0:	81fb      	strh	r3, [r7, #14]
 80014d2:	460b      	mov	r3, r1
 80014d4:	81bb      	strh	r3, [r7, #12]
 80014d6:	4613      	mov	r3, r2
 80014d8:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Write(&hi2c2, DevAddr,Reg, I2C_MEMADD_SIZE_8BIT,pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 80014de:	89ba      	ldrh	r2, [r7, #12]
 80014e0:	89f9      	ldrh	r1, [r7, #14]
 80014e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e6:	9302      	str	r3, [sp, #8]
 80014e8:	88fb      	ldrh	r3, [r7, #6]
 80014ea:	9301      	str	r3, [sp, #4]
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	9300      	str	r3, [sp, #0]
 80014f0:	2301      	movs	r3, #1
 80014f2:	480c      	ldr	r0, [pc, #48]	; (8001524 <BSP_I2C2_WriteReg+0x60>)
 80014f4:	f001 ff12 	bl	800331c <HAL_I2C_Mem_Write>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d00c      	beq.n	8001518 <BSP_I2C2_WriteReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 80014fe:	4809      	ldr	r0, [pc, #36]	; (8001524 <BSP_I2C2_WriteReg+0x60>)
 8001500:	f002 f948 	bl	8003794 <HAL_I2C_GetError>
 8001504:	4603      	mov	r3, r0
 8001506:	2b04      	cmp	r3, #4
 8001508:	d103      	bne.n	8001512 <BSP_I2C2_WriteReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800150a:	f06f 0365 	mvn.w	r3, #101	; 0x65
 800150e:	617b      	str	r3, [r7, #20]
 8001510:	e002      	b.n	8001518 <BSP_I2C2_WriteReg+0x54>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8001512:	f06f 0303 	mvn.w	r3, #3
 8001516:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8001518:	697b      	ldr	r3, [r7, #20]
}
 800151a:	4618      	mov	r0, r3
 800151c:	3718      	adds	r7, #24
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	200006e0 	.word	0x200006e0

08001528 <BSP_I2C2_ReadReg>:
  * @param  pData  Pointer to data buffer to read
  * @param  Length Data Length
  * @retval BSP status
  */
int32_t  BSP_I2C2_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b08a      	sub	sp, #40	; 0x28
 800152c:	af04      	add	r7, sp, #16
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	461a      	mov	r2, r3
 8001532:	4603      	mov	r3, r0
 8001534:	81fb      	strh	r3, [r7, #14]
 8001536:	460b      	mov	r3, r1
 8001538:	81bb      	strh	r3, [r7, #12]
 800153a:	4613      	mov	r3, r2
 800153c:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]

  if (HAL_I2C_Mem_Read(&hi2c2, DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length, BUS_I2C2_POLL_TIMEOUT) != HAL_OK)
 8001542:	89ba      	ldrh	r2, [r7, #12]
 8001544:	89f9      	ldrh	r1, [r7, #14]
 8001546:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800154a:	9302      	str	r3, [sp, #8]
 800154c:	88fb      	ldrh	r3, [r7, #6]
 800154e:	9301      	str	r3, [sp, #4]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	2301      	movs	r3, #1
 8001556:	480c      	ldr	r0, [pc, #48]	; (8001588 <BSP_I2C2_ReadReg+0x60>)
 8001558:	f001 fff4 	bl	8003544 <HAL_I2C_Mem_Read>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d00c      	beq.n	800157c <BSP_I2C2_ReadReg+0x54>
  {
    if (HAL_I2C_GetError(&hi2c2) == HAL_I2C_ERROR_AF)
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <BSP_I2C2_ReadReg+0x60>)
 8001564:	f002 f916 	bl	8003794 <HAL_I2C_GetError>
 8001568:	4603      	mov	r3, r0
 800156a:	2b04      	cmp	r3, #4
 800156c:	d103      	bne.n	8001576 <BSP_I2C2_ReadReg+0x4e>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800156e:	f06f 0365 	mvn.w	r3, #101	; 0x65
 8001572:	617b      	str	r3, [r7, #20]
 8001574:	e002      	b.n	800157c <BSP_I2C2_ReadReg+0x54>
    }
    else
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001576:	f06f 0303 	mvn.w	r3, #3
 800157a:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 800157c:	697b      	ldr	r3, [r7, #20]
}
 800157e:	4618      	mov	r0, r3
 8001580:	3718      	adds	r7, #24
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200006e0 	.word	0x200006e0

0800158c <BSP_GetTick>:

/**
  * @brief  Return system tick in ms
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001590:	f001 f8bc 	bl	800270c <HAL_GetTick>
 8001594:	4603      	mov	r3, r0
}
 8001596:	4618      	mov	r0, r3
 8001598:	bd80      	pop	{r7, pc}
	...

0800159c <MX_I2C2_Init>:

/* I2C2 init function */

__weak HAL_StatusTypeDef MX_I2C2_Init(I2C_HandleTypeDef* hi2c)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b084      	sub	sp, #16
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80015a4:	2300      	movs	r3, #0
 80015a6:	73fb      	strb	r3, [r7, #15]
  hi2c->Instance = I2C2;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a1c      	ldr	r2, [pc, #112]	; (800161c <MX_I2C2_Init+0x80>)
 80015ac:	601a      	str	r2, [r3, #0]
  hi2c->Init.Timing = 0x00702991;
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a1b      	ldr	r2, [pc, #108]	; (8001620 <MX_I2C2_Init+0x84>)
 80015b2:	605a      	str	r2, [r3, #4]
  hi2c->Init.OwnAddress1 = 0;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  hi2c->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2201      	movs	r2, #1
 80015be:	60da      	str	r2, [r3, #12]
  hi2c->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2200      	movs	r2, #0
 80015c4:	611a      	str	r2, [r3, #16]
  hi2c->Init.OwnAddress2 = 0;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	615a      	str	r2, [r3, #20]
  hi2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	619a      	str	r2, [r3, #24]
  hi2c->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2200      	movs	r2, #0
 80015d6:	61da      	str	r2, [r3, #28]
  hi2c->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2200      	movs	r2, #0
 80015dc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(hi2c) != HAL_OK)
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f001 fdca 	bl	8003178 <HAL_I2C_Init>
 80015e4:	4603      	mov	r3, r0
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d001      	beq.n	80015ee <MX_I2C2_Init+0x52>
  {
    ret = HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigAnalogFilter(hi2c, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80015ee:	2100      	movs	r1, #0
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f002 faf7 	bl	8003be4 <HAL_I2CEx_ConfigAnalogFilter>
 80015f6:	4603      	mov	r3, r0
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d001      	beq.n	8001600 <MX_I2C2_Init+0x64>
  {
    ret = HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	73fb      	strb	r3, [r7, #15]
  }

  if (HAL_I2CEx_ConfigDigitalFilter(hi2c, 0) != HAL_OK)
 8001600:	2100      	movs	r1, #0
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f002 fb39 	bl	8003c7a <HAL_I2CEx_ConfigDigitalFilter>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_I2C2_Init+0x76>
  {
    ret = HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8001612:	7bfb      	ldrb	r3, [r7, #15]
}
 8001614:	4618      	mov	r0, r3
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40005800 	.word	0x40005800
 8001620:	00702991 	.word	0x00702991

08001624 <I2C2_MspInit>:

static void I2C2_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800162c:	4b1e      	ldr	r3, [pc, #120]	; (80016a8 <I2C2_MspInit+0x84>)
 800162e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001630:	4a1d      	ldr	r2, [pc, #116]	; (80016a8 <I2C2_MspInit+0x84>)
 8001632:	f043 0302 	orr.w	r3, r3, #2
 8001636:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001638:	4b1b      	ldr	r3, [pc, #108]	; (80016a8 <I2C2_MspInit+0x84>)
 800163a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	613b      	str	r3, [r7, #16]
 8001642:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = BUS_I2C2_SCL_GPIO_PIN;
 8001644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001648:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800164a:	2312      	movs	r3, #18
 800164c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800164e:	2301      	movs	r3, #1
 8001650:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SCL_GPIO_AF;
 8001656:	2304      	movs	r3, #4
 8001658:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SCL_GPIO_PORT, &GPIO_InitStruct);
 800165a:	f107 0314 	add.w	r3, r7, #20
 800165e:	4619      	mov	r1, r3
 8001660:	4812      	ldr	r0, [pc, #72]	; (80016ac <I2C2_MspInit+0x88>)
 8001662:	f001 faa1 	bl	8002ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = BUS_I2C2_SDA_GPIO_PIN;
 8001666:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800166a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800166c:	2312      	movs	r3, #18
 800166e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001670:	2301      	movs	r3, #1
 8001672:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001674:	2303      	movs	r3, #3
 8001676:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = BUS_I2C2_SDA_GPIO_AF;
 8001678:	2304      	movs	r3, #4
 800167a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BUS_I2C2_SDA_GPIO_PORT, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	480a      	ldr	r0, [pc, #40]	; (80016ac <I2C2_MspInit+0x88>)
 8001684:	f001 fa90 	bl	8002ba8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001688:	4b07      	ldr	r3, [pc, #28]	; (80016a8 <I2C2_MspInit+0x84>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	4a06      	ldr	r2, [pc, #24]	; (80016a8 <I2C2_MspInit+0x84>)
 800168e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001692:	6593      	str	r3, [r2, #88]	; 0x58
 8001694:	4b04      	ldr	r3, [pc, #16]	; (80016a8 <I2C2_MspInit+0x84>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800169c:	60fb      	str	r3, [r7, #12]
 800169e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
}
 80016a0:	bf00      	nop
 80016a2:	3728      	adds	r7, #40	; 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}
 80016a8:	40021000 	.word	0x40021000
 80016ac:	48000400 	.word	0x48000400

080016b0 <I2C2_MspDeInit>:

static void I2C2_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN I2C2_MspDeInit 0 */

  /* USER CODE END I2C2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C2_CLK_DISABLE();
 80016b8:	4b09      	ldr	r3, [pc, #36]	; (80016e0 <I2C2_MspDeInit+0x30>)
 80016ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016bc:	4a08      	ldr	r2, [pc, #32]	; (80016e0 <I2C2_MspDeInit+0x30>)
 80016be:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016c2:	6593      	str	r3, [r2, #88]	; 0x58

    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    HAL_GPIO_DeInit(BUS_I2C2_SCL_GPIO_PORT, BUS_I2C2_SCL_GPIO_PIN);
 80016c4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80016c8:	4806      	ldr	r0, [pc, #24]	; (80016e4 <I2C2_MspDeInit+0x34>)
 80016ca:	f001 fc17 	bl	8002efc <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(BUS_I2C2_SDA_GPIO_PORT, BUS_I2C2_SDA_GPIO_PIN);
 80016ce:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80016d2:	4804      	ldr	r0, [pc, #16]	; (80016e4 <I2C2_MspDeInit+0x34>)
 80016d4:	f001 fc12 	bl	8002efc <HAL_GPIO_DeInit>

  /* USER CODE BEGIN I2C2_MspDeInit 1 */

  /* USER CODE END I2C2_MspDeInit 1 */
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400

080016e8 <LSM6DSL_RegisterBusIO>:
 * @brief  Register Component Bus IO operations
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 80016f2:	2300      	movs	r3, #0
 80016f4:	60fb      	str	r3, [r7, #12]

  if (pObj == NULL)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d103      	bne.n	8001704 <LSM6DSL_RegisterBusIO+0x1c>
  {
    ret = LSM6DSL_ERROR;
 80016fc:	f04f 33ff 	mov.w	r3, #4294967295
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	e04d      	b.n	80017a0 <LSM6DSL_RegisterBusIO+0xb8>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685a      	ldr	r2, [r3, #4]
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	605a      	str	r2, [r3, #4]
    pObj->IO.BusType   = pIO->BusType;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	689a      	ldr	r2, [r3, #8]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	609a      	str	r2, [r3, #8]
    pObj->IO.Address   = pIO->Address;
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	7b1a      	ldrb	r2, [r3, #12]
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	731a      	strb	r2, [r3, #12]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	691a      	ldr	r2, [r3, #16]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	611a      	str	r2, [r3, #16]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	695a      	ldr	r2, [r3, #20]
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	615a      	str	r2, [r3, #20]
    pObj->IO.GetTick   = pIO->GetTick;
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	699a      	ldr	r2, [r3, #24]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]

    pObj->Ctx.read_reg  = ReadRegWrap;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a1b      	ldr	r2, [pc, #108]	; (80017ac <LSM6DSL_RegisterBusIO+0xc4>)
 8001740:	621a      	str	r2, [r3, #32]
    pObj->Ctx.write_reg = WriteRegWrap;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a1a      	ldr	r2, [pc, #104]	; (80017b0 <LSM6DSL_RegisterBusIO+0xc8>)
 8001746:	61da      	str	r2, [r3, #28]
    pObj->Ctx.handle   = pObj;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	625a      	str	r2, [r3, #36]	; 0x24

    if (pObj->IO.Init == NULL)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <LSM6DSL_RegisterBusIO+0x76>
    {
      ret = LSM6DSL_ERROR;
 8001756:	f04f 33ff 	mov.w	r3, #4294967295
 800175a:	60fb      	str	r3, [r7, #12]
 800175c:	e020      	b.n	80017a0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else if (pObj->IO.Init() != LSM6DSL_OK)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4798      	blx	r3
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d003      	beq.n	8001772 <LSM6DSL_RegisterBusIO+0x8a>
    {
      ret = LSM6DSL_ERROR;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	60fb      	str	r3, [r7, #12]
 8001770:	e016      	b.n	80017a0 <LSM6DSL_RegisterBusIO+0xb8>
    }
    else
    {
      if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d112      	bne.n	80017a0 <LSM6DSL_RegisterBusIO+0xb8>
      {
        /* Enable the SPI 3-Wires support only the first time */
        if (pObj->is_initialized == 0U)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001780:	2b00      	cmp	r3, #0
 8001782:	d10d      	bne.n	80017a0 <LSM6DSL_RegisterBusIO+0xb8>
        {
          /* Enable SPI 3-Wires on the component */
          uint8_t data = 0x0C;
 8001784:	230c      	movs	r3, #12
 8001786:	72fb      	strb	r3, [r7, #11]

          if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	461a      	mov	r2, r3
 800178c:	2112      	movs	r1, #18
 800178e:	6878      	ldr	r0, [r7, #4]
 8001790:	f000 f9b9 	bl	8001b06 <LSM6DSL_Write_Reg>
 8001794:	4603      	mov	r3, r0
 8001796:	2b00      	cmp	r3, #0
 8001798:	d002      	beq.n	80017a0 <LSM6DSL_RegisterBusIO+0xb8>
          {
            ret = LSM6DSL_ERROR;
 800179a:	f04f 33ff 	mov.w	r3, #4294967295
 800179e:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }

  return ret;
 80017a0:	68fb      	ldr	r3, [r7, #12]
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	08001dc1 	.word	0x08001dc1
 80017b0:	08001df7 	.word	0x08001df7

080017b4 <LSM6DSL_Init>:
 * @brief  Initialize the LSM6DSL sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Enable register address automatically incremented during a multiple byte
  access with a serial interface. */
  if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	331c      	adds	r3, #28
 80017c0:	2101      	movs	r1, #1
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 fcb4 	bl	8002130 <lsm6dsl_auto_increment_set>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d002      	beq.n	80017d4 <LSM6DSL_Init+0x20>
  {
    return LSM6DSL_ERROR;
 80017ce:	f04f 33ff 	mov.w	r3, #4294967295
 80017d2:	e054      	b.n	800187e <LSM6DSL_Init+0xca>
  }

  /* Enable BDU */
  if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	331c      	adds	r3, #28
 80017d8:	2101      	movs	r1, #1
 80017da:	4618      	mov	r0, r3
 80017dc:	f000 fc26 	bl	800202c <lsm6dsl_block_data_update_set>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d002      	beq.n	80017ec <LSM6DSL_Init+0x38>
  {
    return LSM6DSL_ERROR;
 80017e6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ea:	e048      	b.n	800187e <LSM6DSL_Init+0xca>
  }

  /* FIFO mode selection */
  if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	331c      	adds	r3, #28
 80017f0:	2100      	movs	r1, #0
 80017f2:	4618      	mov	r0, r3
 80017f4:	f000 fefb 	bl	80025ee <lsm6dsl_fifo_mode_set>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d002      	beq.n	8001804 <LSM6DSL_Init+0x50>
  {
    return LSM6DSL_ERROR;
 80017fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001802:	e03c      	b.n	800187e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2204      	movs	r2, #4
 8001808:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* Output data rate selection - power down. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	331c      	adds	r3, #28
 8001810:	2100      	movs	r1, #0
 8001812:	4618      	mov	r0, r3
 8001814:	f000 fb98 	bl	8001f48 <lsm6dsl_xl_data_rate_set>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d002      	beq.n	8001824 <LSM6DSL_Init+0x70>
  {
    return LSM6DSL_ERROR;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	e02c      	b.n	800187e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	331c      	adds	r3, #28
 8001828:	2100      	movs	r1, #0
 800182a:	4618      	mov	r0, r3
 800182c:	f000 fb2e 	bl	8001e8c <lsm6dsl_xl_full_scale_set>
 8001830:	4603      	mov	r3, r0
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <LSM6DSL_Init+0x88>
  {
    return LSM6DSL_ERROR;
 8001836:	f04f 33ff 	mov.w	r3, #4294967295
 800183a:	e020      	b.n	800187e <LSM6DSL_Init+0xca>
  }

  /* Select default output data rate. */
  pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2204      	movs	r2, #4
 8001840:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Output data rate selection - power down. */
  if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	331c      	adds	r3, #28
 8001848:	2100      	movs	r1, #0
 800184a:	4618      	mov	r0, r3
 800184c:	f000 fbc8 	bl	8001fe0 <lsm6dsl_gy_data_rate_set>
 8001850:	4603      	mov	r3, r0
 8001852:	2b00      	cmp	r3, #0
 8001854:	d002      	beq.n	800185c <LSM6DSL_Init+0xa8>
  {
    return LSM6DSL_ERROR;
 8001856:	f04f 33ff 	mov.w	r3, #4294967295
 800185a:	e010      	b.n	800187e <LSM6DSL_Init+0xca>
  }

  /* Full scale selection. */
  if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	331c      	adds	r3, #28
 8001860:	2106      	movs	r1, #6
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fb96 	bl	8001f94 <lsm6dsl_gy_full_scale_set>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <LSM6DSL_Init+0xc0>
  {
    return LSM6DSL_ERROR;
 800186e:	f04f 33ff 	mov.w	r3, #4294967295
 8001872:	e004      	b.n	800187e <LSM6DSL_Init+0xca>
  }

  pObj->is_initialized = 1;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2201      	movs	r2, #1
 8001878:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  return LSM6DSL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	3708      	adds	r7, #8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}

08001886 <LSM6DSL_ReadID>:
 * @param  pObj the device pObj
 * @param  Id the WHO_AM_I value
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	b082      	sub	sp, #8
 800188a:	af00      	add	r7, sp, #0
 800188c:	6078      	str	r0, [r7, #4]
 800188e:	6039      	str	r1, [r7, #0]
  if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	331c      	adds	r3, #28
 8001894:	6839      	ldr	r1, [r7, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f000 fc39 	bl	800210e <lsm6dsl_device_id_get>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d002      	beq.n	80018a8 <LSM6DSL_ReadID+0x22>
  {
    return LSM6DSL_ERROR;
 80018a2:	f04f 33ff 	mov.w	r3, #4294967295
 80018a6:	e000      	b.n	80018aa <LSM6DSL_ReadID+0x24>
  }

  return LSM6DSL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <LSM6DSL_ACC_Enable>:
 * @brief  Enable the LSM6DSL accelerometer sensor
 * @param  pObj the device pObj
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
  /* Check if the component is already enabled */
  if (pObj->acc_is_enabled == 1U)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <LSM6DSL_ACC_Enable+0x16>
  {
    return LSM6DSL_OK;
 80018c4:	2300      	movs	r3, #0
 80018c6:	e014      	b.n	80018f2 <LSM6DSL_ACC_Enable+0x40>
  }

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f103 021c 	add.w	r2, r3, #28
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80018d4:	4619      	mov	r1, r3
 80018d6:	4610      	mov	r0, r2
 80018d8:	f000 fb36 	bl	8001f48 <lsm6dsl_xl_data_rate_set>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d002      	beq.n	80018e8 <LSM6DSL_ACC_Enable+0x36>
  {
    return LSM6DSL_ERROR;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	e004      	b.n	80018f2 <LSM6DSL_ACC_Enable+0x40>
  }

  pObj->acc_is_enabled = 1;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2201      	movs	r2, #1
 80018ec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  return LSM6DSL_OK;
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
	...

080018fc <LSM6DSL_ACC_GetSensitivity>:
 * @param  pObj the device pObj
 * @param  Sensitivity pointer
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b084      	sub	sp, #16
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  int32_t ret = LSM6DSL_OK;
 8001906:	2300      	movs	r3, #0
 8001908:	60fb      	str	r3, [r7, #12]
  lsm6dsl_fs_xl_t full_scale;

  /* Read actual full scale selection from sensor. */
  if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	331c      	adds	r3, #28
 800190e:	f107 020b 	add.w	r2, r7, #11
 8001912:	4611      	mov	r1, r2
 8001914:	4618      	mov	r0, r3
 8001916:	f000 fadf 	bl	8001ed8 <lsm6dsl_xl_full_scale_get>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d002      	beq.n	8001926 <LSM6DSL_ACC_GetSensitivity+0x2a>
  {
    return LSM6DSL_ERROR;
 8001920:	f04f 33ff 	mov.w	r3, #4294967295
 8001924:	e023      	b.n	800196e <LSM6DSL_ACC_GetSensitivity+0x72>
  }

  /* Store the Sensitivity based on actual full scale. */
  switch (full_scale)
 8001926:	7afb      	ldrb	r3, [r7, #11]
 8001928:	2b03      	cmp	r3, #3
 800192a:	d81b      	bhi.n	8001964 <LSM6DSL_ACC_GetSensitivity+0x68>
 800192c:	a201      	add	r2, pc, #4	; (adr r2, 8001934 <LSM6DSL_ACC_GetSensitivity+0x38>)
 800192e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001932:	bf00      	nop
 8001934:	08001945 	.word	0x08001945
 8001938:	0800195d 	.word	0x0800195d
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001955 	.word	0x08001955
  {
    case LSM6DSL_2g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	4a0c      	ldr	r2, [pc, #48]	; (8001978 <LSM6DSL_ACC_GetSensitivity+0x7c>)
 8001948:	601a      	str	r2, [r3, #0]
      break;
 800194a:	e00f      	b.n	800196c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_4g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
 800194c:	683b      	ldr	r3, [r7, #0]
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LSM6DSL_ACC_GetSensitivity+0x80>)
 8001950:	601a      	str	r2, [r3, #0]
      break;
 8001952:	e00b      	b.n	800196c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_8g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <LSM6DSL_ACC_GetSensitivity+0x84>)
 8001958:	601a      	str	r2, [r3, #0]
      break;
 800195a:	e007      	b.n	800196c <LSM6DSL_ACC_GetSensitivity+0x70>

    case LSM6DSL_16g:
      *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
 800195c:	683b      	ldr	r3, [r7, #0]
 800195e:	4a09      	ldr	r2, [pc, #36]	; (8001984 <LSM6DSL_ACC_GetSensitivity+0x88>)
 8001960:	601a      	str	r2, [r3, #0]
      break;
 8001962:	e003      	b.n	800196c <LSM6DSL_ACC_GetSensitivity+0x70>

    default:
      ret = LSM6DSL_ERROR;
 8001964:	f04f 33ff 	mov.w	r3, #4294967295
 8001968:	60fb      	str	r3, [r7, #12]
      break;
 800196a:	bf00      	nop
  }

  return ret;
 800196c:	68fb      	ldr	r3, [r7, #12]
}
 800196e:	4618      	mov	r0, r3
 8001970:	3710      	adds	r7, #16
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	3d79db23 	.word	0x3d79db23
 800197c:	3df9db23 	.word	0x3df9db23
 8001980:	3e79db23 	.word	0x3e79db23
 8001984:	3ef9db23 	.word	0x3ef9db23

08001988 <LSM6DSL_ACC_SetOutputDataRate>:
 * @param  pObj the device pObj
 * @param  Odr the output data rate value to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b082      	sub	sp, #8
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	ed87 0a00 	vstr	s0, [r7]
  /* Check if the component is enabled */
  if (pObj->acc_is_enabled == 1U)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800199a:	2b01      	cmp	r3, #1
 800199c:	d106      	bne.n	80019ac <LSM6DSL_ACC_SetOutputDataRate+0x24>
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
 800199e:	ed97 0a00 	vldr	s0, [r7]
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 f8fe 	bl	8001ba4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>
 80019a8:	4603      	mov	r3, r0
 80019aa:	e005      	b.n	80019b8 <LSM6DSL_ACC_SetOutputDataRate+0x30>
  }
  else
  {
    return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
 80019ac:	ed97 0a00 	vldr	s0, [r7]
 80019b0:	6878      	ldr	r0, [r7, #4]
 80019b2:	f000 f983 	bl	8001cbc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>
 80019b6:	4603      	mov	r3, r0
  }
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}

080019c0 <LSM6DSL_ACC_SetFullScale>:
 * @param  pObj the device pObj
 * @param  FullScale the functional full scale to be set
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
 80019c8:	6039      	str	r1, [r7, #0]
  lsm6dsl_fs_xl_t new_fs;

  /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
     the parameter passed to the function is not known at the moment of analysis */
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
           : (FullScale <= 4) ? LSM6DSL_4g
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	dd0b      	ble.n	80019e8 <LSM6DSL_ACC_SetFullScale+0x28>
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	dd06      	ble.n	80019e4 <LSM6DSL_ACC_SetFullScale+0x24>
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	2b08      	cmp	r3, #8
 80019da:	dc01      	bgt.n	80019e0 <LSM6DSL_ACC_SetFullScale+0x20>
 80019dc:	2303      	movs	r3, #3
 80019de:	e004      	b.n	80019ea <LSM6DSL_ACC_SetFullScale+0x2a>
 80019e0:	2301      	movs	r3, #1
 80019e2:	e002      	b.n	80019ea <LSM6DSL_ACC_SetFullScale+0x2a>
 80019e4:	2302      	movs	r3, #2
 80019e6:	e000      	b.n	80019ea <LSM6DSL_ACC_SetFullScale+0x2a>
 80019e8:	2300      	movs	r3, #0
  new_fs = (FullScale <= 2) ? LSM6DSL_2g
 80019ea:	73fb      	strb	r3, [r7, #15]
           : (FullScale <= 8) ? LSM6DSL_8g
           :                    LSM6DSL_16g;

  if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	331c      	adds	r3, #28
 80019f0:	7bfa      	ldrb	r2, [r7, #15]
 80019f2:	4611      	mov	r1, r2
 80019f4:	4618      	mov	r0, r3
 80019f6:	f000 fa49 	bl	8001e8c <lsm6dsl_xl_full_scale_set>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d002      	beq.n	8001a06 <LSM6DSL_ACC_SetFullScale+0x46>
  {
    return LSM6DSL_ERROR;
 8001a00:	f04f 33ff 	mov.w	r3, #4294967295
 8001a04:	e000      	b.n	8001a08 <LSM6DSL_ACC_SetFullScale+0x48>
  }

  return LSM6DSL_OK;
 8001a06:	2300      	movs	r3, #0
}
 8001a08:	4618      	mov	r0, r3
 8001a0a:	3710      	adds	r7, #16
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bd80      	pop	{r7, pc}

08001a10 <LSM6DSL_ACC_GetAxesRaw>:
 * @param  pObj the device pObj
 * @param  Value pointer where the raw values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b084      	sub	sp, #16
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	331c      	adds	r3, #28
 8001a1e:	f107 0208 	add.w	r2, r7, #8
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fb27 	bl	8002078 <lsm6dsl_acceleration_raw_get>
 8001a2a:	4603      	mov	r3, r0
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d002      	beq.n	8001a36 <LSM6DSL_ACC_GetAxesRaw+0x26>
  {
    return LSM6DSL_ERROR;
 8001a30:	f04f 33ff 	mov.w	r3, #4294967295
 8001a34:	e00c      	b.n	8001a50 <LSM6DSL_ACC_GetAxesRaw+0x40>
  }

  /* Format the data. */
  Value->x = data_raw.i16bit[0];
 8001a36:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	801a      	strh	r2, [r3, #0]
  Value->y = data_raw.i16bit[1];
 8001a3e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	805a      	strh	r2, [r3, #2]
  Value->z = data_raw.i16bit[2];
 8001a46:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	809a      	strh	r2, [r3, #4]

  return LSM6DSL_OK;
 8001a4e:	2300      	movs	r3, #0
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3710      	adds	r7, #16
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}

08001a58 <LSM6DSL_ACC_GetAxes>:
 * @param  pObj the device pObj
 * @param  Acceleration pointer where the values of the axes are written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
 8001a60:	6039      	str	r1, [r7, #0]
  lsm6dsl_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
 8001a62:	f04f 0300 	mov.w	r3, #0
 8001a66:	60fb      	str	r3, [r7, #12]

  /* Read raw data values. */
  if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != LSM6DSL_OK)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	331c      	adds	r3, #28
 8001a6c:	f107 0210 	add.w	r2, r7, #16
 8001a70:	4611      	mov	r1, r2
 8001a72:	4618      	mov	r0, r3
 8001a74:	f000 fb00 	bl	8002078 <lsm6dsl_acceleration_raw_get>
 8001a78:	4603      	mov	r3, r0
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d002      	beq.n	8001a84 <LSM6DSL_ACC_GetAxes+0x2c>
  {
    return LSM6DSL_ERROR;
 8001a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a82:	e03c      	b.n	8001afe <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Get LSM6DSL actual sensitivity. */
  if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
 8001a84:	f107 030c 	add.w	r3, r7, #12
 8001a88:	4619      	mov	r1, r3
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f7ff ff36 	bl	80018fc <LSM6DSL_ACC_GetSensitivity>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <LSM6DSL_ACC_GetAxes+0x44>
  {
    return LSM6DSL_ERROR;
 8001a96:	f04f 33ff 	mov.w	r3, #4294967295
 8001a9a:	e030      	b.n	8001afe <LSM6DSL_ACC_GetAxes+0xa6>
  }

  /* Calculate the data. */
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
 8001a9c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aac:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ab4:	ee17 2a90 	vmov	r2, s15
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	601a      	str	r2, [r3, #0]
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
 8001abc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001ac0:	ee07 3a90 	vmov	s15, r3
 8001ac4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001acc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ad0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ad4:	ee17 2a90 	vmov	r2, s15
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	605a      	str	r2, [r3, #4]
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
 8001adc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae8:	edd7 7a03 	vldr	s15, [r7, #12]
 8001aec:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001af4:	ee17 2a90 	vmov	r2, s15
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	609a      	str	r2, [r3, #8]

  return LSM6DSL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <LSM6DSL_Write_Reg>:
 * @param  Reg address to be written
 * @param  Data value to be written
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b082      	sub	sp, #8
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70fb      	strb	r3, [r7, #3]
 8001b12:	4613      	mov	r3, r2
 8001b14:	70bb      	strb	r3, [r7, #2]
  if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f103 001c 	add.w	r0, r3, #28
 8001b1c:	1cba      	adds	r2, r7, #2
 8001b1e:	78f9      	ldrb	r1, [r7, #3]
 8001b20:	2301      	movs	r3, #1
 8001b22:	f000 f99b 	bl	8001e5c <lsm6dsl_write_reg>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d002      	beq.n	8001b32 <LSM6DSL_Write_Reg+0x2c>
  {
    return LSM6DSL_ERROR;
 8001b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8001b30:	e000      	b.n	8001b34 <LSM6DSL_Write_Reg+0x2e>
  }

  return LSM6DSL_OK;
 8001b32:	2300      	movs	r3, #0
}
 8001b34:	4618      	mov	r0, r3
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <LSM6DSL_ACC_Set_INT1_DRDY>:
 * @param  pObj the device pObj
 * @param  Val the value of int1_drdy_xl in reg INT1_CTRL
 * @retval 0 in case of success, an error code otherwise
 */
int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_int1_route_t reg;

  if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	331c      	adds	r3, #28
 8001b4c:	f107 020c 	add.w	r2, r7, #12
 8001b50:	4611      	mov	r1, r2
 8001b52:	4618      	mov	r0, r3
 8001b54:	f000 fc75 	bl	8002442 <lsm6dsl_pin_int1_route_get>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d002      	beq.n	8001b64 <LSM6DSL_ACC_Set_INT1_DRDY+0x28>
  {
    return LSM6DSL_ERROR;
 8001b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b62:	e01b      	b.n	8001b9c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  if (Val <= 1)
 8001b64:	78fb      	ldrb	r3, [r7, #3]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d811      	bhi.n	8001b8e <LSM6DSL_ACC_Set_INT1_DRDY+0x52>
  {
    reg.int1_drdy_xl = Val;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 0301 	and.w	r3, r3, #1
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	7b3b      	ldrb	r3, [r7, #12]
 8001b74:	f362 0300 	bfi	r3, r2, #0, #1
 8001b78:	733b      	strb	r3, [r7, #12]
  else
  {
    return LSM6DSL_ERROR;
  }

  if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	331c      	adds	r3, #28
 8001b7e:	68f9      	ldr	r1, [r7, #12]
 8001b80:	4618      	mov	r0, r3
 8001b82:	f000 fafb 	bl	800217c <lsm6dsl_pin_int1_route_set>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d006      	beq.n	8001b9a <LSM6DSL_ACC_Set_INT1_DRDY+0x5e>
 8001b8c:	e002      	b.n	8001b94 <LSM6DSL_ACC_Set_INT1_DRDY+0x58>
    return LSM6DSL_ERROR;
 8001b8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b92:	e003      	b.n	8001b9c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  {
    return LSM6DSL_ERROR;
 8001b94:	f04f 33ff 	mov.w	r3, #4294967295
 8001b98:	e000      	b.n	8001b9c <LSM6DSL_ACC_Set_INT1_DRDY+0x60>
  }

  return LSM6DSL_OK;
 8001b9a:	2300      	movs	r3, #0
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	3710      	adds	r7, #16
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	bd80      	pop	{r7, pc}

08001ba4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b084      	sub	sp, #16
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
 8001bac:	ed87 0a00 	vstr	s0, [r7]
  lsm6dsl_odr_xl_t new_odr;

  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
          : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001bb0:	edd7 7a00 	vldr	s15, [r7]
 8001bb4:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001bb8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bc0:	d801      	bhi.n	8001bc6 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x22>
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e058      	b.n	8001c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001bc6:	edd7 7a00 	vldr	s15, [r7]
 8001bca:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001bce:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd6:	d801      	bhi.n	8001bdc <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x38>
 8001bd8:	2302      	movs	r3, #2
 8001bda:	e04d      	b.n	8001c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001bdc:	edd7 7a00 	vldr	s15, [r7]
 8001be0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8001ca0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xfc>
 8001be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bec:	d801      	bhi.n	8001bf2 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x4e>
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e042      	b.n	8001c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001bf2:	edd7 7a00 	vldr	s15, [r7]
 8001bf6:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 8001ca4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x100>
 8001bfa:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c02:	d801      	bhi.n	8001c08 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x64>
 8001c04:	2304      	movs	r3, #4
 8001c06:	e037      	b.n	8001c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001c08:	edd7 7a00 	vldr	s15, [r7]
 8001c0c:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001ca8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x104>
 8001c10:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c18:	d801      	bhi.n	8001c1e <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x7a>
 8001c1a:	2305      	movs	r3, #5
 8001c1c:	e02c      	b.n	8001c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001c1e:	edd7 7a00 	vldr	s15, [r7]
 8001c22:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8001cac <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x108>
 8001c26:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c2e:	d801      	bhi.n	8001c34 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x90>
 8001c30:	2306      	movs	r3, #6
 8001c32:	e021      	b.n	8001c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001c34:	edd7 7a00 	vldr	s15, [r7]
 8001c38:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001cb0 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x10c>
 8001c3c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c44:	d801      	bhi.n	8001c4a <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xa6>
 8001c46:	2307      	movs	r3, #7
 8001c48:	e016      	b.n	8001c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001c4a:	edd7 7a00 	vldr	s15, [r7]
 8001c4e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 8001cb4 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x110>
 8001c52:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c5a:	d801      	bhi.n	8001c60 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xbc>
 8001c5c:	2308      	movs	r3, #8
 8001c5e:	e00b      	b.n	8001c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001c60:	edd7 7a00 	vldr	s15, [r7]
 8001c64:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001cb8 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0x114>
 8001c68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c70:	d801      	bhi.n	8001c76 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd2>
 8001c72:	2309      	movs	r3, #9
 8001c74:	e000      	b.n	8001c78 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xd4>
 8001c76:	230a      	movs	r3, #10
  new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8001c78:	73fb      	strb	r3, [r7, #15]
          : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
          : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
          :                    LSM6DSL_XL_ODR_6k66Hz;

  /* Output data rate selection. */
  if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	331c      	adds	r3, #28
 8001c7e:	7bfa      	ldrb	r2, [r7, #15]
 8001c80:	4611      	mov	r1, r2
 8001c82:	4618      	mov	r0, r3
 8001c84:	f000 f960 	bl	8001f48 <lsm6dsl_xl_data_rate_set>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf0>
  {
    return LSM6DSL_ERROR;
 8001c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c92:	e000      	b.n	8001c96 <LSM6DSL_ACC_SetOutputDataRate_When_Enabled+0xf2>
  }

  return LSM6DSL_OK;
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	3710      	adds	r7, #16
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	42500000 	.word	0x42500000
 8001ca4:	42d00000 	.word	0x42d00000
 8001ca8:	43500000 	.word	0x43500000
 8001cac:	43d00000 	.word	0x43d00000
 8001cb0:	44504000 	.word	0x44504000
 8001cb4:	44cf8000 	.word	0x44cf8000
 8001cb8:	45502000 	.word	0x45502000

08001cbc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled>:
 * @param  pObj the device pObj
 * @param  Odr the functional output data rate to be set
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	ed87 0a00 	vstr	s0, [r7]
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
                : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
 8001cc8:	edd7 7a00 	vldr	s15, [r7]
 8001ccc:	eeb2 7a09 	vmov.f32	s14, #41	; 0x41480000  12.5
 8001cd0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd8:	d801      	bhi.n	8001cde <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x22>
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e058      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001cde:	edd7 7a00 	vldr	s15, [r7]
 8001ce2:	eeb3 7a0a 	vmov.f32	s14, #58	; 0x41d00000  26.0
 8001ce6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cee:	d801      	bhi.n	8001cf4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x38>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e04d      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001cf4:	edd7 7a00 	vldr	s15, [r7]
 8001cf8:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8001da4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xe8>
 8001cfc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d801      	bhi.n	8001d0a <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x4e>
 8001d06:	2303      	movs	r3, #3
 8001d08:	e042      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001d0a:	edd7 7a00 	vldr	s15, [r7]
 8001d0e:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001da8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xec>
 8001d12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1a:	d801      	bhi.n	8001d20 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x64>
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	e037      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001d20:	edd7 7a00 	vldr	s15, [r7]
 8001d24:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8001dac <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf0>
 8001d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d30:	d801      	bhi.n	8001d36 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x7a>
 8001d32:	2305      	movs	r3, #5
 8001d34:	e02c      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001d36:	edd7 7a00 	vldr	s15, [r7]
 8001d3a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8001db0 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf4>
 8001d3e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d46:	d801      	bhi.n	8001d4c <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x90>
 8001d48:	2306      	movs	r3, #6
 8001d4a:	e021      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001d4c:	edd7 7a00 	vldr	s15, [r7]
 8001d50:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8001db4 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xf8>
 8001d54:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d5c:	d801      	bhi.n	8001d62 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xa6>
 8001d5e:	2307      	movs	r3, #7
 8001d60:	e016      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001d62:	edd7 7a00 	vldr	s15, [r7]
 8001d66:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001db8 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xfc>
 8001d6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d72:	d801      	bhi.n	8001d78 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xbc>
 8001d74:	2308      	movs	r3, #8
 8001d76:	e00b      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001d78:	edd7 7a00 	vldr	s15, [r7]
 8001d7c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001dbc <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0x100>
 8001d80:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d88:	d801      	bhi.n	8001d8e <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd2>
 8001d8a:	2309      	movs	r3, #9
 8001d8c:	e000      	b.n	8001d90 <LSM6DSL_ACC_SetOutputDataRate_When_Disabled+0xd4>
 8001d8e:	230a      	movs	r3, #10
  pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
 8001d90:	687a      	ldr	r2, [r7, #4]
 8001d92:	f882 302b 	strb.w	r3, [r2, #43]	; 0x2b
                : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
                : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
                : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
                :                    LSM6DSL_XL_ODR_6k66Hz;

  return LSM6DSL_OK;
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	370c      	adds	r7, #12
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	42500000 	.word	0x42500000
 8001da8:	42d00000 	.word	0x42d00000
 8001dac:	43500000 	.word	0x43500000
 8001db0:	43d00000 	.word	0x43d00000
 8001db4:	44504000 	.word	0x44504000
 8001db8:	44cf8000 	.word	0x44cf8000
 8001dbc:	45502000 	.word	0x45502000

08001dc0 <ReadRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001dc0:	b590      	push	{r4, r7, lr}
 8001dc2:	b087      	sub	sp, #28
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	607a      	str	r2, [r7, #4]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	460b      	mov	r3, r1
 8001dce:	72fb      	strb	r3, [r7, #11]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001dd4:	68fb      	ldr	r3, [r7, #12]
 8001dd6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	695c      	ldr	r4, [r3, #20]
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	7b1b      	ldrb	r3, [r3, #12]
 8001de0:	b298      	uxth	r0, r3
 8001de2:	7afb      	ldrb	r3, [r7, #11]
 8001de4:	b299      	uxth	r1, r3
 8001de6:	893b      	ldrh	r3, [r7, #8]
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	47a0      	blx	r4
 8001dec:	4603      	mov	r3, r0
}
 8001dee:	4618      	mov	r0, r3
 8001df0:	371c      	adds	r7, #28
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bd90      	pop	{r4, r7, pc}

08001df6 <WriteRegWrap>:
 * @param  pData the stored data pointer
 * @param  Length the length
 * @retval 0 in case of success, an error code otherwise
 */
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
 8001df6:	b590      	push	{r4, r7, lr}
 8001df8:	b087      	sub	sp, #28
 8001dfa:	af00      	add	r7, sp, #0
 8001dfc:	60f8      	str	r0, [r7, #12]
 8001dfe:	607a      	str	r2, [r7, #4]
 8001e00:	461a      	mov	r2, r3
 8001e02:	460b      	mov	r3, r1
 8001e04:	72fb      	strb	r3, [r7, #11]
 8001e06:	4613      	mov	r3, r2
 8001e08:	813b      	strh	r3, [r7, #8]
  LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	691c      	ldr	r4, [r3, #16]
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	7b1b      	ldrb	r3, [r3, #12]
 8001e16:	b298      	uxth	r0, r3
 8001e18:	7afb      	ldrb	r3, [r7, #11]
 8001e1a:	b299      	uxth	r1, r3
 8001e1c:	893b      	ldrh	r3, [r7, #8]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	47a0      	blx	r4
 8001e22:	4603      	mov	r3, r0
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	371c      	adds	r7, #28
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd90      	pop	{r4, r7, pc}

08001e2c <lsm6dsl_read_reg>:
  *
  */
int32_t lsm6dsl_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8001e2c:	b590      	push	{r4, r7, lr}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	461a      	mov	r2, r3
 8001e38:	460b      	mov	r3, r1
 8001e3a:	72fb      	strb	r3, [r7, #11]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	685c      	ldr	r4, [r3, #4]
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	6898      	ldr	r0, [r3, #8]
 8001e48:	893b      	ldrh	r3, [r7, #8]
 8001e4a:	7af9      	ldrb	r1, [r7, #11]
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	47a0      	blx	r4
 8001e50:	6178      	str	r0, [r7, #20]
  return ret;
 8001e52:	697b      	ldr	r3, [r7, #20]
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	371c      	adds	r7, #28
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd90      	pop	{r4, r7, pc}

08001e5c <lsm6dsl_write_reg>:
  *
  */
int32_t lsm6dsl_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 8001e5c:	b590      	push	{r4, r7, lr}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	607a      	str	r2, [r7, #4]
 8001e66:	461a      	mov	r2, r3
 8001e68:	460b      	mov	r3, r1
 8001e6a:	72fb      	strb	r3, [r7, #11]
 8001e6c:	4613      	mov	r3, r2
 8001e6e:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	681c      	ldr	r4, [r3, #0]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	6898      	ldr	r0, [r3, #8]
 8001e78:	893b      	ldrh	r3, [r7, #8]
 8001e7a:	7af9      	ldrb	r1, [r7, #11]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	47a0      	blx	r4
 8001e80:	6178      	str	r0, [r7, #20]
  return ret;
 8001e82:	697b      	ldr	r3, [r7, #20]
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	371c      	adds	r7, #28
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd90      	pop	{r4, r7, pc}

08001e8c <lsm6dsl_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t val)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	460b      	mov	r3, r1
 8001e96:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8001e98:	f107 0208 	add.w	r2, r7, #8
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	2110      	movs	r1, #16
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f7ff ffc3 	bl	8001e2c <lsm6dsl_read_reg>
 8001ea6:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d10f      	bne.n	8001ece <lsm6dsl_xl_full_scale_set+0x42>
    ctrl1_xl.fs_xl = (uint8_t) val;
 8001eae:	78fb      	ldrb	r3, [r7, #3]
 8001eb0:	f003 0303 	and.w	r3, r3, #3
 8001eb4:	b2da      	uxtb	r2, r3
 8001eb6:	7a3b      	ldrb	r3, [r7, #8]
 8001eb8:	f362 0383 	bfi	r3, r2, #2, #2
 8001ebc:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8001ebe:	f107 0208 	add.w	r2, r7, #8
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ffc8 	bl	8001e5c <lsm6dsl_write_reg>
 8001ecc:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8001ece:	68fb      	ldr	r3, [r7, #12]
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}

08001ed8 <lsm6dsl_xl_full_scale_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_xl_t *val)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	6039      	str	r1, [r7, #0]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8001ee2:	f107 0208 	add.w	r2, r7, #8
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	2110      	movs	r1, #16
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff ff9e 	bl	8001e2c <lsm6dsl_read_reg>
 8001ef0:	60f8      	str	r0, [r7, #12]
                         1);

  switch (ctrl1_xl.fs_xl) {
 8001ef2:	7a3b      	ldrb	r3, [r7, #8]
 8001ef4:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b03      	cmp	r3, #3
 8001efc:	d81a      	bhi.n	8001f34 <lsm6dsl_xl_full_scale_get+0x5c>
 8001efe:	a201      	add	r2, pc, #4	; (adr r2, 8001f04 <lsm6dsl_xl_full_scale_get+0x2c>)
 8001f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f04:	08001f15 	.word	0x08001f15
 8001f08:	08001f1d 	.word	0x08001f1d
 8001f0c:	08001f25 	.word	0x08001f25
 8001f10:	08001f2d 	.word	0x08001f2d
    case LSM6DSL_2g:
      *val = LSM6DSL_2g;
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
      break;
 8001f1a:	e00f      	b.n	8001f3c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_16g:
      *val = LSM6DSL_16g;
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	2201      	movs	r2, #1
 8001f20:	701a      	strb	r2, [r3, #0]
      break;
 8001f22:	e00b      	b.n	8001f3c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_4g:
      *val = LSM6DSL_4g;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	2202      	movs	r2, #2
 8001f28:	701a      	strb	r2, [r3, #0]
      break;
 8001f2a:	e007      	b.n	8001f3c <lsm6dsl_xl_full_scale_get+0x64>

    case LSM6DSL_8g:
      *val = LSM6DSL_8g;
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	2203      	movs	r2, #3
 8001f30:	701a      	strb	r2, [r3, #0]
      break;
 8001f32:	e003      	b.n	8001f3c <lsm6dsl_xl_full_scale_get+0x64>

    default:
      *val = LSM6DSL_XL_FS_ND;
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	2204      	movs	r2, #4
 8001f38:	701a      	strb	r2, [r3, #0]
      break;
 8001f3a:	bf00      	nop
  }

  return ret;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
}
 8001f3e:	4618      	mov	r0, r3
 8001f40:	3710      	adds	r7, #16
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop

08001f48 <lsm6dsl_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_xl_t val)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b084      	sub	sp, #16
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8001f54:	f107 0208 	add.w	r2, r7, #8
 8001f58:	2301      	movs	r3, #1
 8001f5a:	2110      	movs	r1, #16
 8001f5c:	6878      	ldr	r0, [r7, #4]
 8001f5e:	f7ff ff65 	bl	8001e2c <lsm6dsl_read_reg>
 8001f62:	60f8      	str	r0, [r7, #12]
                         1);

  if (ret == 0) {
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10f      	bne.n	8001f8a <lsm6dsl_xl_data_rate_set+0x42>
    ctrl1_xl.odr_xl = (uint8_t) val;
 8001f6a:	78fb      	ldrb	r3, [r7, #3]
 8001f6c:	f003 030f 	and.w	r3, r3, #15
 8001f70:	b2da      	uxtb	r2, r3
 8001f72:	7a3b      	ldrb	r3, [r7, #8]
 8001f74:	f362 1307 	bfi	r3, r2, #4, #4
 8001f78:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t *)&ctrl1_xl,
 8001f7a:	f107 0208 	add.w	r2, r7, #8
 8001f7e:	2301      	movs	r3, #1
 8001f80:	2110      	movs	r1, #16
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f7ff ff6a 	bl	8001e5c <lsm6dsl_write_reg>
 8001f88:	60f8      	str	r0, [r7, #12]
                            1);
  }

  return ret;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3710      	adds	r7, #16
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}

08001f94 <lsm6dsl_gy_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_full_scale_set(stmdev_ctx_t *ctx,
                                  lsm6dsl_fs_g_t val)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	460b      	mov	r3, r1
 8001f9e:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001fa0:	f107 0208 	add.w	r2, r7, #8
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	2111      	movs	r1, #17
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff3f 	bl	8001e2c <lsm6dsl_read_reg>
 8001fae:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d10f      	bne.n	8001fd6 <lsm6dsl_gy_full_scale_set+0x42>
    ctrl2_g.fs_g = (uint8_t) val;
 8001fb6:	78fb      	ldrb	r3, [r7, #3]
 8001fb8:	f003 0307 	and.w	r3, r3, #7
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	7a3b      	ldrb	r3, [r7, #8]
 8001fc0:	f362 0343 	bfi	r3, r2, #1, #3
 8001fc4:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001fc6:	f107 0208 	add.w	r2, r7, #8
 8001fca:	2301      	movs	r3, #1
 8001fcc:	2111      	movs	r1, #17
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f7ff ff44 	bl	8001e5c <lsm6dsl_write_reg>
 8001fd4:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3710      	adds	r7, #16
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <lsm6dsl_gy_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_gy_data_rate_set(stmdev_ctx_t *ctx,
                                 lsm6dsl_odr_g_t val)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl2_g_t ctrl2_g;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8001fec:	f107 0208 	add.w	r2, r7, #8
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	2111      	movs	r1, #17
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff ff19 	bl	8001e2c <lsm6dsl_read_reg>
 8001ffa:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d10f      	bne.n	8002022 <lsm6dsl_gy_data_rate_set+0x42>
    ctrl2_g.odr_g = (uint8_t) val;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 030f 	and.w	r3, r3, #15
 8002008:	b2da      	uxtb	r2, r3
 800200a:	7a3b      	ldrb	r3, [r7, #8]
 800200c:	f362 1307 	bfi	r3, r2, #4, #4
 8002010:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t *)&ctrl2_g, 1);
 8002012:	f107 0208 	add.w	r2, r7, #8
 8002016:	2301      	movs	r3, #1
 8002018:	2111      	movs	r1, #17
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f7ff ff1e 	bl	8001e5c <lsm6dsl_write_reg>
 8002020:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002022:	68fb      	ldr	r3, [r7, #12]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3710      	adds	r7, #16
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <lsm6dsl_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	460b      	mov	r3, r1
 8002036:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002038:	f107 0208 	add.w	r2, r7, #8
 800203c:	2301      	movs	r3, #1
 800203e:	2112      	movs	r1, #18
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fef3 	bl	8001e2c <lsm6dsl_read_reg>
 8002046:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d10f      	bne.n	800206e <lsm6dsl_block_data_update_set+0x42>
    ctrl3_c.bdu = val;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	f003 0301 	and.w	r3, r3, #1
 8002054:	b2da      	uxtb	r2, r3
 8002056:	7a3b      	ldrb	r3, [r7, #8]
 8002058:	f362 1386 	bfi	r3, r2, #6, #1
 800205c:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800205e:	f107 0208 	add.w	r2, r7, #8
 8002062:	2301      	movs	r3, #1
 8002064:	2112      	movs	r1, #18
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f7ff fef8 	bl	8001e5c <lsm6dsl_write_reg>
 800206c:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 800206e:	68fb      	ldr	r3, [r7, #12]
}
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <lsm6dsl_acceleration_raw_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
 8002082:	f107 020c 	add.w	r2, r7, #12
 8002086:	2306      	movs	r3, #6
 8002088:	2128      	movs	r1, #40	; 0x28
 800208a:	6878      	ldr	r0, [r7, #4]
 800208c:	f7ff fece 	bl	8001e2c <lsm6dsl_read_reg>
 8002090:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8002092:	7b7b      	ldrb	r3, [r7, #13]
 8002094:	b21a      	sxth	r2, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	021b      	lsls	r3, r3, #8
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	7b3b      	ldrb	r3, [r7, #12]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	4413      	add	r3, r2
 80020ac:	b29b      	uxth	r3, r3
 80020ae:	b21a      	sxth	r2, r3
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	3302      	adds	r3, #2
 80020ba:	b212      	sxth	r2, r2
 80020bc:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3302      	adds	r3, #2
 80020c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	021b      	lsls	r3, r3, #8
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	7bbb      	ldrb	r3, [r7, #14]
 80020ce:	b29b      	uxth	r3, r3
 80020d0:	4413      	add	r3, r2
 80020d2:	b29a      	uxth	r2, r3
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	3302      	adds	r3, #2
 80020d8:	b212      	sxth	r2, r2
 80020da:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 80020dc:	7c7a      	ldrb	r2, [r7, #17]
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	3304      	adds	r3, #4
 80020e2:	b212      	sxth	r2, r2
 80020e4:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	3304      	adds	r3, #4
 80020ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	021b      	lsls	r3, r3, #8
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	7c3b      	ldrb	r3, [r7, #16]
 80020f6:	b29b      	uxth	r3, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	b29a      	uxth	r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	3304      	adds	r3, #4
 8002100:	b212      	sxth	r2, r2
 8002102:	801a      	strh	r2, [r3, #0]
  return ret;
 8002104:	697b      	ldr	r3, [r7, #20]
}
 8002106:	4618      	mov	r0, r3
 8002108:	3718      	adds	r7, #24
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <lsm6dsl_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	6078      	str	r0, [r7, #4]
 8002116:	6039      	str	r1, [r7, #0]
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
 8002118:	2301      	movs	r3, #1
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	210f      	movs	r1, #15
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fe84 	bl	8001e2c <lsm6dsl_read_reg>
 8002124:	60f8      	str	r0, [r7, #12]
  return ret;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3710      	adds	r7, #16
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}

08002130 <lsm6dsl_auto_increment_set>:
  * @param  val    Change the values of if_inc in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	460b      	mov	r3, r1
 800213a:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 800213c:	f107 0208 	add.w	r2, r7, #8
 8002140:	2301      	movs	r3, #1
 8002142:	2112      	movs	r1, #18
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fe71 	bl	8001e2c <lsm6dsl_read_reg>
 800214a:	60f8      	str	r0, [r7, #12]

  if (ret == 0) {
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10f      	bne.n	8002172 <lsm6dsl_auto_increment_set+0x42>
    ctrl3_c.if_inc = val;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	b2da      	uxtb	r2, r3
 800215a:	7a3b      	ldrb	r3, [r7, #8]
 800215c:	f362 0382 	bfi	r3, r2, #2, #1
 8002160:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8002162:	f107 0208 	add.w	r2, r7, #8
 8002166:	2301      	movs	r3, #1
 8002168:	2112      	movs	r1, #18
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff fe76 	bl	8001e5c <lsm6dsl_write_reg>
 8002170:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8002172:	68fb      	ldr	r3, [r7, #12]
}
 8002174:	4618      	mov	r0, r3
 8002176:	3710      	adds	r7, #16
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}

0800217c <lsm6dsl_pin_int1_route_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t val)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b08a      	sub	sp, #40	; 0x28
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
 8002184:	6039      	str	r1, [r7, #0]
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_md2_cfg_t md2_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  lsm6dsl_tap_cfg_t tap_cfg;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 8002186:	f107 021c 	add.w	r2, r7, #28
 800218a:	2301      	movs	r3, #1
 800218c:	210d      	movs	r1, #13
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7ff fe4c 	bl	8001e2c <lsm6dsl_read_reg>
 8002194:	6278      	str	r0, [r7, #36]	; 0x24
                         1);

  if (ret == 0) {
 8002196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002198:	2b00      	cmp	r3, #0
 800219a:	d147      	bne.n	800222c <lsm6dsl_pin_int1_route_set+0xb0>
    int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
 800219c:	783b      	ldrb	r3, [r7, #0]
 800219e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	7f3b      	ldrb	r3, [r7, #28]
 80021a6:	f362 0300 	bfi	r3, r2, #0, #1
 80021aa:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
 80021ac:	783b      	ldrb	r3, [r7, #0]
 80021ae:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	7f3b      	ldrb	r3, [r7, #28]
 80021b6:	f362 0341 	bfi	r3, r2, #1, #1
 80021ba:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_boot           = val.int1_boot;
 80021bc:	783b      	ldrb	r3, [r7, #0]
 80021be:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	7f3b      	ldrb	r3, [r7, #28]
 80021c6:	f362 0382 	bfi	r3, r2, #2, #1
 80021ca:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fth            = val.int1_fth;
 80021cc:	783b      	ldrb	r3, [r7, #0]
 80021ce:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	7f3b      	ldrb	r3, [r7, #28]
 80021d6:	f362 03c3 	bfi	r3, r2, #3, #1
 80021da:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
 80021dc:	783b      	ldrb	r3, [r7, #0]
 80021de:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	7f3b      	ldrb	r3, [r7, #28]
 80021e6:	f362 1304 	bfi	r3, r2, #4, #1
 80021ea:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_full_flag      = val.int1_full_flag;
 80021ec:	783b      	ldrb	r3, [r7, #0]
 80021ee:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80021f2:	b2da      	uxtb	r2, r3
 80021f4:	7f3b      	ldrb	r3, [r7, #28]
 80021f6:	f362 1345 	bfi	r3, r2, #5, #1
 80021fa:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
 80021fc:	783b      	ldrb	r3, [r7, #0]
 80021fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8002202:	b2da      	uxtb	r2, r3
 8002204:	7f3b      	ldrb	r3, [r7, #28]
 8002206:	f362 1386 	bfi	r3, r2, #6, #1
 800220a:	773b      	strb	r3, [r7, #28]
    int1_ctrl.int1_step_detector  = val.int1_step_detector;
 800220c:	783b      	ldrb	r3, [r7, #0]
 800220e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	7f3b      	ldrb	r3, [r7, #28]
 8002216:	f362 13c7 	bfi	r3, r2, #7, #1
 800221a:	773b      	strb	r3, [r7, #28]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 800221c:	f107 021c 	add.w	r2, r7, #28
 8002220:	2301      	movs	r3, #1
 8002222:	210d      	movs	r1, #13
 8002224:	6878      	ldr	r0, [r7, #4]
 8002226:	f7ff fe19 	bl	8001e5c <lsm6dsl_write_reg>
 800222a:	6278      	str	r0, [r7, #36]	; 0x24
                            1);
  }

  if (ret == 0) {
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	2b00      	cmp	r3, #0
 8002230:	d107      	bne.n	8002242 <lsm6dsl_pin_int1_route_set+0xc6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 8002232:	f107 0218 	add.w	r2, r7, #24
 8002236:	2301      	movs	r3, #1
 8002238:	215e      	movs	r1, #94	; 0x5e
 800223a:	6878      	ldr	r0, [r7, #4]
 800223c:	f7ff fdf6 	bl	8001e2c <lsm6dsl_read_reg>
 8002240:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	2b00      	cmp	r3, #0
 8002246:	d107      	bne.n	8002258 <lsm6dsl_pin_int1_route_set+0xdc>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1);
 8002248:	f107 0214 	add.w	r2, r7, #20
 800224c:	2301      	movs	r3, #1
 800224e:	215f      	movs	r1, #95	; 0x5f
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f7ff fdeb 	bl	8001e2c <lsm6dsl_read_reg>
 8002256:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8002258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800225a:	2b00      	cmp	r3, #0
 800225c:	d147      	bne.n	80022ee <lsm6dsl_pin_int1_route_set+0x172>
    md1_cfg.int1_timer           = val.int1_timer;
 800225e:	787b      	ldrb	r3, [r7, #1]
 8002260:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002264:	b2da      	uxtb	r2, r3
 8002266:	7e3b      	ldrb	r3, [r7, #24]
 8002268:	f362 0300 	bfi	r3, r2, #0, #1
 800226c:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_tilt            = val.int1_tilt;
 800226e:	787b      	ldrb	r3, [r7, #1]
 8002270:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002274:	b2da      	uxtb	r2, r3
 8002276:	7e3b      	ldrb	r3, [r7, #24]
 8002278:	f362 0341 	bfi	r3, r2, #1, #1
 800227c:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_6d              = val.int1_6d;
 800227e:	787b      	ldrb	r3, [r7, #1]
 8002280:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002284:	b2da      	uxtb	r2, r3
 8002286:	7e3b      	ldrb	r3, [r7, #24]
 8002288:	f362 0382 	bfi	r3, r2, #2, #1
 800228c:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_double_tap      = val.int1_double_tap;
 800228e:	787b      	ldrb	r3, [r7, #1]
 8002290:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002294:	b2da      	uxtb	r2, r3
 8002296:	7e3b      	ldrb	r3, [r7, #24]
 8002298:	f362 03c3 	bfi	r3, r2, #3, #1
 800229c:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_ff              = val.int1_ff;
 800229e:	787b      	ldrb	r3, [r7, #1]
 80022a0:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80022a4:	b2da      	uxtb	r2, r3
 80022a6:	7e3b      	ldrb	r3, [r7, #24]
 80022a8:	f362 1304 	bfi	r3, r2, #4, #1
 80022ac:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_wu              = val.int1_wu;
 80022ae:	787b      	ldrb	r3, [r7, #1]
 80022b0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	7e3b      	ldrb	r3, [r7, #24]
 80022b8:	f362 1345 	bfi	r3, r2, #5, #1
 80022bc:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_single_tap      = val.int1_single_tap;
 80022be:	787b      	ldrb	r3, [r7, #1]
 80022c0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80022c4:	b2da      	uxtb	r2, r3
 80022c6:	7e3b      	ldrb	r3, [r7, #24]
 80022c8:	f362 1386 	bfi	r3, r2, #6, #1
 80022cc:	763b      	strb	r3, [r7, #24]
    md1_cfg.int1_inact_state     = val.int1_inact_state;
 80022ce:	787b      	ldrb	r3, [r7, #1]
 80022d0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	7e3b      	ldrb	r3, [r7, #24]
 80022d8:	f362 13c7 	bfi	r3, r2, #7, #1
 80022dc:	763b      	strb	r3, [r7, #24]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80022de:	f107 0218 	add.w	r2, r7, #24
 80022e2:	2301      	movs	r3, #1
 80022e4:	215e      	movs	r1, #94	; 0x5e
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fdb8 	bl	8001e5c <lsm6dsl_write_reg>
 80022ec:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d107      	bne.n	8002304 <lsm6dsl_pin_int1_route_set+0x188>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 80022f4:	f107 0210 	add.w	r2, r7, #16
 80022f8:	2301      	movs	r3, #1
 80022fa:	2113      	movs	r1, #19
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	f7ff fd95 	bl	8001e2c <lsm6dsl_read_reg>
 8002302:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 8002304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <lsm6dsl_pin_int1_route_set+0x1ae>
    ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
 800230a:	78bb      	ldrb	r3, [r7, #2]
 800230c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002310:	b2da      	uxtb	r2, r3
 8002312:	7c3b      	ldrb	r3, [r7, #16]
 8002314:	f362 1304 	bfi	r3, r2, #4, #1
 8002318:	743b      	strb	r3, [r7, #16]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800231a:	f107 0210 	add.w	r2, r7, #16
 800231e:	2301      	movs	r3, #1
 8002320:	2113      	movs	r1, #19
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff fd9a 	bl	8001e5c <lsm6dsl_write_reg>
 8002328:	6278      	str	r0, [r7, #36]	; 0x24
  }

  if (ret == 0) {
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	2b00      	cmp	r3, #0
 800232e:	d107      	bne.n	8002340 <lsm6dsl_pin_int1_route_set+0x1c4>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 8002330:	f107 0220 	add.w	r2, r7, #32
 8002334:	2301      	movs	r3, #1
 8002336:	211a      	movs	r1, #26
 8002338:	6878      	ldr	r0, [r7, #4]
 800233a:	f7ff fd77 	bl	8001e2c <lsm6dsl_read_reg>
 800233e:	6278      	str	r0, [r7, #36]	; 0x24
                           (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 8002340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002342:	2b00      	cmp	r3, #0
 8002344:	d111      	bne.n	800236a <lsm6dsl_pin_int1_route_set+0x1ee>
    master_config.drdy_on_int1   = val.den_drdy_int1;
 8002346:	78bb      	ldrb	r3, [r7, #2]
 8002348:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800234c:	b2da      	uxtb	r2, r3
 800234e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002352:	f362 13c7 	bfi	r3, r2, #7, #1
 8002356:	f887 3020 	strb.w	r3, [r7, #32]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
 800235a:	f107 0220 	add.w	r2, r7, #32
 800235e:	2301      	movs	r3, #1
 8002360:	211a      	movs	r1, #26
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f7ff fd7a 	bl	8001e5c <lsm6dsl_write_reg>
 8002368:	6278      	str	r0, [r7, #36]	; 0x24
                            (uint8_t *)&master_config, 1);
  }

  if (ret == 0) {
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	2b00      	cmp	r3, #0
 800236e:	d158      	bne.n	8002422 <lsm6dsl_pin_int1_route_set+0x2a6>
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002370:	f107 020c 	add.w	r2, r7, #12
 8002374:	2301      	movs	r3, #1
 8002376:	2158      	movs	r1, #88	; 0x58
 8002378:	6878      	ldr	r0, [r7, #4]
 800237a:	f7ff fd57 	bl	8001e2c <lsm6dsl_read_reg>
 800237e:	6278      	str	r0, [r7, #36]	; 0x24

    if ((val.int1_6d != 0x00U) ||
 8002380:	787b      	ldrb	r3, [r7, #1]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b00      	cmp	r3, #0
 800238a:	d141      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_ff != 0x00U) ||
 800238c:	787b      	ldrb	r3, [r7, #1]
 800238e:	f003 0310 	and.w	r3, r3, #16
 8002392:	b2db      	uxtb	r3, r3
    if ((val.int1_6d != 0x00U) ||
 8002394:	2b00      	cmp	r3, #0
 8002396:	d13b      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_wu != 0x00U) ||
 8002398:	787b      	ldrb	r3, [r7, #1]
 800239a:	f003 0320 	and.w	r3, r3, #32
 800239e:	b2db      	uxtb	r3, r3
        (val.int1_ff != 0x00U) ||
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d135      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_single_tap != 0x00U) ||
 80023a4:	787b      	ldrb	r3, [r7, #1]
 80023a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023aa:	b2db      	uxtb	r3, r3
        (val.int1_wu != 0x00U) ||
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d12f      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_double_tap != 0x00U) ||
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	b2db      	uxtb	r3, r3
        (val.int1_single_tap != 0x00U) ||
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d129      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (val.int1_inact_state != 0x00U) ||
 80023bc:	787b      	ldrb	r3, [r7, #1]
 80023be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80023c2:	b2db      	uxtb	r3, r3
        (val.int1_double_tap != 0x00U) ||
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d123      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_6d != 0x00U) ||
 80023c8:	7d3b      	ldrb	r3, [r7, #20]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	b2db      	uxtb	r3, r3
        (val.int1_inact_state != 0x00U) ||
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d11d      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_ff != 0x00U) ||
 80023d4:	7d3b      	ldrb	r3, [r7, #20]
 80023d6:	f003 0310 	and.w	r3, r3, #16
 80023da:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_6d != 0x00U) ||
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d117      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_wu != 0x00U) ||
 80023e0:	7d3b      	ldrb	r3, [r7, #20]
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_ff != 0x00U) ||
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d111      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_single_tap != 0x00U) ||
 80023ec:	7d3b      	ldrb	r3, [r7, #20]
 80023ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f2:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_wu != 0x00U) ||
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_double_tap != 0x00U) ||
 80023f8:	7d3b      	ldrb	r3, [r7, #20]
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_single_tap != 0x00U) ||
 8002400:	2b00      	cmp	r3, #0
 8002402:	d105      	bne.n	8002410 <lsm6dsl_pin_int1_route_set+0x294>
        (md2_cfg.int2_inact_state != 0x00U) ) {
 8002404:	7d3b      	ldrb	r3, [r7, #20]
 8002406:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800240a:	b2db      	uxtb	r3, r3
        (md2_cfg.int2_double_tap != 0x00U) ||
 800240c:	2b00      	cmp	r3, #0
 800240e:	d004      	beq.n	800241a <lsm6dsl_pin_int1_route_set+0x29e>
      tap_cfg.interrupts_enable = PROPERTY_ENABLE;
 8002410:	7b3b      	ldrb	r3, [r7, #12]
 8002412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002416:	733b      	strb	r3, [r7, #12]
 8002418:	e003      	b.n	8002422 <lsm6dsl_pin_int1_route_set+0x2a6>
    }

    else {
      tap_cfg.interrupts_enable = PROPERTY_DISABLE;
 800241a:	7b3b      	ldrb	r3, [r7, #12]
 800241c:	f36f 13c7 	bfc	r3, #7, #1
 8002420:	733b      	strb	r3, [r7, #12]
    }
  }

  if (ret == 0) {
 8002422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002424:	2b00      	cmp	r3, #0
 8002426:	d107      	bne.n	8002438 <lsm6dsl_pin_int1_route_set+0x2bc>
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t *)&tap_cfg, 1);
 8002428:	f107 020c 	add.w	r2, r7, #12
 800242c:	2301      	movs	r3, #1
 800242e:	2158      	movs	r1, #88	; 0x58
 8002430:	6878      	ldr	r0, [r7, #4]
 8002432:	f7ff fd13 	bl	8001e5c <lsm6dsl_write_reg>
 8002436:	6278      	str	r0, [r7, #36]	; 0x24
  }

  return ret;
 8002438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800243a:	4618      	mov	r0, r3
 800243c:	3728      	adds	r7, #40	; 0x28
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <lsm6dsl_pin_int1_route_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   lsm6dsl_int1_route_t *val)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b088      	sub	sp, #32
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  lsm6dsl_master_config_t master_config;
  lsm6dsl_int1_ctrl_t int1_ctrl;
  lsm6dsl_md1_cfg_t md1_cfg;
  lsm6dsl_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl,
 800244c:	f107 0214 	add.w	r2, r7, #20
 8002450:	2301      	movs	r3, #1
 8002452:	210d      	movs	r1, #13
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f7ff fce9 	bl	8001e2c <lsm6dsl_read_reg>
 800245a:	61f8      	str	r0, [r7, #28]
                         1);

  if (ret == 0) {
 800245c:	69fb      	ldr	r3, [r7, #28]
 800245e:	2b00      	cmp	r3, #0
 8002460:	f040 80c0 	bne.w	80025e4 <lsm6dsl_pin_int1_route_get+0x1a2>
    val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
 8002464:	7d3b      	ldrb	r3, [r7, #20]
 8002466:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800246a:	b2d9      	uxtb	r1, r3
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	7813      	ldrb	r3, [r2, #0]
 8002470:	f361 0300 	bfi	r3, r1, #0, #1
 8002474:	7013      	strb	r3, [r2, #0]
    val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
 8002476:	7d3b      	ldrb	r3, [r7, #20]
 8002478:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800247c:	b2d9      	uxtb	r1, r3
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	7813      	ldrb	r3, [r2, #0]
 8002482:	f361 0341 	bfi	r3, r1, #1, #1
 8002486:	7013      	strb	r3, [r2, #0]
    val->int1_boot          = int1_ctrl.int1_boot;
 8002488:	7d3b      	ldrb	r3, [r7, #20]
 800248a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800248e:	b2d9      	uxtb	r1, r3
 8002490:	683a      	ldr	r2, [r7, #0]
 8002492:	7813      	ldrb	r3, [r2, #0]
 8002494:	f361 0382 	bfi	r3, r1, #2, #1
 8002498:	7013      	strb	r3, [r2, #0]
    val->int1_fth           = int1_ctrl.int1_fth;
 800249a:	7d3b      	ldrb	r3, [r7, #20]
 800249c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80024a0:	b2d9      	uxtb	r1, r3
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	7813      	ldrb	r3, [r2, #0]
 80024a6:	f361 03c3 	bfi	r3, r1, #3, #1
 80024aa:	7013      	strb	r3, [r2, #0]
    val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
 80024ac:	7d3b      	ldrb	r3, [r7, #20]
 80024ae:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80024b2:	b2d9      	uxtb	r1, r3
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	7813      	ldrb	r3, [r2, #0]
 80024b8:	f361 1304 	bfi	r3, r1, #4, #1
 80024bc:	7013      	strb	r3, [r2, #0]
    val->int1_full_flag     = int1_ctrl.int1_full_flag;
 80024be:	7d3b      	ldrb	r3, [r7, #20]
 80024c0:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80024c4:	b2d9      	uxtb	r1, r3
 80024c6:	683a      	ldr	r2, [r7, #0]
 80024c8:	7813      	ldrb	r3, [r2, #0]
 80024ca:	f361 1345 	bfi	r3, r1, #5, #1
 80024ce:	7013      	strb	r3, [r2, #0]
    val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
 80024d0:	7d3b      	ldrb	r3, [r7, #20]
 80024d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
 80024d6:	b2d9      	uxtb	r1, r3
 80024d8:	683a      	ldr	r2, [r7, #0]
 80024da:	7813      	ldrb	r3, [r2, #0]
 80024dc:	f361 1386 	bfi	r3, r1, #6, #1
 80024e0:	7013      	strb	r3, [r2, #0]
    val->int1_step_detector = int1_ctrl.int1_step_detector ;
 80024e2:	7d3b      	ldrb	r3, [r7, #20]
 80024e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80024e8:	b2d9      	uxtb	r1, r3
 80024ea:	683a      	ldr	r2, [r7, #0]
 80024ec:	7813      	ldrb	r3, [r2, #0]
 80024ee:	f361 13c7 	bfi	r3, r1, #7, #1
 80024f2:	7013      	strb	r3, [r2, #0]
    ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1);
 80024f4:	f107 0210 	add.w	r2, r7, #16
 80024f8:	2301      	movs	r3, #1
 80024fa:	215e      	movs	r1, #94	; 0x5e
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f7ff fc95 	bl	8001e2c <lsm6dsl_read_reg>
 8002502:	61f8      	str	r0, [r7, #28]

    if (ret == 0) {
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d16c      	bne.n	80025e4 <lsm6dsl_pin_int1_route_get+0x1a2>
      val->int1_timer       = md1_cfg.int1_timer;
 800250a:	7c3b      	ldrb	r3, [r7, #16]
 800250c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002510:	b2d9      	uxtb	r1, r3
 8002512:	683a      	ldr	r2, [r7, #0]
 8002514:	7853      	ldrb	r3, [r2, #1]
 8002516:	f361 0300 	bfi	r3, r1, #0, #1
 800251a:	7053      	strb	r3, [r2, #1]
      val->int1_tilt        = md1_cfg.int1_tilt;
 800251c:	7c3b      	ldrb	r3, [r7, #16]
 800251e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8002522:	b2d9      	uxtb	r1, r3
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	7853      	ldrb	r3, [r2, #1]
 8002528:	f361 0341 	bfi	r3, r1, #1, #1
 800252c:	7053      	strb	r3, [r2, #1]
      val->int1_6d          = md1_cfg.int1_6d;
 800252e:	7c3b      	ldrb	r3, [r7, #16]
 8002530:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8002534:	b2d9      	uxtb	r1, r3
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	7853      	ldrb	r3, [r2, #1]
 800253a:	f361 0382 	bfi	r3, r1, #2, #1
 800253e:	7053      	strb	r3, [r2, #1]
      val->int1_double_tap  = md1_cfg.int1_double_tap;
 8002540:	7c3b      	ldrb	r3, [r7, #16]
 8002542:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002546:	b2d9      	uxtb	r1, r3
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	7853      	ldrb	r3, [r2, #1]
 800254c:	f361 03c3 	bfi	r3, r1, #3, #1
 8002550:	7053      	strb	r3, [r2, #1]
      val->int1_ff          = md1_cfg.int1_ff;
 8002552:	7c3b      	ldrb	r3, [r7, #16]
 8002554:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8002558:	b2d9      	uxtb	r1, r3
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	7853      	ldrb	r3, [r2, #1]
 800255e:	f361 1304 	bfi	r3, r1, #4, #1
 8002562:	7053      	strb	r3, [r2, #1]
      val->int1_wu          = md1_cfg.int1_wu;
 8002564:	7c3b      	ldrb	r3, [r7, #16]
 8002566:	f3c3 1340 	ubfx	r3, r3, #5, #1
 800256a:	b2d9      	uxtb	r1, r3
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	7853      	ldrb	r3, [r2, #1]
 8002570:	f361 1345 	bfi	r3, r1, #5, #1
 8002574:	7053      	strb	r3, [r2, #1]
      val->int1_single_tap  = md1_cfg.int1_single_tap;
 8002576:	7c3b      	ldrb	r3, [r7, #16]
 8002578:	f3c3 1380 	ubfx	r3, r3, #6, #1
 800257c:	b2d9      	uxtb	r1, r3
 800257e:	683a      	ldr	r2, [r7, #0]
 8002580:	7853      	ldrb	r3, [r2, #1]
 8002582:	f361 1386 	bfi	r3, r1, #6, #1
 8002586:	7053      	strb	r3, [r2, #1]
      val->int1_inact_state = md1_cfg.int1_inact_state;
 8002588:	7c3b      	ldrb	r3, [r7, #16]
 800258a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800258e:	b2d9      	uxtb	r1, r3
 8002590:	683a      	ldr	r2, [r7, #0]
 8002592:	7853      	ldrb	r3, [r2, #1]
 8002594:	f361 13c7 	bfi	r3, r1, #7, #1
 8002598:	7053      	strb	r3, [r2, #1]
      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
 800259a:	f107 020c 	add.w	r2, r7, #12
 800259e:	2301      	movs	r3, #1
 80025a0:	2113      	movs	r1, #19
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff fc42 	bl	8001e2c <lsm6dsl_read_reg>
 80025a8:	61f8      	str	r0, [r7, #28]

      if (ret == 0) {
 80025aa:	69fb      	ldr	r3, [r7, #28]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d119      	bne.n	80025e4 <lsm6dsl_pin_int1_route_get+0x1a2>
        val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
 80025b0:	7b3b      	ldrb	r3, [r7, #12]
 80025b2:	f3c3 1300 	ubfx	r3, r3, #4, #1
 80025b6:	b2d9      	uxtb	r1, r3
 80025b8:	683a      	ldr	r2, [r7, #0]
 80025ba:	7893      	ldrb	r3, [r2, #2]
 80025bc:	f361 0300 	bfi	r3, r1, #0, #1
 80025c0:	7093      	strb	r3, [r2, #2]
        ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
 80025c2:	f107 0218 	add.w	r2, r7, #24
 80025c6:	2301      	movs	r3, #1
 80025c8:	211a      	movs	r1, #26
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff fc2e 	bl	8001e2c <lsm6dsl_read_reg>
 80025d0:	61f8      	str	r0, [r7, #28]
                               (uint8_t *)&master_config, 1);
        val->den_drdy_int1 = master_config.drdy_on_int1;
 80025d2:	7e3b      	ldrb	r3, [r7, #24]
 80025d4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80025d8:	b2d9      	uxtb	r1, r3
 80025da:	683a      	ldr	r2, [r7, #0]
 80025dc:	7893      	ldrb	r3, [r2, #2]
 80025de:	f361 0300 	bfi	r3, r1, #0, #1
 80025e2:	7093      	strb	r3, [r2, #2]
      }
    }
  }

  return ret;
 80025e4:	69fb      	ldr	r3, [r7, #28]
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3720      	adds	r7, #32
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <lsm6dsl_fifo_mode_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t lsm6dsl_fifo_mode_set(stmdev_ctx_t *ctx,
                              lsm6dsl_fifo_mode_t val)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	460b      	mov	r3, r1
 80025f8:	70fb      	strb	r3, [r7, #3]
  lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
  int32_t ret;
  ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5,
 80025fa:	f107 0208 	add.w	r2, r7, #8
 80025fe:	2301      	movs	r3, #1
 8002600:	210a      	movs	r1, #10
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff fc12 	bl	8001e2c <lsm6dsl_read_reg>
 8002608:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&fifo_ctrl5, 1);

  if (ret == 0) {
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d10f      	bne.n	8002630 <lsm6dsl_fifo_mode_set+0x42>
    fifo_ctrl5.fifo_mode = (uint8_t)val;
 8002610:	78fb      	ldrb	r3, [r7, #3]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	b2da      	uxtb	r2, r3
 8002618:	7a3b      	ldrb	r3, [r7, #8]
 800261a:	f362 0302 	bfi	r3, r2, #0, #3
 800261e:	723b      	strb	r3, [r7, #8]
    ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5,
 8002620:	f107 0208 	add.w	r2, r7, #8
 8002624:	2301      	movs	r3, #1
 8002626:	210a      	movs	r1, #10
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f7ff fc17 	bl	8001e5c <lsm6dsl_write_reg>
 800262e:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&fifo_ctrl5, 1);
  }

  return ret;
 8002630:	68fb      	ldr	r3, [r7, #12]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3710      	adds	r7, #16
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002644:	2003      	movs	r0, #3
 8002646:	f000 f961 	bl	800290c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264a:	2000      	movs	r0, #0
 800264c:	f000 f80e 	bl	800266c <HAL_InitTick>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	71fb      	strb	r3, [r7, #7]
 800265a:	e001      	b.n	8002660 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800265c:	f7fe fbbc 	bl	8000dd8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002660:	79fb      	ldrb	r3, [r7, #7]
}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002678:	4b17      	ldr	r3, [pc, #92]	; (80026d8 <HAL_InitTick+0x6c>)
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d023      	beq.n	80026c8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8002680:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_InitTick+0x70>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <HAL_InitTick+0x6c>)
 8002686:	781b      	ldrb	r3, [r3, #0]
 8002688:	4619      	mov	r1, r3
 800268a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800268e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002692:	fbb2 f3f3 	udiv	r3, r2, r3
 8002696:	4618      	mov	r0, r3
 8002698:	f000 f96d 	bl	8002976 <HAL_SYSTICK_Config>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d10f      	bne.n	80026c2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2b0f      	cmp	r3, #15
 80026a6:	d809      	bhi.n	80026bc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a8:	2200      	movs	r2, #0
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	f04f 30ff 	mov.w	r0, #4294967295
 80026b0:	f000 f937 	bl	8002922 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b4:	4a0a      	ldr	r2, [pc, #40]	; (80026e0 <HAL_InitTick+0x74>)
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6013      	str	r3, [r2, #0]
 80026ba:	e007      	b.n	80026cc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	73fb      	strb	r3, [r7, #15]
 80026c0:	e004      	b.n	80026cc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	73fb      	strb	r3, [r7, #15]
 80026c6:	e001      	b.n	80026cc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000008 	.word	0x20000008
 80026dc:	20000000 	.word	0x20000000
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x20>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x24>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_IncTick+0x24>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000008 	.word	0x20000008
 8002708:	2000072c 	.word	0x2000072c

0800270c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetTick+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	2000072c 	.word	0x2000072c

08002724 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800272c:	f7ff ffee 	bl	800270c <HAL_GetTick>
 8002730:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273c:	d005      	beq.n	800274a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800273e:	4b0a      	ldr	r3, [pc, #40]	; (8002768 <HAL_Delay+0x44>)
 8002740:	781b      	ldrb	r3, [r3, #0]
 8002742:	461a      	mov	r2, r3
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	4413      	add	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800274a:	bf00      	nop
 800274c:	f7ff ffde 	bl	800270c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	429a      	cmp	r2, r3
 800275a:	d8f7      	bhi.n	800274c <HAL_Delay+0x28>
  {
  }
}
 800275c:	bf00      	nop
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	20000008 	.word	0x20000008

0800276c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f003 0307 	and.w	r3, r3, #7
 800277a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800277c:	4b0c      	ldr	r3, [pc, #48]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002782:	68ba      	ldr	r2, [r7, #8]
 8002784:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002788:	4013      	ands	r3, r2
 800278a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002794:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002798:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800279c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800279e:	4a04      	ldr	r2, [pc, #16]	; (80027b0 <__NVIC_SetPriorityGrouping+0x44>)
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	60d3      	str	r3, [r2, #12]
}
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	e000ed00 	.word	0xe000ed00

080027b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027b4:	b480      	push	{r7}
 80027b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027b8:	4b04      	ldr	r3, [pc, #16]	; (80027cc <__NVIC_GetPriorityGrouping+0x18>)
 80027ba:	68db      	ldr	r3, [r3, #12]
 80027bc:	0a1b      	lsrs	r3, r3, #8
 80027be:	f003 0307 	and.w	r3, r3, #7
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	4603      	mov	r3, r0
 80027d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	db0b      	blt.n	80027fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027e2:	79fb      	ldrb	r3, [r7, #7]
 80027e4:	f003 021f 	and.w	r2, r3, #31
 80027e8:	4907      	ldr	r1, [pc, #28]	; (8002808 <__NVIC_EnableIRQ+0x38>)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	2001      	movs	r0, #1
 80027f2:	fa00 f202 	lsl.w	r2, r0, r2
 80027f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80027fa:	bf00      	nop
 80027fc:	370c      	adds	r7, #12
 80027fe:	46bd      	mov	sp, r7
 8002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002804:	4770      	bx	lr
 8002806:	bf00      	nop
 8002808:	e000e100 	.word	0xe000e100

0800280c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	4603      	mov	r3, r0
 8002814:	6039      	str	r1, [r7, #0]
 8002816:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002818:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800281c:	2b00      	cmp	r3, #0
 800281e:	db0a      	blt.n	8002836 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	b2da      	uxtb	r2, r3
 8002824:	490c      	ldr	r1, [pc, #48]	; (8002858 <__NVIC_SetPriority+0x4c>)
 8002826:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282a:	0112      	lsls	r2, r2, #4
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	440b      	add	r3, r1
 8002830:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002834:	e00a      	b.n	800284c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4908      	ldr	r1, [pc, #32]	; (800285c <__NVIC_SetPriority+0x50>)
 800283c:	79fb      	ldrb	r3, [r7, #7]
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	3b04      	subs	r3, #4
 8002844:	0112      	lsls	r2, r2, #4
 8002846:	b2d2      	uxtb	r2, r2
 8002848:	440b      	add	r3, r1
 800284a:	761a      	strb	r2, [r3, #24]
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	e000e100 	.word	0xe000e100
 800285c:	e000ed00 	.word	0xe000ed00

08002860 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002860:	b480      	push	{r7}
 8002862:	b089      	sub	sp, #36	; 0x24
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f003 0307 	and.w	r3, r3, #7
 8002872:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	f1c3 0307 	rsb	r3, r3, #7
 800287a:	2b04      	cmp	r3, #4
 800287c:	bf28      	it	cs
 800287e:	2304      	movcs	r3, #4
 8002880:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	3304      	adds	r3, #4
 8002886:	2b06      	cmp	r3, #6
 8002888:	d902      	bls.n	8002890 <NVIC_EncodePriority+0x30>
 800288a:	69fb      	ldr	r3, [r7, #28]
 800288c:	3b03      	subs	r3, #3
 800288e:	e000      	b.n	8002892 <NVIC_EncodePriority+0x32>
 8002890:	2300      	movs	r3, #0
 8002892:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002894:	f04f 32ff 	mov.w	r2, #4294967295
 8002898:	69bb      	ldr	r3, [r7, #24]
 800289a:	fa02 f303 	lsl.w	r3, r2, r3
 800289e:	43da      	mvns	r2, r3
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	401a      	ands	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028a8:	f04f 31ff 	mov.w	r1, #4294967295
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	fa01 f303 	lsl.w	r3, r1, r3
 80028b2:	43d9      	mvns	r1, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028b8:	4313      	orrs	r3, r2
         );
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	3724      	adds	r7, #36	; 0x24
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr
	...

080028c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	3b01      	subs	r3, #1
 80028d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028d8:	d301      	bcc.n	80028de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028da:	2301      	movs	r3, #1
 80028dc:	e00f      	b.n	80028fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028de:	4a0a      	ldr	r2, [pc, #40]	; (8002908 <SysTick_Config+0x40>)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028e6:	210f      	movs	r1, #15
 80028e8:	f04f 30ff 	mov.w	r0, #4294967295
 80028ec:	f7ff ff8e 	bl	800280c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028f0:	4b05      	ldr	r3, [pc, #20]	; (8002908 <SysTick_Config+0x40>)
 80028f2:	2200      	movs	r2, #0
 80028f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028f6:	4b04      	ldr	r3, [pc, #16]	; (8002908 <SysTick_Config+0x40>)
 80028f8:	2207      	movs	r2, #7
 80028fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	3708      	adds	r7, #8
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	e000e010 	.word	0xe000e010

0800290c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff ff29 	bl	800276c <__NVIC_SetPriorityGrouping>
}
 800291a:	bf00      	nop
 800291c:	3708      	adds	r7, #8
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}

08002922 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002922:	b580      	push	{r7, lr}
 8002924:	b086      	sub	sp, #24
 8002926:	af00      	add	r7, sp, #0
 8002928:	4603      	mov	r3, r0
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	607a      	str	r2, [r7, #4]
 800292e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002930:	2300      	movs	r3, #0
 8002932:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002934:	f7ff ff3e 	bl	80027b4 <__NVIC_GetPriorityGrouping>
 8002938:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	6978      	ldr	r0, [r7, #20]
 8002940:	f7ff ff8e 	bl	8002860 <NVIC_EncodePriority>
 8002944:	4602      	mov	r2, r0
 8002946:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800294a:	4611      	mov	r1, r2
 800294c:	4618      	mov	r0, r3
 800294e:	f7ff ff5d 	bl	800280c <__NVIC_SetPriority>
}
 8002952:	bf00      	nop
 8002954:	3718      	adds	r7, #24
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}

0800295a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295a:	b580      	push	{r7, lr}
 800295c:	b082      	sub	sp, #8
 800295e:	af00      	add	r7, sp, #0
 8002960:	4603      	mov	r3, r0
 8002962:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff31 	bl	80027d0 <__NVIC_EnableIRQ>
}
 800296e:	bf00      	nop
 8002970:	3708      	adds	r7, #8
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}

08002976 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002976:	b580      	push	{r7, lr}
 8002978:	b082      	sub	sp, #8
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7ff ffa2 	bl	80028c8 <SysTick_Config>
 8002984:	4603      	mov	r3, r0
}
 8002986:	4618      	mov	r0, r3
 8002988:	3708      	adds	r7, #8
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}
	...

08002990 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e0ac      	b.n	8002afc <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f000 f8b2 	bl	8002b10 <DFSDM_GetChannelFromInstance>
 80029ac:	4603      	mov	r3, r0
 80029ae:	4a55      	ldr	r2, [pc, #340]	; (8002b04 <HAL_DFSDM_ChannelInit+0x174>)
 80029b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e09f      	b.n	8002afc <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 80029bc:	6878      	ldr	r0, [r7, #4]
 80029be:	f7fe fa2f 	bl	8000e20 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 80029c2:	4b51      	ldr	r3, [pc, #324]	; (8002b08 <HAL_DFSDM_ChannelInit+0x178>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	3301      	adds	r3, #1
 80029c8:	4a4f      	ldr	r2, [pc, #316]	; (8002b08 <HAL_DFSDM_ChannelInit+0x178>)
 80029ca:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 80029cc:	4b4e      	ldr	r3, [pc, #312]	; (8002b08 <HAL_DFSDM_ChannelInit+0x178>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d125      	bne.n	8002a20 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 80029d4:	4b4d      	ldr	r3, [pc, #308]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a4c      	ldr	r2, [pc, #304]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 80029da:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80029de:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 80029e0:	4b4a      	ldr	r3, [pc, #296]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	4948      	ldr	r1, [pc, #288]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 80029ee:	4b47      	ldr	r3, [pc, #284]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4a46      	ldr	r2, [pc, #280]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 80029f4:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 80029f8:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	791b      	ldrb	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d108      	bne.n	8002a14 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8002a02:	4b42      	ldr	r3, [pc, #264]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	3b01      	subs	r3, #1
 8002a0c:	041b      	lsls	r3, r3, #16
 8002a0e:	493f      	ldr	r1, [pc, #252]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a10:	4313      	orrs	r3, r2
 8002a12:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 8002a14:	4b3d      	ldr	r3, [pc, #244]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a3c      	ldr	r2, [pc, #240]	; (8002b0c <HAL_DFSDM_ChannelInit+0x17c>)
 8002a1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a1e:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 8002a2e:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6819      	ldr	r1, [r3, #0]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a3e:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 8002a44:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	430a      	orrs	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f022 020f 	bic.w	r2, r2, #15
 8002a5c:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8002a84:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	6899      	ldr	r1, [r3, #8]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a94:	3b01      	subs	r3, #1
 8002a96:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 8002a98:	431a      	orrs	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	685a      	ldr	r2, [r3, #4]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f002 0207 	and.w	r2, r2, #7
 8002ab0:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	6859      	ldr	r1, [r3, #4]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002abc:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	430a      	orrs	r2, r1
 8002acc:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002adc:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	4618      	mov	r0, r3
 8002aec:	f000 f810 	bl	8002b10 <DFSDM_GetChannelFromInstance>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4904      	ldr	r1, [pc, #16]	; (8002b04 <HAL_DFSDM_ChannelInit+0x174>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 8002afa:	2300      	movs	r3, #0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	3708      	adds	r7, #8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	bd80      	pop	{r7, pc}
 8002b04:	2000009c 	.word	0x2000009c
 8002b08:	20000098 	.word	0x20000098
 8002b0c:	40016000 	.word	0x40016000

08002b10 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a1c      	ldr	r2, [pc, #112]	; (8002b8c <DFSDM_GetChannelFromInstance+0x7c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d102      	bne.n	8002b26 <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60fb      	str	r3, [r7, #12]
 8002b24:	e02b      	b.n	8002b7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <DFSDM_GetChannelFromInstance+0x80>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d102      	bne.n	8002b34 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	60fb      	str	r3, [r7, #12]
 8002b32:	e024      	b.n	8002b7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a17      	ldr	r2, [pc, #92]	; (8002b94 <DFSDM_GetChannelFromInstance+0x84>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d102      	bne.n	8002b42 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 8002b3c:	2302      	movs	r3, #2
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	e01d      	b.n	8002b7e <DFSDM_GetChannelFromInstance+0x6e>
  }
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else if (Instance == DFSDM1_Channel4)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4a14      	ldr	r2, [pc, #80]	; (8002b98 <DFSDM_GetChannelFromInstance+0x88>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d102      	bne.n	8002b50 <DFSDM_GetChannelFromInstance+0x40>
  {
    channel = 4;
 8002b4a:	2304      	movs	r3, #4
 8002b4c:	60fb      	str	r3, [r7, #12]
 8002b4e:	e016      	b.n	8002b7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel5)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	4a12      	ldr	r2, [pc, #72]	; (8002b9c <DFSDM_GetChannelFromInstance+0x8c>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d102      	bne.n	8002b5e <DFSDM_GetChannelFromInstance+0x4e>
  {
    channel = 5;
 8002b58:	2305      	movs	r3, #5
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	e00f      	b.n	8002b7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel6)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <DFSDM_GetChannelFromInstance+0x90>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d102      	bne.n	8002b6c <DFSDM_GetChannelFromInstance+0x5c>
  {
    channel = 6;
 8002b66:	2306      	movs	r3, #6
 8002b68:	60fb      	str	r3, [r7, #12]
 8002b6a:	e008      	b.n	8002b7e <DFSDM_GetChannelFromInstance+0x6e>
  }
  else if (Instance == DFSDM1_Channel7)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ba4 <DFSDM_GetChannelFromInstance+0x94>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d102      	bne.n	8002b7a <DFSDM_GetChannelFromInstance+0x6a>
  {
    channel = 7;
 8002b74:	2307      	movs	r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]
 8002b78:	e001      	b.n	8002b7e <DFSDM_GetChannelFromInstance+0x6e>
  }
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx || STM32L496xx || STM32L4A6xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3714      	adds	r7, #20
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40016000 	.word	0x40016000
 8002b90:	40016020 	.word	0x40016020
 8002b94:	40016040 	.word	0x40016040
 8002b98:	40016080 	.word	0x40016080
 8002b9c:	400160a0 	.word	0x400160a0
 8002ba0:	400160c0 	.word	0x400160c0
 8002ba4:	400160e0 	.word	0x400160e0

08002ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b087      	sub	sp, #28
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002bb6:	e17f      	b.n	8002eb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	2101      	movs	r1, #1
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 8171 	beq.w	8002eb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d00b      	beq.n	8002bf0 <HAL_GPIO_Init+0x48>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d007      	beq.n	8002bf0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002be4:	2b11      	cmp	r3, #17
 8002be6:	d003      	beq.n	8002bf0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	2b12      	cmp	r3, #18
 8002bee:	d130      	bne.n	8002c52 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	2203      	movs	r2, #3
 8002bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002c00:	43db      	mvns	r3, r3
 8002c02:	693a      	ldr	r2, [r7, #16]
 8002c04:	4013      	ands	r3, r2
 8002c06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	68da      	ldr	r2, [r3, #12]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	005b      	lsls	r3, r3, #1
 8002c10:	fa02 f303 	lsl.w	r3, r2, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4313      	orrs	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002c26:	2201      	movs	r2, #1
 8002c28:	697b      	ldr	r3, [r7, #20]
 8002c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2e:	43db      	mvns	r3, r3
 8002c30:	693a      	ldr	r2, [r7, #16]
 8002c32:	4013      	ands	r3, r2
 8002c34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	091b      	lsrs	r3, r3, #4
 8002c3c:	f003 0201 	and.w	r2, r3, #1
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	fa02 f303 	lsl.w	r3, r2, r3
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	685b      	ldr	r3, [r3, #4]
 8002c56:	f003 0303 	and.w	r3, r3, #3
 8002c5a:	2b03      	cmp	r3, #3
 8002c5c:	d118      	bne.n	8002c90 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c64:	2201      	movs	r2, #1
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4013      	ands	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	08db      	lsrs	r3, r3, #3
 8002c7a:	f003 0201 	and.w	r2, r3, #1
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	693a      	ldr	r2, [r7, #16]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	693a      	ldr	r2, [r7, #16]
 8002c8e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	005b      	lsls	r3, r3, #1
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	693a      	ldr	r2, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	689a      	ldr	r2, [r3, #8]
 8002cac:	697b      	ldr	r3, [r7, #20]
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	693a      	ldr	r2, [r7, #16]
 8002cbe:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	2b02      	cmp	r3, #2
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x128>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b12      	cmp	r3, #18
 8002cce:	d123      	bne.n	8002d18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	08da      	lsrs	r2, r3, #3
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	3208      	adds	r2, #8
 8002cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cde:	697b      	ldr	r3, [r7, #20]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	009b      	lsls	r3, r3, #2
 8002ce6:	220f      	movs	r2, #15
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	691a      	ldr	r2, [r3, #16]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	f003 0307 	and.w	r3, r3, #7
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	693a      	ldr	r2, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	08da      	lsrs	r2, r3, #3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	3208      	adds	r2, #8
 8002d12:	6939      	ldr	r1, [r7, #16]
 8002d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	005b      	lsls	r3, r3, #1
 8002d22:	2203      	movs	r2, #3
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43db      	mvns	r3, r3
 8002d2a:	693a      	ldr	r2, [r7, #16]
 8002d2c:	4013      	ands	r3, r2
 8002d2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0203 	and.w	r2, r3, #3
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	005b      	lsls	r3, r3, #1
 8002d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4313      	orrs	r3, r2
 8002d44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	693a      	ldr	r2, [r7, #16]
 8002d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	f000 80ac 	beq.w	8002eb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d5a:	4b5f      	ldr	r3, [pc, #380]	; (8002ed8 <HAL_GPIO_Init+0x330>)
 8002d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d5e:	4a5e      	ldr	r2, [pc, #376]	; (8002ed8 <HAL_GPIO_Init+0x330>)
 8002d60:	f043 0301 	orr.w	r3, r3, #1
 8002d64:	6613      	str	r3, [r2, #96]	; 0x60
 8002d66:	4b5c      	ldr	r3, [pc, #368]	; (8002ed8 <HAL_GPIO_Init+0x330>)
 8002d68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002d6a:	f003 0301 	and.w	r3, r3, #1
 8002d6e:	60bb      	str	r3, [r7, #8]
 8002d70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d72:	4a5a      	ldr	r2, [pc, #360]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	089b      	lsrs	r3, r3, #2
 8002d78:	3302      	adds	r3, #2
 8002d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	f003 0303 	and.w	r3, r3, #3
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	220f      	movs	r2, #15
 8002d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8e:	43db      	mvns	r3, r3
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	4013      	ands	r3, r2
 8002d94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002d9c:	d025      	beq.n	8002dea <HAL_GPIO_Init+0x242>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <HAL_GPIO_Init+0x338>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01f      	beq.n	8002de6 <HAL_GPIO_Init+0x23e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a4e      	ldr	r2, [pc, #312]	; (8002ee4 <HAL_GPIO_Init+0x33c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d019      	beq.n	8002de2 <HAL_GPIO_Init+0x23a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a4d      	ldr	r2, [pc, #308]	; (8002ee8 <HAL_GPIO_Init+0x340>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0x236>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a4c      	ldr	r2, [pc, #304]	; (8002eec <HAL_GPIO_Init+0x344>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00d      	beq.n	8002dda <HAL_GPIO_Init+0x232>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4b      	ldr	r2, [pc, #300]	; (8002ef0 <HAL_GPIO_Init+0x348>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x22e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4a      	ldr	r2, [pc, #296]	; (8002ef4 <HAL_GPIO_Init+0x34c>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_GPIO_Init+0x22a>
 8002dce:	2306      	movs	r3, #6
 8002dd0:	e00c      	b.n	8002dec <HAL_GPIO_Init+0x244>
 8002dd2:	2307      	movs	r3, #7
 8002dd4:	e00a      	b.n	8002dec <HAL_GPIO_Init+0x244>
 8002dd6:	2305      	movs	r3, #5
 8002dd8:	e008      	b.n	8002dec <HAL_GPIO_Init+0x244>
 8002dda:	2304      	movs	r3, #4
 8002ddc:	e006      	b.n	8002dec <HAL_GPIO_Init+0x244>
 8002dde:	2303      	movs	r3, #3
 8002de0:	e004      	b.n	8002dec <HAL_GPIO_Init+0x244>
 8002de2:	2302      	movs	r3, #2
 8002de4:	e002      	b.n	8002dec <HAL_GPIO_Init+0x244>
 8002de6:	2301      	movs	r3, #1
 8002de8:	e000      	b.n	8002dec <HAL_GPIO_Init+0x244>
 8002dea:	2300      	movs	r3, #0
 8002dec:	697a      	ldr	r2, [r7, #20]
 8002dee:	f002 0203 	and.w	r2, r2, #3
 8002df2:	0092      	lsls	r2, r2, #2
 8002df4:	4093      	lsls	r3, r2
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dfc:	4937      	ldr	r1, [pc, #220]	; (8002edc <HAL_GPIO_Init+0x334>)
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	089b      	lsrs	r3, r3, #2
 8002e02:	3302      	adds	r3, #2
 8002e04:	693a      	ldr	r2, [r7, #16]
 8002e06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8002e0a:	4b3b      	ldr	r3, [pc, #236]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	43db      	mvns	r3, r3
 8002e14:	693a      	ldr	r2, [r7, #16]
 8002e16:	4013      	ands	r3, r2
 8002e18:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d003      	beq.n	8002e2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e2e:	4a32      	ldr	r2, [pc, #200]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8002e34:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	43db      	mvns	r3, r3
 8002e3e:	693a      	ldr	r2, [r7, #16]
 8002e40:	4013      	ands	r3, r2
 8002e42:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e58:	4a27      	ldr	r2, [pc, #156]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002e5e:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	693a      	ldr	r2, [r7, #16]
 8002e94:	4013      	ands	r3, r2
 8002e96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002ea4:	693a      	ldr	r2, [r7, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002eac:	4a12      	ldr	r2, [pc, #72]	; (8002ef8 <HAL_GPIO_Init+0x350>)
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	681a      	ldr	r2, [r3, #0]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f47f ae78 	bne.w	8002bb8 <HAL_GPIO_Init+0x10>
  }
}
 8002ec8:	bf00      	nop
 8002eca:	bf00      	nop
 8002ecc:	371c      	adds	r7, #28
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40010000 	.word	0x40010000
 8002ee0:	48000400 	.word	0x48000400
 8002ee4:	48000800 	.word	0x48000800
 8002ee8:	48000c00 	.word	0x48000c00
 8002eec:	48001000 	.word	0x48001000
 8002ef0:	48001400 	.word	0x48001400
 8002ef4:	48001800 	.word	0x48001800
 8002ef8:	40010400 	.word	0x40010400

08002efc <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8002efc:	b480      	push	{r7}
 8002efe:	b087      	sub	sp, #28
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
 8002f04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f06:	2300      	movs	r3, #0
 8002f08:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002f0a:	e0cd      	b.n	80030a8 <HAL_GPIO_DeInit+0x1ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	683a      	ldr	r2, [r7, #0]
 8002f16:	4013      	ands	r3, r2
 8002f18:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8002f1a:	693b      	ldr	r3, [r7, #16]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 80c0 	beq.w	80030a2 <HAL_GPIO_DeInit+0x1a6>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2u];
 8002f22:	4a68      	ldr	r2, [pc, #416]	; (80030c4 <HAL_GPIO_DeInit+0x1c8>)
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	089b      	lsrs	r3, r3, #2
 8002f28:	3302      	adds	r3, #2
 8002f2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f2e:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	f003 0303 	and.w	r3, r3, #3
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	220f      	movs	r2, #15
 8002f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	4013      	ands	r3, r2
 8002f42:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002f4a:	d025      	beq.n	8002f98 <HAL_GPIO_DeInit+0x9c>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a5e      	ldr	r2, [pc, #376]	; (80030c8 <HAL_GPIO_DeInit+0x1cc>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d01f      	beq.n	8002f94 <HAL_GPIO_DeInit+0x98>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a5d      	ldr	r2, [pc, #372]	; (80030cc <HAL_GPIO_DeInit+0x1d0>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d019      	beq.n	8002f90 <HAL_GPIO_DeInit+0x94>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a5c      	ldr	r2, [pc, #368]	; (80030d0 <HAL_GPIO_DeInit+0x1d4>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d013      	beq.n	8002f8c <HAL_GPIO_DeInit+0x90>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a5b      	ldr	r2, [pc, #364]	; (80030d4 <HAL_GPIO_DeInit+0x1d8>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d00d      	beq.n	8002f88 <HAL_GPIO_DeInit+0x8c>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a5a      	ldr	r2, [pc, #360]	; (80030d8 <HAL_GPIO_DeInit+0x1dc>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d007      	beq.n	8002f84 <HAL_GPIO_DeInit+0x88>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a59      	ldr	r2, [pc, #356]	; (80030dc <HAL_GPIO_DeInit+0x1e0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d101      	bne.n	8002f80 <HAL_GPIO_DeInit+0x84>
 8002f7c:	2306      	movs	r3, #6
 8002f7e:	e00c      	b.n	8002f9a <HAL_GPIO_DeInit+0x9e>
 8002f80:	2307      	movs	r3, #7
 8002f82:	e00a      	b.n	8002f9a <HAL_GPIO_DeInit+0x9e>
 8002f84:	2305      	movs	r3, #5
 8002f86:	e008      	b.n	8002f9a <HAL_GPIO_DeInit+0x9e>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	e006      	b.n	8002f9a <HAL_GPIO_DeInit+0x9e>
 8002f8c:	2303      	movs	r3, #3
 8002f8e:	e004      	b.n	8002f9a <HAL_GPIO_DeInit+0x9e>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e002      	b.n	8002f9a <HAL_GPIO_DeInit+0x9e>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_GPIO_DeInit+0x9e>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	f002 0203 	and.w	r2, r2, #3
 8002fa0:	0092      	lsls	r2, r2, #2
 8002fa2:	4093      	lsls	r3, r2
 8002fa4:	68fa      	ldr	r2, [r7, #12]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d132      	bne.n	8003010 <HAL_GPIO_DeInit+0x114>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8002faa:	4b4d      	ldr	r3, [pc, #308]	; (80030e0 <HAL_GPIO_DeInit+0x1e4>)
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	494b      	ldr	r1, [pc, #300]	; (80030e0 <HAL_GPIO_DeInit+0x1e4>)
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 8002fb8:	4b49      	ldr	r3, [pc, #292]	; (80030e0 <HAL_GPIO_DeInit+0x1e4>)
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	4947      	ldr	r1, [pc, #284]	; (80030e0 <HAL_GPIO_DeInit+0x1e4>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8002fc6:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <HAL_GPIO_DeInit+0x1e4>)
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	43db      	mvns	r3, r3
 8002fce:	4944      	ldr	r1, [pc, #272]	; (80030e0 <HAL_GPIO_DeInit+0x1e4>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	608b      	str	r3, [r1, #8]
        EXTI->FTSR1 &= ~(iocurrent);
 8002fd4:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <HAL_GPIO_DeInit+0x1e4>)
 8002fd6:	68da      	ldr	r2, [r3, #12]
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	4940      	ldr	r1, [pc, #256]	; (80030e0 <HAL_GPIO_DeInit+0x1e4>)
 8002fde:	4013      	ands	r3, r2
 8002fe0:	60cb      	str	r3, [r1, #12]

        tmp = 0x0FuL << (4u * (position & 0x03u));
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	f003 0303 	and.w	r3, r3, #3
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	220f      	movs	r2, #15
 8002fec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002ff2:	4a34      	ldr	r2, [pc, #208]	; (80030c4 <HAL_GPIO_DeInit+0x1c8>)
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	089b      	lsrs	r3, r3, #2
 8002ff8:	3302      	adds	r3, #2
 8002ffa:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	43da      	mvns	r2, r3
 8003002:	4830      	ldr	r0, [pc, #192]	; (80030c4 <HAL_GPIO_DeInit+0x1c8>)
 8003004:	697b      	ldr	r3, [r7, #20]
 8003006:	089b      	lsrs	r3, r3, #2
 8003008:	400a      	ands	r2, r1
 800300a:	3302      	adds	r3, #2
 800300c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	2103      	movs	r1, #3
 800301a:	fa01 f303 	lsl.w	r3, r1, r3
 800301e:	431a      	orrs	r2, r3
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	08da      	lsrs	r2, r3, #3
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	3208      	adds	r2, #8
 800302c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003030:	697b      	ldr	r3, [r7, #20]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	220f      	movs	r2, #15
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	697a      	ldr	r2, [r7, #20]
 8003042:	08d2      	lsrs	r2, r2, #3
 8003044:	4019      	ands	r1, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	3208      	adds	r2, #8
 800304a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	005b      	lsls	r3, r3, #1
 8003056:	2103      	movs	r1, #3
 8003058:	fa01 f303 	lsl.w	r3, r1, r3
 800305c:	43db      	mvns	r3, r3
 800305e:	401a      	ands	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	2101      	movs	r1, #1
 800306a:	697b      	ldr	r3, [r7, #20]
 800306c:	fa01 f303 	lsl.w	r3, r1, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	401a      	ands	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	005b      	lsls	r3, r3, #1
 8003080:	2103      	movs	r1, #3
 8003082:	fa01 f303 	lsl.w	r3, r1, r3
 8003086:	43db      	mvns	r3, r3
 8003088:	401a      	ands	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	60da      	str	r2, [r3, #12]

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)
      /* Deactivate the Control bit of Analog mode for the current IO */
      GPIOx->ASCR &= ~(GPIO_ASCR_ASC0<< position);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003092:	2101      	movs	r1, #1
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	fa01 f303 	lsl.w	r3, r1, r3
 800309a:	43db      	mvns	r3, r3
 800309c:	401a      	ands	r2, r3
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */
    }

    position++;
 80030a2:	697b      	ldr	r3, [r7, #20]
 80030a4:	3301      	adds	r3, #1
 80030a6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80030a8:	683a      	ldr	r2, [r7, #0]
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	fa22 f303 	lsr.w	r3, r2, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f47f af2b 	bne.w	8002f0c <HAL_GPIO_DeInit+0x10>
  }
}
 80030b6:	bf00      	nop
 80030b8:	bf00      	nop
 80030ba:	371c      	adds	r7, #28
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr
 80030c4:	40010000 	.word	0x40010000
 80030c8:	48000400 	.word	0x48000400
 80030cc:	48000800 	.word	0x48000800
 80030d0:	48000c00 	.word	0x48000c00
 80030d4:	48001000 	.word	0x48001000
 80030d8:	48001400 	.word	0x48001400
 80030dc:	48001800 	.word	0x48001800
 80030e0:	40010400 	.word	0x40010400

080030e4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	460b      	mov	r3, r1
 80030ee:	807b      	strh	r3, [r7, #2]
 80030f0:	4613      	mov	r3, r2
 80030f2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030f4:	787b      	ldrb	r3, [r7, #1]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80030fa:	887a      	ldrh	r2, [r7, #2]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003100:	e002      	b.n	8003108 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003102:	887a      	ldrh	r2, [r7, #2]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	460b      	mov	r3, r1
 800311e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	695b      	ldr	r3, [r3, #20]
 8003124:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003126:	887a      	ldrh	r2, [r7, #2]
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4013      	ands	r3, r2
 800312c:	041a      	lsls	r2, r3, #16
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	43d9      	mvns	r1, r3
 8003132:	887b      	ldrh	r3, [r7, #2]
 8003134:	400b      	ands	r3, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	619a      	str	r2, [r3, #24]
}
 800313c:	bf00      	nop
 800313e:	3714      	adds	r7, #20
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b082      	sub	sp, #8
 800314c:	af00      	add	r7, sp, #0
 800314e:	4603      	mov	r3, r0
 8003150:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003152:	4b08      	ldr	r3, [pc, #32]	; (8003174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003154:	695a      	ldr	r2, [r3, #20]
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	4013      	ands	r3, r2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d006      	beq.n	800316c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800315e:	4a05      	ldr	r2, [pc, #20]	; (8003174 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003160:	88fb      	ldrh	r3, [r7, #6]
 8003162:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003164:	88fb      	ldrh	r3, [r7, #6]
 8003166:	4618      	mov	r0, r3
 8003168:	f7fd fa48 	bl	80005fc <HAL_GPIO_EXTI_Callback>
  }
}
 800316c:	bf00      	nop
 800316e:	3708      	adds	r7, #8
 8003170:	46bd      	mov	sp, r7
 8003172:	bd80      	pop	{r7, pc}
 8003174:	40010400 	.word	0x40010400

08003178 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b082      	sub	sp, #8
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d101      	bne.n	800318a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	e081      	b.n	800328e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003190:	b2db      	uxtb	r3, r3
 8003192:	2b00      	cmp	r3, #0
 8003194:	d106      	bne.n	80031a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	2200      	movs	r2, #0
 800319a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800319e:	6878      	ldr	r0, [r7, #4]
 80031a0:	f000 f8a8 	bl	80032f4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2224      	movs	r2, #36	; 0x24
 80031a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0201 	bic.w	r2, r2, #1
 80031ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031c8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031d8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68db      	ldr	r3, [r3, #12]
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d107      	bne.n	80031f2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	689a      	ldr	r2, [r3, #8]
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80031ee:	609a      	str	r2, [r3, #8]
 80031f0:	e006      	b.n	8003200 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	689a      	ldr	r2, [r3, #8]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80031fe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	2b02      	cmp	r3, #2
 8003206:	d104      	bne.n	8003212 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003210:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6812      	ldr	r2, [r2, #0]
 800321c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003220:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003224:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68da      	ldr	r2, [r3, #12]
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003234:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	691a      	ldr	r2, [r3, #16]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	ea42 0103 	orr.w	r1, r2, r3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	699b      	ldr	r3, [r3, #24]
 8003246:	021a      	lsls	r2, r3, #8
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	69d9      	ldr	r1, [r3, #28]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a1a      	ldr	r2, [r3, #32]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681a      	ldr	r2, [r3, #0]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f042 0201 	orr.w	r2, r2, #1
 800326e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2220      	movs	r2, #32
 800327a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2200      	movs	r2, #0
 8003288:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800328c:	2300      	movs	r3, #0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b082      	sub	sp, #8
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d101      	bne.n	80032a8 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 80032a4:	2301      	movs	r3, #1
 80032a6:	e021      	b.n	80032ec <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2224      	movs	r2, #36	; 0x24
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f022 0201 	bic.w	r2, r2, #1
 80032be:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80032c0:	6878      	ldr	r0, [r7, #4]
 80032c2:	f000 f821 	bl	8003308 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80032ea:	2300      	movs	r3, #0
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80032f4:	b480      	push	{r7}
 80032f6:	b083      	sub	sp, #12
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80032fc:	bf00      	nop
 80032fe:	370c      	adds	r7, #12
 8003300:	46bd      	mov	sp, r7
 8003302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003306:	4770      	bx	lr

08003308 <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 8003310:	bf00      	nop
 8003312:	370c      	adds	r7, #12
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr

0800331c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	4608      	mov	r0, r1
 8003326:	4611      	mov	r1, r2
 8003328:	461a      	mov	r2, r3
 800332a:	4603      	mov	r3, r0
 800332c:	817b      	strh	r3, [r7, #10]
 800332e:	460b      	mov	r3, r1
 8003330:	813b      	strh	r3, [r7, #8]
 8003332:	4613      	mov	r3, r2
 8003334:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333c:	b2db      	uxtb	r3, r3
 800333e:	2b20      	cmp	r3, #32
 8003340:	f040 80f9 	bne.w	8003536 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d002      	beq.n	8003350 <HAL_I2C_Mem_Write+0x34>
 800334a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800334c:	2b00      	cmp	r3, #0
 800334e:	d105      	bne.n	800335c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003356:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e0ed      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003362:	2b01      	cmp	r3, #1
 8003364:	d101      	bne.n	800336a <HAL_I2C_Mem_Write+0x4e>
 8003366:	2302      	movs	r3, #2
 8003368:	e0e6      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	2201      	movs	r2, #1
 800336e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003372:	f7ff f9cb 	bl	800270c <HAL_GetTick>
 8003376:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	9300      	str	r3, [sp, #0]
 800337c:	2319      	movs	r3, #25
 800337e:	2201      	movs	r2, #1
 8003380:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003384:	68f8      	ldr	r0, [r7, #12]
 8003386:	f000 fadd 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	d001      	beq.n	8003394 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e0d1      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2221      	movs	r2, #33	; 0x21
 8003398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2240      	movs	r2, #64	; 0x40
 80033a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a3a      	ldr	r2, [r7, #32]
 80033ae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033b4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	2200      	movs	r2, #0
 80033ba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033bc:	88f8      	ldrh	r0, [r7, #6]
 80033be:	893a      	ldrh	r2, [r7, #8]
 80033c0:	8979      	ldrh	r1, [r7, #10]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	9301      	str	r3, [sp, #4]
 80033c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	4603      	mov	r3, r0
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f000 f9ed 	bl	80037ac <I2C_RequestMemoryWrite>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	2200      	movs	r2, #0
 80033dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0a9      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2bff      	cmp	r3, #255	; 0xff
 80033ec:	d90e      	bls.n	800340c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	22ff      	movs	r2, #255	; 0xff
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	8979      	ldrh	r1, [r7, #10]
 80033fc:	2300      	movs	r3, #0
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fbbf 	bl	8003b88 <I2C_TransferConfig>
 800340a:	e00f      	b.n	800342c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800341a:	b2da      	uxtb	r2, r3
 800341c:	8979      	ldrh	r1, [r7, #10]
 800341e:	2300      	movs	r3, #0
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fbae 	bl	8003b88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003430:	68f8      	ldr	r0, [r7, #12]
 8003432:	f000 fac7 	bl	80039c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003436:	4603      	mov	r3, r0
 8003438:	2b00      	cmp	r3, #0
 800343a:	d001      	beq.n	8003440 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800343c:	2301      	movs	r3, #1
 800343e:	e07b      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	781a      	ldrb	r2, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800345a:	b29b      	uxth	r3, r3
 800345c:	3b01      	subs	r3, #1
 800345e:	b29a      	uxth	r2, r3
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003468:	3b01      	subs	r3, #1
 800346a:	b29a      	uxth	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003474:	b29b      	uxth	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d034      	beq.n	80034e4 <HAL_I2C_Mem_Write+0x1c8>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347e:	2b00      	cmp	r3, #0
 8003480:	d130      	bne.n	80034e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	9300      	str	r3, [sp, #0]
 8003486:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003488:	2200      	movs	r2, #0
 800348a:	2180      	movs	r1, #128	; 0x80
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fa59 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 8003492:	4603      	mov	r3, r0
 8003494:	2b00      	cmp	r3, #0
 8003496:	d001      	beq.n	800349c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e04d      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	2bff      	cmp	r3, #255	; 0xff
 80034a4:	d90e      	bls.n	80034c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	22ff      	movs	r2, #255	; 0xff
 80034aa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	8979      	ldrh	r1, [r7, #10]
 80034b4:	2300      	movs	r3, #0
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034bc:	68f8      	ldr	r0, [r7, #12]
 80034be:	f000 fb63 	bl	8003b88 <I2C_TransferConfig>
 80034c2:	e00f      	b.n	80034e4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	8979      	ldrh	r1, [r7, #10]
 80034d6:	2300      	movs	r3, #0
 80034d8:	9300      	str	r3, [sp, #0]
 80034da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034de:	68f8      	ldr	r0, [r7, #12]
 80034e0:	f000 fb52 	bl	8003b88 <I2C_TransferConfig>
        }
      }

    } while (hi2c->XferCount > 0U);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d19e      	bne.n	800342c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ee:	697a      	ldr	r2, [r7, #20]
 80034f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034f2:	68f8      	ldr	r0, [r7, #12]
 80034f4:	f000 faa6 	bl	8003a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d001      	beq.n	8003502 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e01a      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2220      	movs	r2, #32
 8003508:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	6859      	ldr	r1, [r3, #4]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681a      	ldr	r2, [r3, #0]
 8003514:	4b0a      	ldr	r3, [pc, #40]	; (8003540 <HAL_I2C_Mem_Write+0x224>)
 8003516:	400b      	ands	r3, r1
 8003518:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003532:	2300      	movs	r3, #0
 8003534:	e000      	b.n	8003538 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8003536:	2302      	movs	r3, #2
  }
}
 8003538:	4618      	mov	r0, r3
 800353a:	3718      	adds	r7, #24
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}
 8003540:	fe00e800 	.word	0xfe00e800

08003544 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b088      	sub	sp, #32
 8003548:	af02      	add	r7, sp, #8
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	4608      	mov	r0, r1
 800354e:	4611      	mov	r1, r2
 8003550:	461a      	mov	r2, r3
 8003552:	4603      	mov	r3, r0
 8003554:	817b      	strh	r3, [r7, #10]
 8003556:	460b      	mov	r3, r1
 8003558:	813b      	strh	r3, [r7, #8]
 800355a:	4613      	mov	r3, r2
 800355c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b20      	cmp	r3, #32
 8003568:	f040 80fd 	bne.w	8003766 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800356c:	6a3b      	ldr	r3, [r7, #32]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d002      	beq.n	8003578 <HAL_I2C_Mem_Read+0x34>
 8003572:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003574:	2b00      	cmp	r3, #0
 8003576:	d105      	bne.n	8003584 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8003580:	2301      	movs	r3, #1
 8003582:	e0f1      	b.n	8003768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_I2C_Mem_Read+0x4e>
 800358e:	2302      	movs	r3, #2
 8003590:	e0ea      	b.n	8003768 <HAL_I2C_Mem_Read+0x224>
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800359a:	f7ff f8b7 	bl	800270c <HAL_GetTick>
 800359e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	9300      	str	r3, [sp, #0]
 80035a4:	2319      	movs	r3, #25
 80035a6:	2201      	movs	r2, #1
 80035a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035ac:	68f8      	ldr	r0, [r7, #12]
 80035ae:	f000 f9c9 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d001      	beq.n	80035bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e0d5      	b.n	8003768 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2222      	movs	r2, #34	; 0x22
 80035c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2240      	movs	r2, #64	; 0x40
 80035c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2200      	movs	r2, #0
 80035e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035e4:	88f8      	ldrh	r0, [r7, #6]
 80035e6:	893a      	ldrh	r2, [r7, #8]
 80035e8:	8979      	ldrh	r1, [r7, #10]
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	4603      	mov	r3, r0
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 f92d 	bl	8003854 <I2C_RequestMemoryRead>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	e0ad      	b.n	8003768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003610:	b29b      	uxth	r3, r3
 8003612:	2bff      	cmp	r3, #255	; 0xff
 8003614:	d90e      	bls.n	8003634 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	22ff      	movs	r2, #255	; 0xff
 800361a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003620:	b2da      	uxtb	r2, r3
 8003622:	8979      	ldrh	r1, [r7, #10]
 8003624:	4b52      	ldr	r3, [pc, #328]	; (8003770 <HAL_I2C_Mem_Read+0x22c>)
 8003626:	9300      	str	r3, [sp, #0]
 8003628:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f000 faab 	bl	8003b88 <I2C_TransferConfig>
 8003632:	e00f      	b.n	8003654 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003638:	b29a      	uxth	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003642:	b2da      	uxtb	r2, r3
 8003644:	8979      	ldrh	r1, [r7, #10]
 8003646:	4b4a      	ldr	r3, [pc, #296]	; (8003770 <HAL_I2C_Mem_Read+0x22c>)
 8003648:	9300      	str	r3, [sp, #0]
 800364a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800364e:	68f8      	ldr	r0, [r7, #12]
 8003650:	f000 fa9a 	bl	8003b88 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	9300      	str	r3, [sp, #0]
 8003658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800365a:	2200      	movs	r2, #0
 800365c:	2104      	movs	r1, #4
 800365e:	68f8      	ldr	r0, [r7, #12]
 8003660:	f000 f970 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e07c      	b.n	8003768 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036a4:	b29b      	uxth	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d034      	beq.n	8003714 <HAL_I2C_Mem_Read+0x1d0>
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d130      	bne.n	8003714 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	9300      	str	r3, [sp, #0]
 80036b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036b8:	2200      	movs	r2, #0
 80036ba:	2180      	movs	r1, #128	; 0x80
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 f941 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d001      	beq.n	80036cc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e04d      	b.n	8003768 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	2bff      	cmp	r3, #255	; 0xff
 80036d4:	d90e      	bls.n	80036f4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	22ff      	movs	r2, #255	; 0xff
 80036da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	8979      	ldrh	r1, [r7, #10]
 80036e4:	2300      	movs	r3, #0
 80036e6:	9300      	str	r3, [sp, #0]
 80036e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 fa4b 	bl	8003b88 <I2C_TransferConfig>
 80036f2:	e00f      	b.n	8003714 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003702:	b2da      	uxtb	r2, r3
 8003704:	8979      	ldrh	r1, [r7, #10]
 8003706:	2300      	movs	r3, #0
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800370e:	68f8      	ldr	r0, [r7, #12]
 8003710:	f000 fa3a 	bl	8003b88 <I2C_TransferConfig>
        }
      }
    } while (hi2c->XferCount > 0U);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d19a      	bne.n	8003654 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800371e:	697a      	ldr	r2, [r7, #20]
 8003720:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 f98e 	bl	8003a44 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e01a      	b.n	8003768 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2220      	movs	r2, #32
 8003738:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6859      	ldr	r1, [r3, #4]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	4b0b      	ldr	r3, [pc, #44]	; (8003774 <HAL_I2C_Mem_Read+0x230>)
 8003746:	400b      	ands	r3, r1
 8003748:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2220      	movs	r2, #32
 800374e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2200      	movs	r2, #0
 800375e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003762:	2300      	movs	r3, #0
 8003764:	e000      	b.n	8003768 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003766:	2302      	movs	r3, #2
  }
}
 8003768:	4618      	mov	r0, r3
 800376a:	3718      	adds	r7, #24
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	80002400 	.word	0x80002400
 8003774:	fe00e800 	.word	0xfe00e800

08003778 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8003778:	b480      	push	{r7}
 800377a:	b083      	sub	sp, #12
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003786:	b2db      	uxtb	r3, r3
}
 8003788:	4618      	mov	r0, r3
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003792:	4770      	bx	lr

08003794 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8003794:	b480      	push	{r7}
 8003796:	b083      	sub	sp, #12
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 80037a0:	4618      	mov	r0, r3
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037aa:	4770      	bx	lr

080037ac <I2C_RequestMemoryWrite>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                                uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af02      	add	r7, sp, #8
 80037b2:	60f8      	str	r0, [r7, #12]
 80037b4:	4608      	mov	r0, r1
 80037b6:	4611      	mov	r1, r2
 80037b8:	461a      	mov	r2, r3
 80037ba:	4603      	mov	r3, r0
 80037bc:	817b      	strh	r3, [r7, #10]
 80037be:	460b      	mov	r3, r1
 80037c0:	813b      	strh	r3, [r7, #8]
 80037c2:	4613      	mov	r3, r2
 80037c4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80037c6:	88fb      	ldrh	r3, [r7, #6]
 80037c8:	b2da      	uxtb	r2, r3
 80037ca:	8979      	ldrh	r1, [r7, #10]
 80037cc:	4b20      	ldr	r3, [pc, #128]	; (8003850 <I2C_RequestMemoryWrite+0xa4>)
 80037ce:	9300      	str	r3, [sp, #0]
 80037d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80037d4:	68f8      	ldr	r0, [r7, #12]
 80037d6:	f000 f9d7 	bl	8003b88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	69b9      	ldr	r1, [r7, #24]
 80037de:	68f8      	ldr	r0, [r7, #12]
 80037e0:	f000 f8f0 	bl	80039c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80037e4:	4603      	mov	r3, r0
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d001      	beq.n	80037ee <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e02c      	b.n	8003848 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ee:	88fb      	ldrh	r3, [r7, #6]
 80037f0:	2b01      	cmp	r3, #1
 80037f2:	d105      	bne.n	8003800 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80037f4:	893b      	ldrh	r3, [r7, #8]
 80037f6:	b2da      	uxtb	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	629a      	str	r2, [r3, #40]	; 0x28
 80037fe:	e015      	b.n	800382c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003800:	893b      	ldrh	r3, [r7, #8]
 8003802:	0a1b      	lsrs	r3, r3, #8
 8003804:	b29b      	uxth	r3, r3
 8003806:	b2da      	uxtb	r2, r3
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	69b9      	ldr	r1, [r7, #24]
 8003812:	68f8      	ldr	r0, [r7, #12]
 8003814:	f000 f8d6 	bl	80039c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8003818:	4603      	mov	r3, r0
 800381a:	2b00      	cmp	r3, #0
 800381c:	d001      	beq.n	8003822 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	e012      	b.n	8003848 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003822:	893b      	ldrh	r3, [r7, #8]
 8003824:	b2da      	uxtb	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	9300      	str	r3, [sp, #0]
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	2200      	movs	r2, #0
 8003834:	2180      	movs	r1, #128	; 0x80
 8003836:	68f8      	ldr	r0, [r7, #12]
 8003838:	f000 f884 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 800383c:	4603      	mov	r3, r0
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e000      	b.n	8003848 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	80002000 	.word	0x80002000

08003854 <I2C_RequestMemoryRead>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                               uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b086      	sub	sp, #24
 8003858:	af02      	add	r7, sp, #8
 800385a:	60f8      	str	r0, [r7, #12]
 800385c:	4608      	mov	r0, r1
 800385e:	4611      	mov	r1, r2
 8003860:	461a      	mov	r2, r3
 8003862:	4603      	mov	r3, r0
 8003864:	817b      	strh	r3, [r7, #10]
 8003866:	460b      	mov	r3, r1
 8003868:	813b      	strh	r3, [r7, #8]
 800386a:	4613      	mov	r3, r2
 800386c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	b2da      	uxtb	r2, r3
 8003872:	8979      	ldrh	r1, [r7, #10]
 8003874:	4b20      	ldr	r3, [pc, #128]	; (80038f8 <I2C_RequestMemoryRead+0xa4>)
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	2300      	movs	r3, #0
 800387a:	68f8      	ldr	r0, [r7, #12]
 800387c:	f000 f984 	bl	8003b88 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003880:	69fa      	ldr	r2, [r7, #28]
 8003882:	69b9      	ldr	r1, [r7, #24]
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f000 f89d 	bl	80039c4 <I2C_WaitOnTXISFlagUntilTimeout>
 800388a:	4603      	mov	r3, r0
 800388c:	2b00      	cmp	r3, #0
 800388e:	d001      	beq.n	8003894 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e02c      	b.n	80038ee <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003894:	88fb      	ldrh	r3, [r7, #6]
 8003896:	2b01      	cmp	r3, #1
 8003898:	d105      	bne.n	80038a6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800389a:	893b      	ldrh	r3, [r7, #8]
 800389c:	b2da      	uxtb	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	629a      	str	r2, [r3, #40]	; 0x28
 80038a4:	e015      	b.n	80038d2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038a6:	893b      	ldrh	r3, [r7, #8]
 80038a8:	0a1b      	lsrs	r3, r3, #8
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	b2da      	uxtb	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b4:	69fa      	ldr	r2, [r7, #28]
 80038b6:	69b9      	ldr	r1, [r7, #24]
 80038b8:	68f8      	ldr	r0, [r7, #12]
 80038ba:	f000 f883 	bl	80039c4 <I2C_WaitOnTXISFlagUntilTimeout>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	e012      	b.n	80038ee <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038c8:	893b      	ldrh	r3, [r7, #8]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80038d2:	69fb      	ldr	r3, [r7, #28]
 80038d4:	9300      	str	r3, [sp, #0]
 80038d6:	69bb      	ldr	r3, [r7, #24]
 80038d8:	2200      	movs	r2, #0
 80038da:	2140      	movs	r1, #64	; 0x40
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f831 	bl	8003944 <I2C_WaitOnFlagUntilTimeout>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e000      	b.n	80038ee <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80038ec:	2300      	movs	r3, #0
}
 80038ee:	4618      	mov	r0, r3
 80038f0:	3710      	adds	r7, #16
 80038f2:	46bd      	mov	sp, r7
 80038f4:	bd80      	pop	{r7, pc}
 80038f6:	bf00      	nop
 80038f8:	80002000 	.word	0x80002000

080038fc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b083      	sub	sp, #12
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	699b      	ldr	r3, [r3, #24]
 800390a:	f003 0302 	and.w	r3, r3, #2
 800390e:	2b02      	cmp	r3, #2
 8003910:	d103      	bne.n	800391a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	2200      	movs	r2, #0
 8003918:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f003 0301 	and.w	r3, r3, #1
 8003924:	2b01      	cmp	r3, #1
 8003926:	d007      	beq.n	8003938 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	699a      	ldr	r2, [r3, #24]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f042 0201 	orr.w	r2, r2, #1
 8003936:	619a      	str	r2, [r3, #24]
  }
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003942:	4770      	bx	lr

08003944 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	603b      	str	r3, [r7, #0]
 8003950:	4613      	mov	r3, r2
 8003952:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003954:	e022      	b.n	800399c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395c:	d01e      	beq.n	800399c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800395e:	f7fe fed5 	bl	800270c <HAL_GetTick>
 8003962:	4602      	mov	r2, r0
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	1ad3      	subs	r3, r2, r3
 8003968:	683a      	ldr	r2, [r7, #0]
 800396a:	429a      	cmp	r2, r3
 800396c:	d302      	bcc.n	8003974 <I2C_WaitOnFlagUntilTimeout+0x30>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d113      	bne.n	800399c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003978:	f043 0220 	orr.w	r2, r3, #32
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2220      	movs	r2, #32
 8003984:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e00f      	b.n	80039bc <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	699a      	ldr	r2, [r3, #24]
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	4013      	ands	r3, r2
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	429a      	cmp	r2, r3
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	461a      	mov	r2, r3
 80039b4:	79fb      	ldrb	r3, [r7, #7]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d0cd      	beq.n	8003956 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	3710      	adds	r7, #16
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bd80      	pop	{r7, pc}

080039c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80039d0:	e02c      	b.n	8003a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80039d2:	687a      	ldr	r2, [r7, #4]
 80039d4:	68b9      	ldr	r1, [r7, #8]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f000 f870 	bl	8003abc <I2C_IsAcknowledgeFailed>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d001      	beq.n	80039e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e02a      	b.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ec:	d01e      	beq.n	8003a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039ee:	f7fe fe8d 	bl	800270c <HAL_GetTick>
 80039f2:	4602      	mov	r2, r0
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	68ba      	ldr	r2, [r7, #8]
 80039fa:	429a      	cmp	r2, r3
 80039fc:	d302      	bcc.n	8003a04 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80039fe:	68bb      	ldr	r3, [r7, #8]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d113      	bne.n	8003a2c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	f043 0220 	orr.w	r2, r3, #32
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e007      	b.n	8003a3c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	699b      	ldr	r3, [r3, #24]
 8003a32:	f003 0302 	and.w	r3, r3, #2
 8003a36:	2b02      	cmp	r3, #2
 8003a38:	d1cb      	bne.n	80039d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	3710      	adds	r7, #16
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bd80      	pop	{r7, pc}

08003a44 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003a50:	e028      	b.n	8003aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	68b9      	ldr	r1, [r7, #8]
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f000 f830 	bl	8003abc <I2C_IsAcknowledgeFailed>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d001      	beq.n	8003a66 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003a62:	2301      	movs	r3, #1
 8003a64:	e026      	b.n	8003ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a66:	f7fe fe51 	bl	800270c <HAL_GetTick>
 8003a6a:	4602      	mov	r2, r0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	1ad3      	subs	r3, r2, r3
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d302      	bcc.n	8003a7c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d113      	bne.n	8003aa4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a80:	f043 0220 	orr.w	r2, r3, #32
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e007      	b.n	8003ab4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	699b      	ldr	r3, [r3, #24]
 8003aaa:	f003 0320 	and.w	r3, r3, #32
 8003aae:	2b20      	cmp	r3, #32
 8003ab0:	d1cf      	bne.n	8003a52 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3710      	adds	r7, #16
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b084      	sub	sp, #16
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	699b      	ldr	r3, [r3, #24]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d151      	bne.n	8003b7a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ad6:	e022      	b.n	8003b1e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ade:	d01e      	beq.n	8003b1e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae0:	f7fe fe14 	bl	800270c <HAL_GetTick>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	1ad3      	subs	r3, r2, r3
 8003aea:	68ba      	ldr	r2, [r7, #8]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d302      	bcc.n	8003af6 <I2C_IsAcknowledgeFailed+0x3a>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d113      	bne.n	8003b1e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003afa:	f043 0220 	orr.w	r2, r3, #32
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2220      	movs	r2, #32
 8003b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	e02e      	b.n	8003b7c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	f003 0320 	and.w	r3, r3, #32
 8003b28:	2b20      	cmp	r3, #32
 8003b2a:	d1d5      	bne.n	8003ad8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2210      	movs	r2, #16
 8003b32:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f7ff fedd 	bl	80038fc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	6859      	ldr	r1, [r3, #4]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	4b0d      	ldr	r3, [pc, #52]	; (8003b84 <I2C_IsAcknowledgeFailed+0xc8>)
 8003b4e:	400b      	ands	r3, r1
 8003b50:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b56:	f043 0204 	orr.w	r2, r3, #4
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2220      	movs	r2, #32
 8003b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2200      	movs	r2, #0
 8003b72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e000      	b.n	8003b7c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8003b7a:	2300      	movs	r3, #0
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3710      	adds	r7, #16
 8003b80:	46bd      	mov	sp, r7
 8003b82:	bd80      	pop	{r7, pc}
 8003b84:	fe00e800 	.word	0xfe00e800

08003b88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	60f8      	str	r0, [r7, #12]
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	460b      	mov	r3, r1
 8003b94:	817b      	strh	r3, [r7, #10]
 8003b96:	4613      	mov	r3, r2
 8003b98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685a      	ldr	r2, [r3, #4]
 8003ba0:	69bb      	ldr	r3, [r7, #24]
 8003ba2:	0d5b      	lsrs	r3, r3, #21
 8003ba4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ba8:	4b0d      	ldr	r3, [pc, #52]	; (8003be0 <I2C_TransferConfig+0x58>)
 8003baa:	430b      	orrs	r3, r1
 8003bac:	43db      	mvns	r3, r3
 8003bae:	ea02 0103 	and.w	r1, r2, r3
 8003bb2:	897b      	ldrh	r3, [r7, #10]
 8003bb4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8003bb8:	7a7b      	ldrb	r3, [r7, #9]
 8003bba:	041b      	lsls	r3, r3, #16
 8003bbc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8003bc0:	431a      	orrs	r2, r3
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	431a      	orrs	r2, r3
 8003bc6:	69bb      	ldr	r3, [r7, #24]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	430a      	orrs	r2, r1
 8003bd0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8003bd2:	bf00      	nop
 8003bd4:	3714      	adds	r7, #20
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bdc:	4770      	bx	lr
 8003bde:	bf00      	nop
 8003be0:	03ff63ff 	.word	0x03ff63ff

08003be4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	d138      	bne.n	8003c6c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d101      	bne.n	8003c08 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003c04:	2302      	movs	r3, #2
 8003c06:	e032      	b.n	8003c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2224      	movs	r2, #36	; 0x24
 8003c14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 0201 	bic.w	r2, r2, #1
 8003c26:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003c36:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	683a      	ldr	r2, [r7, #0]
 8003c44:	430a      	orrs	r2, r1
 8003c46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f042 0201 	orr.w	r2, r2, #1
 8003c56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2220      	movs	r2, #32
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	e000      	b.n	8003c6e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c6c:	2302      	movs	r3, #2
  }
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	370c      	adds	r7, #12
 8003c72:	46bd      	mov	sp, r7
 8003c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c78:	4770      	bx	lr

08003c7a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c7a:	b480      	push	{r7}
 8003c7c:	b085      	sub	sp, #20
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
 8003c82:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b20      	cmp	r3, #32
 8003c8e:	d139      	bne.n	8003d04 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d101      	bne.n	8003c9e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c9a:	2302      	movs	r3, #2
 8003c9c:	e033      	b.n	8003d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2224      	movs	r2, #36	; 0x24
 8003caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0201 	bic.w	r2, r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ccc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	021b      	lsls	r3, r3, #8
 8003cd2:	68fa      	ldr	r2, [r7, #12]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f042 0201 	orr.w	r2, r2, #1
 8003cee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2220      	movs	r2, #32
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	e000      	b.n	8003d06 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003d04:	2302      	movs	r3, #2
  }
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3714      	adds	r7, #20
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d12:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d14:	b08f      	sub	sp, #60	; 0x3c
 8003d16:	af0a      	add	r7, sp, #40	; 0x28
 8003d18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e116      	b.n	8003f52 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d106      	bne.n	8003d44 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f7fd f9b4 	bl	80010ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2203      	movs	r2, #3
 8003d48:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d102      	bne.n	8003d5e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f002 fad8 	bl	8006318 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	603b      	str	r3, [r7, #0]
 8003d6e:	687e      	ldr	r6, [r7, #4]
 8003d70:	466d      	mov	r5, sp
 8003d72:	f106 0410 	add.w	r4, r6, #16
 8003d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d7c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d82:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d86:	1d33      	adds	r3, r6, #4
 8003d88:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d8a:	6838      	ldr	r0, [r7, #0]
 8003d8c:	f002 fa72 	bl	8006274 <USB_CoreInit>
 8003d90:	4603      	mov	r3, r0
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2202      	movs	r2, #2
 8003d9a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e0d7      	b.n	8003f52 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2100      	movs	r1, #0
 8003da8:	4618      	mov	r0, r3
 8003daa:	f002 fac6 	bl	800633a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dae:	2300      	movs	r3, #0
 8003db0:	73fb      	strb	r3, [r7, #15]
 8003db2:	e04a      	b.n	8003e4a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003db4:	7bfa      	ldrb	r2, [r7, #15]
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	4613      	mov	r3, r2
 8003dba:	00db      	lsls	r3, r3, #3
 8003dbc:	1a9b      	subs	r3, r3, r2
 8003dbe:	009b      	lsls	r3, r3, #2
 8003dc0:	440b      	add	r3, r1
 8003dc2:	333d      	adds	r3, #61	; 0x3d
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dc8:	7bfa      	ldrb	r2, [r7, #15]
 8003dca:	6879      	ldr	r1, [r7, #4]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	00db      	lsls	r3, r3, #3
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	333c      	adds	r3, #60	; 0x3c
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	7bfb      	ldrb	r3, [r7, #15]
 8003de0:	b298      	uxth	r0, r3
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	00db      	lsls	r3, r3, #3
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	3342      	adds	r3, #66	; 0x42
 8003df0:	4602      	mov	r2, r0
 8003df2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003df4:	7bfa      	ldrb	r2, [r7, #15]
 8003df6:	6879      	ldr	r1, [r7, #4]
 8003df8:	4613      	mov	r3, r2
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	1a9b      	subs	r3, r3, r2
 8003dfe:	009b      	lsls	r3, r3, #2
 8003e00:	440b      	add	r3, r1
 8003e02:	333f      	adds	r3, #63	; 0x3f
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e08:	7bfa      	ldrb	r2, [r7, #15]
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	1a9b      	subs	r3, r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3344      	adds	r3, #68	; 0x44
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	1a9b      	subs	r3, r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3348      	adds	r3, #72	; 0x48
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	1a9b      	subs	r3, r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	3350      	adds	r3, #80	; 0x50
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e44:	7bfb      	ldrb	r3, [r7, #15]
 8003e46:	3301      	adds	r3, #1
 8003e48:	73fb      	strb	r3, [r7, #15]
 8003e4a:	7bfa      	ldrb	r2, [r7, #15]
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	d3af      	bcc.n	8003db4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e54:	2300      	movs	r3, #0
 8003e56:	73fb      	strb	r3, [r7, #15]
 8003e58:	e044      	b.n	8003ee4 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e5a:	7bfa      	ldrb	r2, [r7, #15]
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	4613      	mov	r3, r2
 8003e60:	00db      	lsls	r3, r3, #3
 8003e62:	1a9b      	subs	r3, r3, r2
 8003e64:	009b      	lsls	r3, r3, #2
 8003e66:	440b      	add	r3, r1
 8003e68:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e70:	7bfa      	ldrb	r2, [r7, #15]
 8003e72:	6879      	ldr	r1, [r7, #4]
 8003e74:	4613      	mov	r3, r2
 8003e76:	00db      	lsls	r3, r3, #3
 8003e78:	1a9b      	subs	r3, r3, r2
 8003e7a:	009b      	lsls	r3, r3, #2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e86:	7bfa      	ldrb	r2, [r7, #15]
 8003e88:	6879      	ldr	r1, [r7, #4]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	00db      	lsls	r3, r3, #3
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8003e98:	2200      	movs	r2, #0
 8003e9a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e9c:	7bfa      	ldrb	r2, [r7, #15]
 8003e9e:	6879      	ldr	r1, [r7, #4]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	00db      	lsls	r3, r3, #3
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8003eae:	2200      	movs	r2, #0
 8003eb0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eb2:	7bfa      	ldrb	r2, [r7, #15]
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	1a9b      	subs	r3, r3, r2
 8003ebc:	009b      	lsls	r3, r3, #2
 8003ebe:	440b      	add	r3, r1
 8003ec0:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ec8:	7bfa      	ldrb	r2, [r7, #15]
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	00db      	lsls	r3, r3, #3
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	009b      	lsls	r3, r3, #2
 8003ed4:	440b      	add	r3, r1
 8003ed6:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8003eda:	2200      	movs	r2, #0
 8003edc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003ede:	7bfb      	ldrb	r3, [r7, #15]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	73fb      	strb	r3, [r7, #15]
 8003ee4:	7bfa      	ldrb	r2, [r7, #15]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	d3b5      	bcc.n	8003e5a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	603b      	str	r3, [r7, #0]
 8003ef4:	687e      	ldr	r6, [r7, #4]
 8003ef6:	466d      	mov	r5, sp
 8003ef8:	f106 0410 	add.w	r4, r6, #16
 8003efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f00:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f02:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f04:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f08:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f0c:	1d33      	adds	r3, r6, #4
 8003f0e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f10:	6838      	ldr	r0, [r7, #0]
 8003f12:	f002 fa3d 	bl	8006390 <USB_DevInit>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e014      	b.n	8003f52 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2201      	movs	r2, #1
 8003f34:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d102      	bne.n	8003f46 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 f80a 	bl	8003f5a <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f002 fbcd 	bl	80066ea <USB_DevDisconnect>

  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f5a <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b085      	sub	sp, #20
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	699b      	ldr	r3, [r3, #24]
 8003f7c:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f8c:	f043 0303 	orr.w	r3, r3, #3
 8003f90:	68fa      	ldr	r2, [r7, #12]
 8003f92:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3714      	adds	r7, #20
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa0:	4770      	bx	lr
	...

08003fa4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fa8:	4b05      	ldr	r3, [pc, #20]	; (8003fc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003fae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fb2:	6013      	str	r3, [r2, #0]
}
 8003fb4:	bf00      	nop
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40007000 	.word	0x40007000

08003fc4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003fc4:	b480      	push	{r7}
 8003fc6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003fc8:	4b04      	ldr	r3, [pc, #16]	; (8003fdc <HAL_PWREx_GetVoltageRange+0x18>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40007000 	.word	0x40007000

08003fe0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003fee:	d130      	bne.n	8004052 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003ff0:	4b23      	ldr	r3, [pc, #140]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003ff8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ffc:	d038      	beq.n	8004070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ffe:	4b20      	ldr	r3, [pc, #128]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004006:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004008:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800400c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800400e:	4b1d      	ldr	r3, [pc, #116]	; (8004084 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	2232      	movs	r2, #50	; 0x32
 8004014:	fb02 f303 	mul.w	r3, r2, r3
 8004018:	4a1b      	ldr	r2, [pc, #108]	; (8004088 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800401a:	fba2 2303 	umull	r2, r3, r2, r3
 800401e:	0c9b      	lsrs	r3, r3, #18
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004024:	e002      	b.n	800402c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	3b01      	subs	r3, #1
 800402a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800402c:	4b14      	ldr	r3, [pc, #80]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800402e:	695b      	ldr	r3, [r3, #20]
 8004030:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004034:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004038:	d102      	bne.n	8004040 <HAL_PWREx_ControlVoltageScaling+0x60>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	2b00      	cmp	r3, #0
 800403e:	d1f2      	bne.n	8004026 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004040:	4b0f      	ldr	r3, [pc, #60]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004042:	695b      	ldr	r3, [r3, #20]
 8004044:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800404c:	d110      	bne.n	8004070 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e00f      	b.n	8004072 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004052:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800405a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800405e:	d007      	beq.n	8004070 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004060:	4b07      	ldr	r3, [pc, #28]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004068:	4a05      	ldr	r2, [pc, #20]	; (8004080 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800406a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800406e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr
 800407e:	bf00      	nop
 8004080:	40007000 	.word	0x40007000
 8004084:	20000000 	.word	0x20000000
 8004088:	431bde83 	.word	0x431bde83

0800408c <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 800408c:	b480      	push	{r7}
 800408e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8004090:	4b05      	ldr	r3, [pc, #20]	; (80040a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	4a04      	ldr	r2, [pc, #16]	; (80040a8 <HAL_PWREx_EnableVddUSB+0x1c>)
 8004096:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800409a:	6053      	str	r3, [r2, #4]
}
 800409c:	bf00      	nop
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
 80040a6:	bf00      	nop
 80040a8:	40007000 	.word	0x40007000

080040ac <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi : QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af02      	add	r7, sp, #8
 80040b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80040b4:	f7fe fb2a 	bl	800270c <HAL_GetTick>
 80040b8:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d101      	bne.n	80040c4 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e063      	b.n	800418c <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d10b      	bne.n	80040e8 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2200      	movs	r2, #0
 80040d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7fc fee9 	bl	8000eb0 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80040de:	f241 3188 	movw	r1, #5000	; 0x1388
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f000 f858 	bl	8004198 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	3b01      	subs	r3, #1
 80040f8:	021a      	lsls	r2, r3, #8
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	430a      	orrs	r2, r1
 8004100:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2200      	movs	r2, #0
 800410c:	2120      	movs	r1, #32
 800410e:	6878      	ldr	r0, [r7, #4]
 8004110:	f000 f850 	bl	80041b4 <QSPI_WaitFlagStateUntilTimeout>
 8004114:	4603      	mov	r3, r0
 8004116:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8004118:	7afb      	ldrb	r3, [r7, #11]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d131      	bne.n	8004182 <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004128:	f023 0310 	bic.w	r3, r3, #16
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	6852      	ldr	r2, [r2, #4]
 8004130:	0611      	lsls	r1, r2, #24
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	68d2      	ldr	r2, [r2, #12]
 8004136:	4311      	orrs	r1, r2
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	6812      	ldr	r2, [r2, #0]
 800413c:	430b      	orrs	r3, r1
 800413e:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	685a      	ldr	r2, [r3, #4]
 8004146:	4b13      	ldr	r3, [pc, #76]	; (8004194 <HAL_QSPI_Init+0xe8>)
 8004148:	4013      	ands	r3, r2
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	6912      	ldr	r2, [r2, #16]
 800414e:	0411      	lsls	r1, r2, #16
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6952      	ldr	r2, [r2, #20]
 8004154:	4311      	orrs	r1, r2
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	6992      	ldr	r2, [r2, #24]
 800415a:	4311      	orrs	r1, r2
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	430b      	orrs	r3, r1
 8004162:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	681a      	ldr	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f042 0201 	orr.w	r2, r2, #1
 8004172:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 800418a:	7afb      	ldrb	r3, [r7, #11]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}
 8004194:	ffe0f8fe 	.word	0xffe0f8fe

08004198 <HAL_QSPI_SetTimeout>:
  * @param  hqspi : QSPI handle.
  * @param  Timeout : Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
 80041a0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout : Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	60f8      	str	r0, [r7, #12]
 80041bc:	60b9      	str	r1, [r7, #8]
 80041be:	603b      	str	r3, [r7, #0]
 80041c0:	4613      	mov	r3, r2
 80041c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041c4:	e01a      	b.n	80041fc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041cc:	d016      	beq.n	80041fc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ce:	f7fe fa9d 	bl	800270c <HAL_GetTick>
 80041d2:	4602      	mov	r2, r0
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	1ad3      	subs	r3, r2, r3
 80041d8:	69ba      	ldr	r2, [r7, #24]
 80041da:	429a      	cmp	r2, r3
 80041dc:	d302      	bcc.n	80041e4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 80041de:	69bb      	ldr	r3, [r7, #24]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d10b      	bne.n	80041fc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	2204      	movs	r2, #4
 80041e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041f0:	f043 0201 	orr.w	r2, r3, #1
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e00e      	b.n	800421a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689a      	ldr	r2, [r3, #8]
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	bf14      	ite	ne
 800420a:	2301      	movne	r3, #1
 800420c:	2300      	moveq	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	461a      	mov	r2, r3
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	429a      	cmp	r2, r3
 8004216:	d1d6      	bne.n	80041c6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3710      	adds	r7, #16
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
	...

08004224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b088      	sub	sp, #32
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d101      	bne.n	8004236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e3d4      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004236:	4ba1      	ldr	r3, [pc, #644]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004238:	689b      	ldr	r3, [r3, #8]
 800423a:	f003 030c 	and.w	r3, r3, #12
 800423e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004240:	4b9e      	ldr	r3, [pc, #632]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	f003 0303 	and.w	r3, r3, #3
 8004248:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0310 	and.w	r3, r3, #16
 8004252:	2b00      	cmp	r3, #0
 8004254:	f000 80e4 	beq.w	8004420 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d007      	beq.n	800426e <HAL_RCC_OscConfig+0x4a>
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	2b0c      	cmp	r3, #12
 8004262:	f040 808b 	bne.w	800437c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	2b01      	cmp	r3, #1
 800426a:	f040 8087 	bne.w	800437c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800426e:	4b93      	ldr	r3, [pc, #588]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d005      	beq.n	8004286 <HAL_RCC_OscConfig+0x62>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d101      	bne.n	8004286 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e3ac      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a1a      	ldr	r2, [r3, #32]
 800428a:	4b8c      	ldr	r3, [pc, #560]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d004      	beq.n	80042a0 <HAL_RCC_OscConfig+0x7c>
 8004296:	4b89      	ldr	r3, [pc, #548]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800429e:	e005      	b.n	80042ac <HAL_RCC_OscConfig+0x88>
 80042a0:	4b86      	ldr	r3, [pc, #536]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80042a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80042a6:	091b      	lsrs	r3, r3, #4
 80042a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d223      	bcs.n	80042f8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a1b      	ldr	r3, [r3, #32]
 80042b4:	4618      	mov	r0, r3
 80042b6:	f000 fd41 	bl	8004d3c <RCC_SetFlashLatencyFromMSIRange>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e38d      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042c4:	4b7d      	ldr	r3, [pc, #500]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a7c      	ldr	r2, [pc, #496]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80042ca:	f043 0308 	orr.w	r3, r3, #8
 80042ce:	6013      	str	r3, [r2, #0]
 80042d0:	4b7a      	ldr	r3, [pc, #488]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a1b      	ldr	r3, [r3, #32]
 80042dc:	4977      	ldr	r1, [pc, #476]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80042de:	4313      	orrs	r3, r2
 80042e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80042e2:	4b76      	ldr	r3, [pc, #472]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	021b      	lsls	r3, r3, #8
 80042f0:	4972      	ldr	r1, [pc, #456]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	604b      	str	r3, [r1, #4]
 80042f6:	e025      	b.n	8004344 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80042f8:	4b70      	ldr	r3, [pc, #448]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a6f      	ldr	r2, [pc, #444]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80042fe:	f043 0308 	orr.w	r3, r3, #8
 8004302:	6013      	str	r3, [r2, #0]
 8004304:	4b6d      	ldr	r3, [pc, #436]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6a1b      	ldr	r3, [r3, #32]
 8004310:	496a      	ldr	r1, [pc, #424]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004312:	4313      	orrs	r3, r2
 8004314:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004316:	4b69      	ldr	r3, [pc, #420]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004318:	685b      	ldr	r3, [r3, #4]
 800431a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	021b      	lsls	r3, r3, #8
 8004324:	4965      	ldr	r1, [pc, #404]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004326:	4313      	orrs	r3, r2
 8004328:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d109      	bne.n	8004344 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a1b      	ldr	r3, [r3, #32]
 8004334:	4618      	mov	r0, r3
 8004336:	f000 fd01 	bl	8004d3c <RCC_SetFlashLatencyFromMSIRange>
 800433a:	4603      	mov	r3, r0
 800433c:	2b00      	cmp	r3, #0
 800433e:	d001      	beq.n	8004344 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	e34d      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004344:	f000 fc36 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004348:	4602      	mov	r2, r0
 800434a:	4b5c      	ldr	r3, [pc, #368]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	091b      	lsrs	r3, r3, #4
 8004350:	f003 030f 	and.w	r3, r3, #15
 8004354:	495a      	ldr	r1, [pc, #360]	; (80044c0 <HAL_RCC_OscConfig+0x29c>)
 8004356:	5ccb      	ldrb	r3, [r1, r3]
 8004358:	f003 031f 	and.w	r3, r3, #31
 800435c:	fa22 f303 	lsr.w	r3, r2, r3
 8004360:	4a58      	ldr	r2, [pc, #352]	; (80044c4 <HAL_RCC_OscConfig+0x2a0>)
 8004362:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004364:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <HAL_RCC_OscConfig+0x2a4>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4618      	mov	r0, r3
 800436a:	f7fe f97f 	bl	800266c <HAL_InitTick>
 800436e:	4603      	mov	r3, r0
 8004370:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004372:	7bfb      	ldrb	r3, [r7, #15]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d052      	beq.n	800441e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004378:	7bfb      	ldrb	r3, [r7, #15]
 800437a:	e331      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	699b      	ldr	r3, [r3, #24]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d032      	beq.n	80043ea <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004384:	4b4d      	ldr	r3, [pc, #308]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a4c      	ldr	r2, [pc, #304]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 800438a:	f043 0301 	orr.w	r3, r3, #1
 800438e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004390:	f7fe f9bc 	bl	800270c <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004396:	e008      	b.n	80043aa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004398:	f7fe f9b8 	bl	800270c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e31a      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80043aa:	4b44      	ldr	r3, [pc, #272]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0302 	and.w	r3, r3, #2
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a40      	ldr	r2, [pc, #256]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80043bc:	f043 0308 	orr.w	r3, r3, #8
 80043c0:	6013      	str	r3, [r2, #0]
 80043c2:	4b3e      	ldr	r3, [pc, #248]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	493b      	ldr	r1, [pc, #236]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80043d0:	4313      	orrs	r3, r2
 80043d2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80043d4:	4b39      	ldr	r3, [pc, #228]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	69db      	ldr	r3, [r3, #28]
 80043e0:	021b      	lsls	r3, r3, #8
 80043e2:	4936      	ldr	r1, [pc, #216]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
 80043e8:	e01a      	b.n	8004420 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80043ea:	4b34      	ldr	r3, [pc, #208]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a33      	ldr	r2, [pc, #204]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80043f0:	f023 0301 	bic.w	r3, r3, #1
 80043f4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80043f6:	f7fe f989 	bl	800270c <HAL_GetTick>
 80043fa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80043fc:	e008      	b.n	8004410 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80043fe:	f7fe f985 	bl	800270c <HAL_GetTick>
 8004402:	4602      	mov	r2, r0
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	1ad3      	subs	r3, r2, r3
 8004408:	2b02      	cmp	r3, #2
 800440a:	d901      	bls.n	8004410 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 800440c:	2303      	movs	r3, #3
 800440e:	e2e7      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004410:	4b2a      	ldr	r3, [pc, #168]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f0      	bne.n	80043fe <HAL_RCC_OscConfig+0x1da>
 800441c:	e000      	b.n	8004420 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800441e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f003 0301 	and.w	r3, r3, #1
 8004428:	2b00      	cmp	r3, #0
 800442a:	d074      	beq.n	8004516 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800442c:	69bb      	ldr	r3, [r7, #24]
 800442e:	2b08      	cmp	r3, #8
 8004430:	d005      	beq.n	800443e <HAL_RCC_OscConfig+0x21a>
 8004432:	69bb      	ldr	r3, [r7, #24]
 8004434:	2b0c      	cmp	r3, #12
 8004436:	d10e      	bne.n	8004456 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2b03      	cmp	r3, #3
 800443c:	d10b      	bne.n	8004456 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800443e:	4b1f      	ldr	r3, [pc, #124]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d064      	beq.n	8004514 <HAL_RCC_OscConfig+0x2f0>
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d160      	bne.n	8004514 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	e2c4      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445e:	d106      	bne.n	800446e <HAL_RCC_OscConfig+0x24a>
 8004460:	4b16      	ldr	r3, [pc, #88]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4a15      	ldr	r2, [pc, #84]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004466:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800446a:	6013      	str	r3, [r2, #0]
 800446c:	e01d      	b.n	80044aa <HAL_RCC_OscConfig+0x286>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004476:	d10c      	bne.n	8004492 <HAL_RCC_OscConfig+0x26e>
 8004478:	4b10      	ldr	r3, [pc, #64]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	4a0f      	ldr	r2, [pc, #60]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 800447e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004482:	6013      	str	r3, [r2, #0]
 8004484:	4b0d      	ldr	r3, [pc, #52]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a0c      	ldr	r2, [pc, #48]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 800448a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800448e:	6013      	str	r3, [r2, #0]
 8004490:	e00b      	b.n	80044aa <HAL_RCC_OscConfig+0x286>
 8004492:	4b0a      	ldr	r3, [pc, #40]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	4a09      	ldr	r2, [pc, #36]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 8004498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800449c:	6013      	str	r3, [r2, #0]
 800449e:	4b07      	ldr	r3, [pc, #28]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a06      	ldr	r2, [pc, #24]	; (80044bc <HAL_RCC_OscConfig+0x298>)
 80044a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80044a8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d01c      	beq.n	80044ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044b2:	f7fe f92b 	bl	800270c <HAL_GetTick>
 80044b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044b8:	e011      	b.n	80044de <HAL_RCC_OscConfig+0x2ba>
 80044ba:	bf00      	nop
 80044bc:	40021000 	.word	0x40021000
 80044c0:	080076d0 	.word	0x080076d0
 80044c4:	20000000 	.word	0x20000000
 80044c8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044cc:	f7fe f91e 	bl	800270c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e280      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80044de:	4baf      	ldr	r3, [pc, #700]	; (800479c <HAL_RCC_OscConfig+0x578>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCC_OscConfig+0x2a8>
 80044ea:	e014      	b.n	8004516 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044ec:	f7fe f90e 	bl	800270c <HAL_GetTick>
 80044f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80044f2:	e008      	b.n	8004506 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80044f4:	f7fe f90a 	bl	800270c <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	693b      	ldr	r3, [r7, #16]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	2b64      	cmp	r3, #100	; 0x64
 8004500:	d901      	bls.n	8004506 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	e26c      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004506:	4ba5      	ldr	r3, [pc, #660]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450e:	2b00      	cmp	r3, #0
 8004510:	d1f0      	bne.n	80044f4 <HAL_RCC_OscConfig+0x2d0>
 8004512:	e000      	b.n	8004516 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	2b00      	cmp	r3, #0
 8004520:	d060      	beq.n	80045e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b04      	cmp	r3, #4
 8004526:	d005      	beq.n	8004534 <HAL_RCC_OscConfig+0x310>
 8004528:	69bb      	ldr	r3, [r7, #24]
 800452a:	2b0c      	cmp	r3, #12
 800452c:	d119      	bne.n	8004562 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2b02      	cmp	r3, #2
 8004532:	d116      	bne.n	8004562 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004534:	4b99      	ldr	r3, [pc, #612]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_RCC_OscConfig+0x328>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d101      	bne.n	800454c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e249      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800454c:	4b93      	ldr	r3, [pc, #588]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	061b      	lsls	r3, r3, #24
 800455a:	4990      	ldr	r1, [pc, #576]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800455c:	4313      	orrs	r3, r2
 800455e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004560:	e040      	b.n	80045e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	68db      	ldr	r3, [r3, #12]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d023      	beq.n	80045b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800456a:	4b8c      	ldr	r3, [pc, #560]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	4a8b      	ldr	r2, [pc, #556]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004576:	f7fe f8c9 	bl	800270c <HAL_GetTick>
 800457a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800457c:	e008      	b.n	8004590 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800457e:	f7fe f8c5 	bl	800270c <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	693b      	ldr	r3, [r7, #16]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d901      	bls.n	8004590 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800458c:	2303      	movs	r3, #3
 800458e:	e227      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004590:	4b82      	ldr	r3, [pc, #520]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004598:	2b00      	cmp	r3, #0
 800459a:	d0f0      	beq.n	800457e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800459c:	4b7f      	ldr	r3, [pc, #508]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	691b      	ldr	r3, [r3, #16]
 80045a8:	061b      	lsls	r3, r3, #24
 80045aa:	497c      	ldr	r1, [pc, #496]	; (800479c <HAL_RCC_OscConfig+0x578>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	604b      	str	r3, [r1, #4]
 80045b0:	e018      	b.n	80045e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80045b2:	4b7a      	ldr	r3, [pc, #488]	; (800479c <HAL_RCC_OscConfig+0x578>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a79      	ldr	r2, [pc, #484]	; (800479c <HAL_RCC_OscConfig+0x578>)
 80045b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045be:	f7fe f8a5 	bl	800270c <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80045c6:	f7fe f8a1 	bl	800270c <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e203      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80045d8:	4b70      	ldr	r3, [pc, #448]	; (800479c <HAL_RCC_OscConfig+0x578>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1f0      	bne.n	80045c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f003 0308 	and.w	r3, r3, #8
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d03c      	beq.n	800466a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d01c      	beq.n	8004632 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80045f8:	4b68      	ldr	r3, [pc, #416]	; (800479c <HAL_RCC_OscConfig+0x578>)
 80045fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80045fe:	4a67      	ldr	r2, [pc, #412]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004600:	f043 0301 	orr.w	r3, r3, #1
 8004604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004608:	f7fe f880 	bl	800270c <HAL_GetTick>
 800460c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800460e:	e008      	b.n	8004622 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004610:	f7fe f87c 	bl	800270c <HAL_GetTick>
 8004614:	4602      	mov	r2, r0
 8004616:	693b      	ldr	r3, [r7, #16]
 8004618:	1ad3      	subs	r3, r2, r3
 800461a:	2b02      	cmp	r3, #2
 800461c:	d901      	bls.n	8004622 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800461e:	2303      	movs	r3, #3
 8004620:	e1de      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004622:	4b5e      	ldr	r3, [pc, #376]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b00      	cmp	r3, #0
 800462e:	d0ef      	beq.n	8004610 <HAL_RCC_OscConfig+0x3ec>
 8004630:	e01b      	b.n	800466a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004632:	4b5a      	ldr	r3, [pc, #360]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004638:	4a58      	ldr	r2, [pc, #352]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800463a:	f023 0301 	bic.w	r3, r3, #1
 800463e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004642:	f7fe f863 	bl	800270c <HAL_GetTick>
 8004646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004648:	e008      	b.n	800465c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800464a:	f7fe f85f 	bl	800270c <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	693b      	ldr	r3, [r7, #16]
 8004652:	1ad3      	subs	r3, r2, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d901      	bls.n	800465c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004658:	2303      	movs	r3, #3
 800465a:	e1c1      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800465c:	4b4f      	ldr	r3, [pc, #316]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800465e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004662:	f003 0302 	and.w	r3, r3, #2
 8004666:	2b00      	cmp	r3, #0
 8004668:	d1ef      	bne.n	800464a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0304 	and.w	r3, r3, #4
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80a6 	beq.w	80047c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004678:	2300      	movs	r3, #0
 800467a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800467c:	4b47      	ldr	r3, [pc, #284]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800467e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004684:	2b00      	cmp	r3, #0
 8004686:	d10d      	bne.n	80046a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004688:	4b44      	ldr	r3, [pc, #272]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800468a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800468c:	4a43      	ldr	r2, [pc, #268]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800468e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004692:	6593      	str	r3, [r2, #88]	; 0x58
 8004694:	4b41      	ldr	r3, [pc, #260]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800469c:	60bb      	str	r3, [r7, #8]
 800469e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80046a0:	2301      	movs	r3, #1
 80046a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046a4:	4b3e      	ldr	r3, [pc, #248]	; (80047a0 <HAL_RCC_OscConfig+0x57c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d118      	bne.n	80046e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80046b0:	4b3b      	ldr	r3, [pc, #236]	; (80047a0 <HAL_RCC_OscConfig+0x57c>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a3a      	ldr	r2, [pc, #232]	; (80047a0 <HAL_RCC_OscConfig+0x57c>)
 80046b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046bc:	f7fe f826 	bl	800270c <HAL_GetTick>
 80046c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046c2:	e008      	b.n	80046d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c4:	f7fe f822 	bl	800270c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	2b02      	cmp	r3, #2
 80046d0:	d901      	bls.n	80046d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80046d2:	2303      	movs	r3, #3
 80046d4:	e184      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80046d6:	4b32      	ldr	r3, [pc, #200]	; (80047a0 <HAL_RCC_OscConfig+0x57c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d0f0      	beq.n	80046c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	689b      	ldr	r3, [r3, #8]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d108      	bne.n	80046fc <HAL_RCC_OscConfig+0x4d8>
 80046ea:	4b2c      	ldr	r3, [pc, #176]	; (800479c <HAL_RCC_OscConfig+0x578>)
 80046ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046f0:	4a2a      	ldr	r2, [pc, #168]	; (800479c <HAL_RCC_OscConfig+0x578>)
 80046f2:	f043 0301 	orr.w	r3, r3, #1
 80046f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80046fa:	e024      	b.n	8004746 <HAL_RCC_OscConfig+0x522>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	2b05      	cmp	r3, #5
 8004702:	d110      	bne.n	8004726 <HAL_RCC_OscConfig+0x502>
 8004704:	4b25      	ldr	r3, [pc, #148]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470a:	4a24      	ldr	r2, [pc, #144]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800470c:	f043 0304 	orr.w	r3, r3, #4
 8004710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004714:	4b21      	ldr	r3, [pc, #132]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471a:	4a20      	ldr	r2, [pc, #128]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800471c:	f043 0301 	orr.w	r3, r3, #1
 8004720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004724:	e00f      	b.n	8004746 <HAL_RCC_OscConfig+0x522>
 8004726:	4b1d      	ldr	r3, [pc, #116]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004728:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472c:	4a1b      	ldr	r2, [pc, #108]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800472e:	f023 0301 	bic.w	r3, r3, #1
 8004732:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004736:	4b19      	ldr	r3, [pc, #100]	; (800479c <HAL_RCC_OscConfig+0x578>)
 8004738:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800473c:	4a17      	ldr	r2, [pc, #92]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800473e:	f023 0304 	bic.w	r3, r3, #4
 8004742:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d016      	beq.n	800477c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800474e:	f7fd ffdd 	bl	800270c <HAL_GetTick>
 8004752:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004754:	e00a      	b.n	800476c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004756:	f7fd ffd9 	bl	800270c <HAL_GetTick>
 800475a:	4602      	mov	r2, r0
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	1ad3      	subs	r3, r2, r3
 8004760:	f241 3288 	movw	r2, #5000	; 0x1388
 8004764:	4293      	cmp	r3, r2
 8004766:	d901      	bls.n	800476c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8004768:	2303      	movs	r3, #3
 800476a:	e139      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800476c:	4b0b      	ldr	r3, [pc, #44]	; (800479c <HAL_RCC_OscConfig+0x578>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0ed      	beq.n	8004756 <HAL_RCC_OscConfig+0x532>
 800477a:	e01a      	b.n	80047b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800477c:	f7fd ffc6 	bl	800270c <HAL_GetTick>
 8004780:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004782:	e00f      	b.n	80047a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004784:	f7fd ffc2 	bl	800270c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d906      	bls.n	80047a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e122      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
 800479a:	bf00      	nop
 800479c:	40021000 	.word	0x40021000
 80047a0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80047a4:	4b90      	ldr	r3, [pc, #576]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80047a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047aa:	f003 0302 	and.w	r3, r3, #2
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d1e8      	bne.n	8004784 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80047b2:	7ffb      	ldrb	r3, [r7, #31]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d105      	bne.n	80047c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80047b8:	4b8b      	ldr	r3, [pc, #556]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80047ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047bc:	4a8a      	ldr	r2, [pc, #552]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80047be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80047c2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8108 	beq.w	80049de <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	f040 80d0 	bne.w	8004978 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80047d8:	4b83      	ldr	r3, [pc, #524]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047de:	697b      	ldr	r3, [r7, #20]
 80047e0:	f003 0203 	and.w	r2, r3, #3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d130      	bne.n	800484e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f6:	3b01      	subs	r3, #1
 80047f8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fa:	429a      	cmp	r2, r3
 80047fc:	d127      	bne.n	800484e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004808:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800480a:	429a      	cmp	r2, r3
 800480c:	d11f      	bne.n	800484e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004818:	2a07      	cmp	r2, #7
 800481a:	bf14      	ite	ne
 800481c:	2201      	movne	r2, #1
 800481e:	2200      	moveq	r2, #0
 8004820:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004822:	4293      	cmp	r3, r2
 8004824:	d113      	bne.n	800484e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004830:	085b      	lsrs	r3, r3, #1
 8004832:	3b01      	subs	r3, #1
 8004834:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004836:	429a      	cmp	r2, r3
 8004838:	d109      	bne.n	800484e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004844:	085b      	lsrs	r3, r3, #1
 8004846:	3b01      	subs	r3, #1
 8004848:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800484a:	429a      	cmp	r2, r3
 800484c:	d06e      	beq.n	800492c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	2b0c      	cmp	r3, #12
 8004852:	d069      	beq.n	8004928 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004854:	4b64      	ldr	r3, [pc, #400]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800485c:	2b00      	cmp	r3, #0
 800485e:	d105      	bne.n	800486c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004860:	4b61      	ldr	r3, [pc, #388]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004868:	2b00      	cmp	r3, #0
 800486a:	d001      	beq.n	8004870 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e0b7      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004870:	4b5d      	ldr	r3, [pc, #372]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a5c      	ldr	r2, [pc, #368]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 8004876:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800487a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800487c:	f7fd ff46 	bl	800270c <HAL_GetTick>
 8004880:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004882:	e008      	b.n	8004896 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004884:	f7fd ff42 	bl	800270c <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b02      	cmp	r3, #2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0a4      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004896:	4b54      	ldr	r3, [pc, #336]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80048a2:	4b51      	ldr	r3, [pc, #324]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	4b51      	ldr	r3, [pc, #324]	; (80049ec <HAL_RCC_OscConfig+0x7c8>)
 80048a8:	4013      	ands	r3, r2
 80048aa:	687a      	ldr	r2, [r7, #4]
 80048ac:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80048ae:	687a      	ldr	r2, [r7, #4]
 80048b0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80048b2:	3a01      	subs	r2, #1
 80048b4:	0112      	lsls	r2, r2, #4
 80048b6:	4311      	orrs	r1, r2
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80048bc:	0212      	lsls	r2, r2, #8
 80048be:	4311      	orrs	r1, r2
 80048c0:	687a      	ldr	r2, [r7, #4]
 80048c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80048c4:	0852      	lsrs	r2, r2, #1
 80048c6:	3a01      	subs	r2, #1
 80048c8:	0552      	lsls	r2, r2, #21
 80048ca:	4311      	orrs	r1, r2
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80048d0:	0852      	lsrs	r2, r2, #1
 80048d2:	3a01      	subs	r2, #1
 80048d4:	0652      	lsls	r2, r2, #25
 80048d6:	4311      	orrs	r1, r2
 80048d8:	687a      	ldr	r2, [r7, #4]
 80048da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80048dc:	0912      	lsrs	r2, r2, #4
 80048de:	0452      	lsls	r2, r2, #17
 80048e0:	430a      	orrs	r2, r1
 80048e2:	4941      	ldr	r1, [pc, #260]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80048e8:	4b3f      	ldr	r3, [pc, #252]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a3e      	ldr	r2, [pc, #248]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80048ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048f2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80048f4:	4b3c      	ldr	r3, [pc, #240]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	4a3b      	ldr	r2, [pc, #236]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80048fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80048fe:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004900:	f7fd ff04 	bl	800270c <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004908:	f7fd ff00 	bl	800270c <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e062      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800491a:	4b33      	ldr	r3, [pc, #204]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004926:	e05a      	b.n	80049de <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004928:	2301      	movs	r3, #1
 800492a:	e059      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800492c:	4b2e      	ldr	r3, [pc, #184]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d152      	bne.n	80049de <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004938:	4b2b      	ldr	r3, [pc, #172]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a2a      	ldr	r2, [pc, #168]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 800493e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004942:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004944:	4b28      	ldr	r3, [pc, #160]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 8004946:	68db      	ldr	r3, [r3, #12]
 8004948:	4a27      	ldr	r2, [pc, #156]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 800494a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800494e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004950:	f7fd fedc 	bl	800270c <HAL_GetTick>
 8004954:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004956:	e008      	b.n	800496a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004958:	f7fd fed8 	bl	800270c <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b02      	cmp	r3, #2
 8004964:	d901      	bls.n	800496a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8004966:	2303      	movs	r3, #3
 8004968:	e03a      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800496a:	4b1f      	ldr	r3, [pc, #124]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d0f0      	beq.n	8004958 <HAL_RCC_OscConfig+0x734>
 8004976:	e032      	b.n	80049de <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	2b0c      	cmp	r3, #12
 800497c:	d02d      	beq.n	80049da <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800497e:	4b1a      	ldr	r3, [pc, #104]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4a19      	ldr	r2, [pc, #100]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 8004984:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004988:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800498a:	4b17      	ldr	r3, [pc, #92]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d105      	bne.n	80049a2 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004996:	4b14      	ldr	r3, [pc, #80]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 8004998:	68db      	ldr	r3, [r3, #12]
 800499a:	4a13      	ldr	r2, [pc, #76]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 800499c:	f023 0303 	bic.w	r3, r3, #3
 80049a0:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80049a2:	4b11      	ldr	r3, [pc, #68]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	4a10      	ldr	r2, [pc, #64]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80049a8:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80049ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049b0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049b2:	f7fd feab 	bl	800270c <HAL_GetTick>
 80049b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049b8:	e008      	b.n	80049cc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049ba:	f7fd fea7 	bl	800270c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e009      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80049cc:	4b06      	ldr	r3, [pc, #24]	; (80049e8 <HAL_RCC_OscConfig+0x7c4>)
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1f0      	bne.n	80049ba <HAL_RCC_OscConfig+0x796>
 80049d8:	e001      	b.n	80049de <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 80049de:	2300      	movs	r3, #0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3720      	adds	r7, #32
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}
 80049e8:	40021000 	.word	0x40021000
 80049ec:	f99d808c 	.word	0xf99d808c

080049f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049f0:	b580      	push	{r7, lr}
 80049f2:	b084      	sub	sp, #16
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d101      	bne.n	8004a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0c8      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004a04:	4b66      	ldr	r3, [pc, #408]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0307 	and.w	r3, r3, #7
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d910      	bls.n	8004a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a12:	4b63      	ldr	r3, [pc, #396]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 0207 	bic.w	r2, r3, #7
 8004a1a:	4961      	ldr	r1, [pc, #388]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a22:	4b5f      	ldr	r3, [pc, #380]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f003 0307 	and.w	r3, r3, #7
 8004a2a:	683a      	ldr	r2, [r7, #0]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d001      	beq.n	8004a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	e0b0      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f003 0301 	and.w	r3, r3, #1
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d04c      	beq.n	8004ada <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b03      	cmp	r3, #3
 8004a46:	d107      	bne.n	8004a58 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004a48:	4b56      	ldr	r3, [pc, #344]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d121      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e09e      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b02      	cmp	r3, #2
 8004a5e:	d107      	bne.n	8004a70 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004a60:	4b50      	ldr	r3, [pc, #320]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d115      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e092      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d107      	bne.n	8004a88 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004a78:	4b4a      	ldr	r3, [pc, #296]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a84:	2301      	movs	r3, #1
 8004a86:	e086      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a88:	4b46      	ldr	r3, [pc, #280]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d101      	bne.n	8004a98 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e07e      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004a98:	4b42      	ldr	r3, [pc, #264]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	f023 0203 	bic.w	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	685b      	ldr	r3, [r3, #4]
 8004aa4:	493f      	ldr	r1, [pc, #252]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004aaa:	f7fd fe2f 	bl	800270c <HAL_GetTick>
 8004aae:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab0:	e00a      	b.n	8004ac8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ab2:	f7fd fe2b 	bl	800270c <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d901      	bls.n	8004ac8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8004ac4:	2303      	movs	r3, #3
 8004ac6:	e066      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ac8:	4b36      	ldr	r3, [pc, #216]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 020c 	and.w	r2, r3, #12
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	429a      	cmp	r2, r3
 8004ad8:	d1eb      	bne.n	8004ab2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d008      	beq.n	8004af8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004ae8:	689b      	ldr	r3, [r3, #8]
 8004aea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	492c      	ldr	r1, [pc, #176]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004af4:	4313      	orrs	r3, r2
 8004af6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004af8:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0307 	and.w	r3, r3, #7
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	429a      	cmp	r2, r3
 8004b04:	d210      	bcs.n	8004b28 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b06:	4b26      	ldr	r3, [pc, #152]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f023 0207 	bic.w	r2, r3, #7
 8004b0e:	4924      	ldr	r1, [pc, #144]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b16:	4b22      	ldr	r3, [pc, #136]	; (8004ba0 <HAL_RCC_ClockConfig+0x1b0>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	683a      	ldr	r2, [r7, #0]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d001      	beq.n	8004b28 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	e036      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0304 	and.w	r3, r3, #4
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d008      	beq.n	8004b46 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b34:	4b1b      	ldr	r3, [pc, #108]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	4918      	ldr	r1, [pc, #96]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b42:	4313      	orrs	r3, r2
 8004b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f003 0308 	and.w	r3, r3, #8
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d009      	beq.n	8004b66 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b52:	4b14      	ldr	r3, [pc, #80]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	00db      	lsls	r3, r3, #3
 8004b60:	4910      	ldr	r1, [pc, #64]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b62:	4313      	orrs	r3, r2
 8004b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004b66:	f000 f825 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_RCC_ClockConfig+0x1b4>)
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 030f 	and.w	r3, r3, #15
 8004b76:	490c      	ldr	r1, [pc, #48]	; (8004ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8004b78:	5ccb      	ldrb	r3, [r1, r3]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b82:	4a0a      	ldr	r2, [pc, #40]	; (8004bac <HAL_RCC_ClockConfig+0x1bc>)
 8004b84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004b86:	4b0a      	ldr	r3, [pc, #40]	; (8004bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	f7fd fd6e 	bl	800266c <HAL_InitTick>
 8004b90:	4603      	mov	r3, r0
 8004b92:	72fb      	strb	r3, [r7, #11]

  return status;
 8004b94:	7afb      	ldrb	r3, [r7, #11]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	080076d0 	.word	0x080076d0
 8004bac:	20000000 	.word	0x20000000
 8004bb0:	20000004 	.word	0x20000004

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b089      	sub	sp, #36	; 0x24
 8004bb8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	61fb      	str	r3, [r7, #28]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004bc2:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 030c 	and.w	r3, r3, #12
 8004bca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004bcc:	4b3b      	ldr	r3, [pc, #236]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	f003 0303 	and.w	r3, r3, #3
 8004bd4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d005      	beq.n	8004be8 <HAL_RCC_GetSysClockFreq+0x34>
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	d121      	bne.n	8004c26 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d11e      	bne.n	8004c26 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004be8:	4b34      	ldr	r3, [pc, #208]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0308 	and.w	r3, r3, #8
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d107      	bne.n	8004c04 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004bf4:	4b31      	ldr	r3, [pc, #196]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004bf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004bfa:	0a1b      	lsrs	r3, r3, #8
 8004bfc:	f003 030f 	and.w	r3, r3, #15
 8004c00:	61fb      	str	r3, [r7, #28]
 8004c02:	e005      	b.n	8004c10 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004c04:	4b2d      	ldr	r3, [pc, #180]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	091b      	lsrs	r3, r3, #4
 8004c0a:	f003 030f 	and.w	r3, r3, #15
 8004c0e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004c10:	4a2b      	ldr	r2, [pc, #172]	; (8004cc0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004c12:	69fb      	ldr	r3, [r7, #28]
 8004c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c18:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10d      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004c20:	69fb      	ldr	r3, [r7, #28]
 8004c22:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004c24:	e00a      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b04      	cmp	r3, #4
 8004c2a:	d102      	bne.n	8004c32 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c2e:	61bb      	str	r3, [r7, #24]
 8004c30:	e004      	b.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	2b08      	cmp	r3, #8
 8004c36:	d101      	bne.n	8004c3c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004c38:	4b23      	ldr	r3, [pc, #140]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c3a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004c3c:	693b      	ldr	r3, [r7, #16]
 8004c3e:	2b0c      	cmp	r3, #12
 8004c40:	d134      	bne.n	8004cac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004c42:	4b1e      	ldr	r3, [pc, #120]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f003 0303 	and.w	r3, r3, #3
 8004c4a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d003      	beq.n	8004c5a <HAL_RCC_GetSysClockFreq+0xa6>
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b03      	cmp	r3, #3
 8004c56:	d003      	beq.n	8004c60 <HAL_RCC_GetSysClockFreq+0xac>
 8004c58:	e005      	b.n	8004c66 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004c5a:	4b1a      	ldr	r3, [pc, #104]	; (8004cc4 <HAL_RCC_GetSysClockFreq+0x110>)
 8004c5c:	617b      	str	r3, [r7, #20]
      break;
 8004c5e:	e005      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004c60:	4b19      	ldr	r3, [pc, #100]	; (8004cc8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004c62:	617b      	str	r3, [r7, #20]
      break;
 8004c64:	e002      	b.n	8004c6c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	617b      	str	r3, [r7, #20]
      break;
 8004c6a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004c6c:	4b13      	ldr	r3, [pc, #76]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c6e:	68db      	ldr	r3, [r3, #12]
 8004c70:	091b      	lsrs	r3, r3, #4
 8004c72:	f003 0307 	and.w	r3, r3, #7
 8004c76:	3301      	adds	r3, #1
 8004c78:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004c7a:	4b10      	ldr	r3, [pc, #64]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c7c:	68db      	ldr	r3, [r3, #12]
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	fb02 f203 	mul.w	r2, r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c90:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004c92:	4b0a      	ldr	r3, [pc, #40]	; (8004cbc <HAL_RCC_GetSysClockFreq+0x108>)
 8004c94:	68db      	ldr	r3, [r3, #12]
 8004c96:	0e5b      	lsrs	r3, r3, #25
 8004c98:	f003 0303 	and.w	r3, r3, #3
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	005b      	lsls	r3, r3, #1
 8004ca0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004ca2:	697a      	ldr	r2, [r7, #20]
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004caa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004cac:	69bb      	ldr	r3, [r7, #24]
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	3724      	adds	r7, #36	; 0x24
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
 8004cba:	bf00      	nop
 8004cbc:	40021000 	.word	0x40021000
 8004cc0:	080076e8 	.word	0x080076e8
 8004cc4:	00f42400 	.word	0x00f42400
 8004cc8:	007a1200 	.word	0x007a1200

08004ccc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004cd0:	4b03      	ldr	r3, [pc, #12]	; (8004ce0 <HAL_RCC_GetHCLKFreq+0x14>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	20000000 	.word	0x20000000

08004ce4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004ce8:	f7ff fff0 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004cec:	4602      	mov	r2, r0
 8004cee:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004cf0:	689b      	ldr	r3, [r3, #8]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	f003 0307 	and.w	r3, r3, #7
 8004cf8:	4904      	ldr	r1, [pc, #16]	; (8004d0c <HAL_RCC_GetPCLK1Freq+0x28>)
 8004cfa:	5ccb      	ldrb	r3, [r1, r3]
 8004cfc:	f003 031f 	and.w	r3, r3, #31
 8004d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	bd80      	pop	{r7, pc}
 8004d08:	40021000 	.word	0x40021000
 8004d0c:	080076e0 	.word	0x080076e0

08004d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004d14:	f7ff ffda 	bl	8004ccc <HAL_RCC_GetHCLKFreq>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	4b06      	ldr	r3, [pc, #24]	; (8004d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004d1c:	689b      	ldr	r3, [r3, #8]
 8004d1e:	0adb      	lsrs	r3, r3, #11
 8004d20:	f003 0307 	and.w	r3, r3, #7
 8004d24:	4904      	ldr	r1, [pc, #16]	; (8004d38 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004d26:	5ccb      	ldrb	r3, [r1, r3]
 8004d28:	f003 031f 	and.w	r3, r3, #31
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40021000 	.word	0x40021000
 8004d38:	080076e0 	.word	0x080076e0

08004d3c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b086      	sub	sp, #24
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004d44:	2300      	movs	r3, #0
 8004d46:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004d48:	4b2a      	ldr	r3, [pc, #168]	; (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d003      	beq.n	8004d5c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004d54:	f7ff f936 	bl	8003fc4 <HAL_PWREx_GetVoltageRange>
 8004d58:	6178      	str	r0, [r7, #20]
 8004d5a:	e014      	b.n	8004d86 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d5c:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d60:	4a24      	ldr	r2, [pc, #144]	; (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d66:	6593      	str	r3, [r2, #88]	; 0x58
 8004d68:	4b22      	ldr	r3, [pc, #136]	; (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d70:	60fb      	str	r3, [r7, #12]
 8004d72:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004d74:	f7ff f926 	bl	8003fc4 <HAL_PWREx_GetVoltageRange>
 8004d78:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004d7a:	4b1e      	ldr	r3, [pc, #120]	; (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7e:	4a1d      	ldr	r2, [pc, #116]	; (8004df4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004d80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d84:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d8c:	d10b      	bne.n	8004da6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2b80      	cmp	r3, #128	; 0x80
 8004d92:	d919      	bls.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2ba0      	cmp	r3, #160	; 0xa0
 8004d98:	d902      	bls.n	8004da0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004d9a:	2302      	movs	r3, #2
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	e013      	b.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004da0:	2301      	movs	r3, #1
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	e010      	b.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2b80      	cmp	r3, #128	; 0x80
 8004daa:	d902      	bls.n	8004db2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004dac:	2303      	movs	r3, #3
 8004dae:	613b      	str	r3, [r7, #16]
 8004db0:	e00a      	b.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2b80      	cmp	r3, #128	; 0x80
 8004db6:	d102      	bne.n	8004dbe <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004db8:	2302      	movs	r3, #2
 8004dba:	613b      	str	r3, [r7, #16]
 8004dbc:	e004      	b.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b70      	cmp	r3, #112	; 0x70
 8004dc2:	d101      	bne.n	8004dc8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004dc8:	4b0b      	ldr	r3, [pc, #44]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f023 0207 	bic.w	r2, r3, #7
 8004dd0:	4909      	ldr	r1, [pc, #36]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004dd8:	4b07      	ldr	r3, [pc, #28]	; (8004df8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	693a      	ldr	r2, [r7, #16]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	d001      	beq.n	8004dea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e000      	b.n	8004dec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8004dea:	2300      	movs	r3, #0
}
 8004dec:	4618      	mov	r0, r3
 8004dee:	3718      	adds	r7, #24
 8004df0:	46bd      	mov	sp, r7
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40021000 	.word	0x40021000
 8004df8:	40022000 	.word	0x40022000

08004dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004e04:	2300      	movs	r3, #0
 8004e06:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004e08:	2300      	movs	r3, #0
 8004e0a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d041      	beq.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e1c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e20:	d02a      	beq.n	8004e78 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004e22:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8004e26:	d824      	bhi.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e2c:	d008      	beq.n	8004e40 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8004e2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004e32:	d81e      	bhi.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004e38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e3c:	d010      	beq.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8004e3e:	e018      	b.n	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004e40:	4b86      	ldr	r3, [pc, #536]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e42:	68db      	ldr	r3, [r3, #12]
 8004e44:	4a85      	ldr	r2, [pc, #532]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e4a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e4c:	e015      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3304      	adds	r3, #4
 8004e52:	2100      	movs	r1, #0
 8004e54:	4618      	mov	r0, r3
 8004e56:	f000 facb 	bl	80053f0 <RCCEx_PLLSAI1_Config>
 8004e5a:	4603      	mov	r3, r0
 8004e5c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e5e:	e00c      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3320      	adds	r3, #32
 8004e64:	2100      	movs	r1, #0
 8004e66:	4618      	mov	r0, r3
 8004e68:	f000 fbb6 	bl	80055d8 <RCCEx_PLLSAI2_Config>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004e70:	e003      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	74fb      	strb	r3, [r7, #19]
      break;
 8004e76:	e000      	b.n	8004e7a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004e78:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004e7a:	7cfb      	ldrb	r3, [r7, #19]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d10b      	bne.n	8004e98 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004e80:	4b76      	ldr	r3, [pc, #472]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e86:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004e8e:	4973      	ldr	r1, [pc, #460]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004e90:	4313      	orrs	r3, r2
 8004e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004e96:	e001      	b.n	8004e9c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e98:	7cfb      	ldrb	r3, [r7, #19]
 8004e9a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d041      	beq.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004eac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004eb0:	d02a      	beq.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004eb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004eb6:	d824      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004eb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ebc:	d008      	beq.n	8004ed0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8004ebe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004ec2:	d81e      	bhi.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004ec8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ecc:	d010      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004ece:	e018      	b.n	8004f02 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004ed0:	4b62      	ldr	r3, [pc, #392]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	4a61      	ldr	r2, [pc, #388]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ed6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eda:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004edc:	e015      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	3304      	adds	r3, #4
 8004ee2:	2100      	movs	r1, #0
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	f000 fa83 	bl	80053f0 <RCCEx_PLLSAI1_Config>
 8004eea:	4603      	mov	r3, r0
 8004eec:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004eee:	e00c      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	3320      	adds	r3, #32
 8004ef4:	2100      	movs	r1, #0
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fb6e 	bl	80055d8 <RCCEx_PLLSAI2_Config>
 8004efc:	4603      	mov	r3, r0
 8004efe:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	74fb      	strb	r3, [r7, #19]
      break;
 8004f06:	e000      	b.n	8004f0a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004f08:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004f0a:	7cfb      	ldrb	r3, [r7, #19]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10b      	bne.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004f10:	4b52      	ldr	r3, [pc, #328]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f16:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f1e:	494f      	ldr	r1, [pc, #316]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f20:	4313      	orrs	r3, r2
 8004f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004f26:	e001      	b.n	8004f2c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f28:	7cfb      	ldrb	r3, [r7, #19]
 8004f2a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	f000 80a0 	beq.w	800507a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f3e:	4b47      	ldr	r3, [pc, #284]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d101      	bne.n	8004f4e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00d      	beq.n	8004f70 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f54:	4b41      	ldr	r3, [pc, #260]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f58:	4a40      	ldr	r2, [pc, #256]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f5e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f60:	4b3e      	ldr	r3, [pc, #248]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004f70:	4b3b      	ldr	r3, [pc, #236]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a3a      	ldr	r2, [pc, #232]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004f7c:	f7fd fbc6 	bl	800270c <HAL_GetTick>
 8004f80:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f82:	e009      	b.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004f84:	f7fd fbc2 	bl	800270c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d902      	bls.n	8004f98 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	74fb      	strb	r3, [r7, #19]
        break;
 8004f96:	e005      	b.n	8004fa4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004f98:	4b31      	ldr	r3, [pc, #196]	; (8005060 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ef      	beq.n	8004f84 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004fa4:	7cfb      	ldrb	r3, [r7, #19]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d15c      	bne.n	8005064 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004faa:	4b2c      	ldr	r3, [pc, #176]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fb4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d01f      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x200>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	429a      	cmp	r2, r3
 8004fc6:	d019      	beq.n	8004ffc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004fc8:	4b24      	ldr	r3, [pc, #144]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fd2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004fd4:	4b21      	ldr	r3, [pc, #132]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fda:	4a20      	ldr	r2, [pc, #128]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fe0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004fe4:	4b1d      	ldr	r3, [pc, #116]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	4a1c      	ldr	r2, [pc, #112]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004fec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004ff4:	4a19      	ldr	r2, [pc, #100]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004ffc:	697b      	ldr	r3, [r7, #20]
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d016      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005006:	f7fd fb81 	bl	800270c <HAL_GetTick>
 800500a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800500c:	e00b      	b.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800500e:	f7fd fb7d 	bl	800270c <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	f241 3288 	movw	r2, #5000	; 0x1388
 800501c:	4293      	cmp	r3, r2
 800501e:	d902      	bls.n	8005026 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8005020:	2303      	movs	r3, #3
 8005022:	74fb      	strb	r3, [r7, #19]
            break;
 8005024:	e006      	b.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005026:	4b0d      	ldr	r3, [pc, #52]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005028:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800502c:	f003 0302 	and.w	r3, r3, #2
 8005030:	2b00      	cmp	r3, #0
 8005032:	d0ec      	beq.n	800500e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8005034:	7cfb      	ldrb	r3, [r7, #19]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10c      	bne.n	8005054 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800503a:	4b08      	ldr	r3, [pc, #32]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800503c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005040:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800504a:	4904      	ldr	r1, [pc, #16]	; (800505c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800504c:	4313      	orrs	r3, r2
 800504e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005052:	e009      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005054:	7cfb      	ldrb	r3, [r7, #19]
 8005056:	74bb      	strb	r3, [r7, #18]
 8005058:	e006      	b.n	8005068 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800505a:	bf00      	nop
 800505c:	40021000 	.word	0x40021000
 8005060:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005064:	7cfb      	ldrb	r3, [r7, #19]
 8005066:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005068:	7c7b      	ldrb	r3, [r7, #17]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d105      	bne.n	800507a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800506e:	4b9e      	ldr	r3, [pc, #632]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005070:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005072:	4a9d      	ldr	r2, [pc, #628]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005074:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005078:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0301 	and.w	r3, r3, #1
 8005082:	2b00      	cmp	r3, #0
 8005084:	d00a      	beq.n	800509c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005086:	4b98      	ldr	r3, [pc, #608]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800508c:	f023 0203 	bic.w	r2, r3, #3
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005094:	4994      	ldr	r1, [pc, #592]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005096:	4313      	orrs	r3, r2
 8005098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f003 0302 	and.w	r3, r3, #2
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d00a      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80050a8:	4b8f      	ldr	r3, [pc, #572]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050ae:	f023 020c 	bic.w	r2, r3, #12
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b6:	498c      	ldr	r1, [pc, #560]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050b8:	4313      	orrs	r3, r2
 80050ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 0304 	and.w	r3, r3, #4
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00a      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80050ca:	4b87      	ldr	r3, [pc, #540]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050d0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d8:	4983      	ldr	r1, [pc, #524]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 0308 	and.w	r3, r3, #8
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00a      	beq.n	8005102 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80050ec:	4b7e      	ldr	r3, [pc, #504]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80050f2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	497b      	ldr	r1, [pc, #492]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80050fc:	4313      	orrs	r3, r2
 80050fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0310 	and.w	r3, r3, #16
 800510a:	2b00      	cmp	r3, #0
 800510c:	d00a      	beq.n	8005124 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800510e:	4b76      	ldr	r3, [pc, #472]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005114:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800511c:	4972      	ldr	r1, [pc, #456]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800511e:	4313      	orrs	r3, r2
 8005120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 0320 	and.w	r3, r3, #32
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00a      	beq.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005130:	4b6d      	ldr	r3, [pc, #436]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005132:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005136:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800513e:	496a      	ldr	r1, [pc, #424]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005140:	4313      	orrs	r3, r2
 8005142:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800514e:	2b00      	cmp	r3, #0
 8005150:	d00a      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005152:	4b65      	ldr	r3, [pc, #404]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005154:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005158:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005160:	4961      	ldr	r1, [pc, #388]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005162:	4313      	orrs	r3, r2
 8005164:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005174:	4b5c      	ldr	r3, [pc, #368]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005176:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800517a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005182:	4959      	ldr	r1, [pc, #356]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005184:	4313      	orrs	r3, r2
 8005186:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005192:	2b00      	cmp	r3, #0
 8005194:	d00a      	beq.n	80051ac <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005196:	4b54      	ldr	r3, [pc, #336]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005198:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800519c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051a4:	4950      	ldr	r1, [pc, #320]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051a6:	4313      	orrs	r3, r2
 80051a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00a      	beq.n	80051ce <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051b8:	4b4b      	ldr	r3, [pc, #300]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051be:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c6:	4948      	ldr	r1, [pc, #288]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051c8:	4313      	orrs	r3, r2
 80051ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00a      	beq.n	80051f0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80051da:	4b43      	ldr	r3, [pc, #268]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051e8:	493f      	ldr	r1, [pc, #252]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051ea:	4313      	orrs	r3, r2
 80051ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d028      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051fc:	4b3a      	ldr	r3, [pc, #232]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80051fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800520a:	4937      	ldr	r1, [pc, #220]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800520c:	4313      	orrs	r3, r2
 800520e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800521a:	d106      	bne.n	800522a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800521c:	4b32      	ldr	r3, [pc, #200]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	4a31      	ldr	r2, [pc, #196]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005226:	60d3      	str	r3, [r2, #12]
 8005228:	e011      	b.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800522e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005232:	d10c      	bne.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	2101      	movs	r1, #1
 800523a:	4618      	mov	r0, r3
 800523c:	f000 f8d8 	bl	80053f0 <RCCEx_PLLSAI1_Config>
 8005240:	4603      	mov	r3, r0
 8005242:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005244:	7cfb      	ldrb	r3, [r7, #19]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800524a:	7cfb      	ldrb	r3, [r7, #19]
 800524c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d028      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800525a:	4b23      	ldr	r3, [pc, #140]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800525c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005260:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	491f      	ldr	r1, [pc, #124]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800526a:	4313      	orrs	r3, r2
 800526c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005278:	d106      	bne.n	8005288 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800527a:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800527c:	68db      	ldr	r3, [r3, #12]
 800527e:	4a1a      	ldr	r2, [pc, #104]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005280:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005284:	60d3      	str	r3, [r2, #12]
 8005286:	e011      	b.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800528c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005290:	d10c      	bne.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	3304      	adds	r3, #4
 8005296:	2101      	movs	r1, #1
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f8a9 	bl	80053f0 <RCCEx_PLLSAI1_Config>
 800529e:	4603      	mov	r3, r0
 80052a0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80052a2:	7cfb      	ldrb	r3, [r7, #19]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d001      	beq.n	80052ac <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80052a8:	7cfb      	ldrb	r3, [r7, #19]
 80052aa:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d02b      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80052b8:	4b0b      	ldr	r3, [pc, #44]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c6:	4908      	ldr	r1, [pc, #32]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052c8:	4313      	orrs	r3, r2
 80052ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80052d6:	d109      	bne.n	80052ec <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80052d8:	4b03      	ldr	r3, [pc, #12]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052da:	68db      	ldr	r3, [r3, #12]
 80052dc:	4a02      	ldr	r2, [pc, #8]	; (80052e8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80052de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80052e2:	60d3      	str	r3, [r2, #12]
 80052e4:	e014      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80052e6:	bf00      	nop
 80052e8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80052f4:	d10c      	bne.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	3304      	adds	r3, #4
 80052fa:	2101      	movs	r1, #1
 80052fc:	4618      	mov	r0, r3
 80052fe:	f000 f877 	bl	80053f0 <RCCEx_PLLSAI1_Config>
 8005302:	4603      	mov	r3, r0
 8005304:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005306:	7cfb      	ldrb	r3, [r7, #19]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d001      	beq.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800530c:	7cfb      	ldrb	r3, [r7, #19]
 800530e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005318:	2b00      	cmp	r3, #0
 800531a:	d02f      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800531c:	4b2b      	ldr	r3, [pc, #172]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800531e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005322:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800532a:	4928      	ldr	r1, [pc, #160]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800532c:	4313      	orrs	r3, r2
 800532e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005336:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800533a:	d10d      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	3304      	adds	r3, #4
 8005340:	2102      	movs	r1, #2
 8005342:	4618      	mov	r0, r3
 8005344:	f000 f854 	bl	80053f0 <RCCEx_PLLSAI1_Config>
 8005348:	4603      	mov	r3, r0
 800534a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800534c:	7cfb      	ldrb	r3, [r7, #19]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d014      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005352:	7cfb      	ldrb	r3, [r7, #19]
 8005354:	74bb      	strb	r3, [r7, #18]
 8005356:	e011      	b.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800535c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005360:	d10c      	bne.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	3320      	adds	r3, #32
 8005366:	2102      	movs	r1, #2
 8005368:	4618      	mov	r0, r3
 800536a:	f000 f935 	bl	80055d8 <RCCEx_PLLSAI2_Config>
 800536e:	4603      	mov	r3, r0
 8005370:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005372:	7cfb      	ldrb	r3, [r7, #19]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d001      	beq.n	800537c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005378:	7cfb      	ldrb	r3, [r7, #19]
 800537a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005384:	2b00      	cmp	r3, #0
 8005386:	d00a      	beq.n	800539e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005388:	4b10      	ldr	r3, [pc, #64]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800538a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800538e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005396:	490d      	ldr	r1, [pc, #52]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005398:	4313      	orrs	r3, r2
 800539a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d00b      	beq.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053aa:	4b08      	ldr	r3, [pc, #32]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053b0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053ba:	4904      	ldr	r1, [pc, #16]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80053bc:	4313      	orrs	r3, r2
 80053be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80053c2:	7cbb      	ldrb	r3, [r7, #18]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	40021000 	.word	0x40021000

080053d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80053d4:	4b05      	ldr	r3, [pc, #20]	; (80053ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	4a04      	ldr	r2, [pc, #16]	; (80053ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80053da:	f043 0304 	orr.w	r3, r3, #4
 80053de:	6013      	str	r3, [r2, #0]
}
 80053e0:	bf00      	nop
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop
 80053ec:	40021000 	.word	0x40021000

080053f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
 80053f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80053fa:	2300      	movs	r3, #0
 80053fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80053fe:	4b75      	ldr	r3, [pc, #468]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005400:	68db      	ldr	r3, [r3, #12]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d018      	beq.n	800543c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800540a:	4b72      	ldr	r3, [pc, #456]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0203 	and.w	r2, r3, #3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	429a      	cmp	r2, r3
 8005418:	d10d      	bne.n	8005436 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
       ||
 800541e:	2b00      	cmp	r3, #0
 8005420:	d009      	beq.n	8005436 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005422:	4b6c      	ldr	r3, [pc, #432]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005424:	68db      	ldr	r3, [r3, #12]
 8005426:	091b      	lsrs	r3, r3, #4
 8005428:	f003 0307 	and.w	r3, r3, #7
 800542c:	1c5a      	adds	r2, r3, #1
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
       ||
 8005432:	429a      	cmp	r2, r3
 8005434:	d047      	beq.n	80054c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005436:	2301      	movs	r3, #1
 8005438:	73fb      	strb	r3, [r7, #15]
 800543a:	e044      	b.n	80054c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	2b03      	cmp	r3, #3
 8005442:	d018      	beq.n	8005476 <RCCEx_PLLSAI1_Config+0x86>
 8005444:	2b03      	cmp	r3, #3
 8005446:	d825      	bhi.n	8005494 <RCCEx_PLLSAI1_Config+0xa4>
 8005448:	2b01      	cmp	r3, #1
 800544a:	d002      	beq.n	8005452 <RCCEx_PLLSAI1_Config+0x62>
 800544c:	2b02      	cmp	r3, #2
 800544e:	d009      	beq.n	8005464 <RCCEx_PLLSAI1_Config+0x74>
 8005450:	e020      	b.n	8005494 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005452:	4b60      	ldr	r3, [pc, #384]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 0302 	and.w	r3, r3, #2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d11d      	bne.n	800549a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005462:	e01a      	b.n	800549a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005464:	4b5b      	ldr	r3, [pc, #364]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546c:	2b00      	cmp	r3, #0
 800546e:	d116      	bne.n	800549e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005470:	2301      	movs	r3, #1
 8005472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005474:	e013      	b.n	800549e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005476:	4b57      	ldr	r3, [pc, #348]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10f      	bne.n	80054a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005482:	4b54      	ldr	r3, [pc, #336]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d109      	bne.n	80054a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005492:	e006      	b.n	80054a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	73fb      	strb	r3, [r7, #15]
      break;
 8005498:	e004      	b.n	80054a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800549a:	bf00      	nop
 800549c:	e002      	b.n	80054a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800549e:	bf00      	nop
 80054a0:	e000      	b.n	80054a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80054a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80054a4:	7bfb      	ldrb	r3, [r7, #15]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10d      	bne.n	80054c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80054aa:	4b4a      	ldr	r3, [pc, #296]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6819      	ldr	r1, [r3, #0]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	3b01      	subs	r3, #1
 80054bc:	011b      	lsls	r3, r3, #4
 80054be:	430b      	orrs	r3, r1
 80054c0:	4944      	ldr	r1, [pc, #272]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d17d      	bne.n	80055c8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80054cc:	4b41      	ldr	r3, [pc, #260]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	4a40      	ldr	r2, [pc, #256]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80054d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80054d8:	f7fd f918 	bl	800270c <HAL_GetTick>
 80054dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054de:	e009      	b.n	80054f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80054e0:	f7fd f914 	bl	800270c <HAL_GetTick>
 80054e4:	4602      	mov	r2, r0
 80054e6:	68bb      	ldr	r3, [r7, #8]
 80054e8:	1ad3      	subs	r3, r2, r3
 80054ea:	2b02      	cmp	r3, #2
 80054ec:	d902      	bls.n	80054f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80054ee:	2303      	movs	r3, #3
 80054f0:	73fb      	strb	r3, [r7, #15]
        break;
 80054f2:	e005      	b.n	8005500 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80054f4:	4b37      	ldr	r3, [pc, #220]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d1ef      	bne.n	80054e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005500:	7bfb      	ldrb	r3, [r7, #15]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d160      	bne.n	80055c8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d111      	bne.n	8005530 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800550c:	4b31      	ldr	r3, [pc, #196]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	6892      	ldr	r2, [r2, #8]
 800551c:	0211      	lsls	r1, r2, #8
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	68d2      	ldr	r2, [r2, #12]
 8005522:	0912      	lsrs	r2, r2, #4
 8005524:	0452      	lsls	r2, r2, #17
 8005526:	430a      	orrs	r2, r1
 8005528:	492a      	ldr	r1, [pc, #168]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800552a:	4313      	orrs	r3, r2
 800552c:	610b      	str	r3, [r1, #16]
 800552e:	e027      	b.n	8005580 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	2b01      	cmp	r3, #1
 8005534:	d112      	bne.n	800555c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005536:	4b27      	ldr	r3, [pc, #156]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800553e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	6892      	ldr	r2, [r2, #8]
 8005546:	0211      	lsls	r1, r2, #8
 8005548:	687a      	ldr	r2, [r7, #4]
 800554a:	6912      	ldr	r2, [r2, #16]
 800554c:	0852      	lsrs	r2, r2, #1
 800554e:	3a01      	subs	r2, #1
 8005550:	0552      	lsls	r2, r2, #21
 8005552:	430a      	orrs	r2, r1
 8005554:	491f      	ldr	r1, [pc, #124]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005556:	4313      	orrs	r3, r2
 8005558:	610b      	str	r3, [r1, #16]
 800555a:	e011      	b.n	8005580 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800555c:	4b1d      	ldr	r3, [pc, #116]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005564:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005568:	687a      	ldr	r2, [r7, #4]
 800556a:	6892      	ldr	r2, [r2, #8]
 800556c:	0211      	lsls	r1, r2, #8
 800556e:	687a      	ldr	r2, [r7, #4]
 8005570:	6952      	ldr	r2, [r2, #20]
 8005572:	0852      	lsrs	r2, r2, #1
 8005574:	3a01      	subs	r2, #1
 8005576:	0652      	lsls	r2, r2, #25
 8005578:	430a      	orrs	r2, r1
 800557a:	4916      	ldr	r1, [pc, #88]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 800557c:	4313      	orrs	r3, r2
 800557e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005580:	4b14      	ldr	r3, [pc, #80]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a13      	ldr	r2, [pc, #76]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005586:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800558a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800558c:	f7fd f8be 	bl	800270c <HAL_GetTick>
 8005590:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005592:	e009      	b.n	80055a8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005594:	f7fd f8ba 	bl	800270c <HAL_GetTick>
 8005598:	4602      	mov	r2, r0
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	1ad3      	subs	r3, r2, r3
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d902      	bls.n	80055a8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80055a2:	2303      	movs	r3, #3
 80055a4:	73fb      	strb	r3, [r7, #15]
          break;
 80055a6:	e005      	b.n	80055b4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80055a8:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d0ef      	beq.n	8005594 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80055b4:	7bfb      	ldrb	r3, [r7, #15]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80055ba:	4b06      	ldr	r3, [pc, #24]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055bc:	691a      	ldr	r2, [r3, #16]
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	699b      	ldr	r3, [r3, #24]
 80055c2:	4904      	ldr	r1, [pc, #16]	; (80055d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055c4:	4313      	orrs	r3, r2
 80055c6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80055ca:	4618      	mov	r0, r3
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	40021000 	.word	0x40021000

080055d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80055e6:	4b6a      	ldr	r3, [pc, #424]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055e8:	68db      	ldr	r3, [r3, #12]
 80055ea:	f003 0303 	and.w	r3, r3, #3
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d018      	beq.n	8005624 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80055f2:	4b67      	ldr	r3, [pc, #412]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	f003 0203 	and.w	r2, r3, #3
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d10d      	bne.n	800561e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
       ||
 8005606:	2b00      	cmp	r3, #0
 8005608:	d009      	beq.n	800561e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800560a:	4b61      	ldr	r3, [pc, #388]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800560c:	68db      	ldr	r3, [r3, #12]
 800560e:	091b      	lsrs	r3, r3, #4
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	1c5a      	adds	r2, r3, #1
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
       ||
 800561a:	429a      	cmp	r2, r3
 800561c:	d047      	beq.n	80056ae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800561e:	2301      	movs	r3, #1
 8005620:	73fb      	strb	r3, [r7, #15]
 8005622:	e044      	b.n	80056ae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b03      	cmp	r3, #3
 800562a:	d018      	beq.n	800565e <RCCEx_PLLSAI2_Config+0x86>
 800562c:	2b03      	cmp	r3, #3
 800562e:	d825      	bhi.n	800567c <RCCEx_PLLSAI2_Config+0xa4>
 8005630:	2b01      	cmp	r3, #1
 8005632:	d002      	beq.n	800563a <RCCEx_PLLSAI2_Config+0x62>
 8005634:	2b02      	cmp	r3, #2
 8005636:	d009      	beq.n	800564c <RCCEx_PLLSAI2_Config+0x74>
 8005638:	e020      	b.n	800567c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800563a:	4b55      	ldr	r3, [pc, #340]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d11d      	bne.n	8005682 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800564a:	e01a      	b.n	8005682 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800564c:	4b50      	ldr	r3, [pc, #320]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005654:	2b00      	cmp	r3, #0
 8005656:	d116      	bne.n	8005686 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800565c:	e013      	b.n	8005686 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800565e:	4b4c      	ldr	r3, [pc, #304]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d10f      	bne.n	800568a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800566a:	4b49      	ldr	r3, [pc, #292]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005672:	2b00      	cmp	r3, #0
 8005674:	d109      	bne.n	800568a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800567a:	e006      	b.n	800568a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	73fb      	strb	r3, [r7, #15]
      break;
 8005680:	e004      	b.n	800568c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005682:	bf00      	nop
 8005684:	e002      	b.n	800568c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005686:	bf00      	nop
 8005688:	e000      	b.n	800568c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800568a:	bf00      	nop
    }

    if(status == HAL_OK)
 800568c:	7bfb      	ldrb	r3, [r7, #15]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10d      	bne.n	80056ae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005692:	4b3f      	ldr	r3, [pc, #252]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6819      	ldr	r1, [r3, #0]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	3b01      	subs	r3, #1
 80056a4:	011b      	lsls	r3, r3, #4
 80056a6:	430b      	orrs	r3, r1
 80056a8:	4939      	ldr	r1, [pc, #228]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80056ae:	7bfb      	ldrb	r3, [r7, #15]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d167      	bne.n	8005784 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80056b4:	4b36      	ldr	r3, [pc, #216]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	4a35      	ldr	r2, [pc, #212]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80056c0:	f7fd f824 	bl	800270c <HAL_GetTick>
 80056c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056c6:	e009      	b.n	80056dc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80056c8:	f7fd f820 	bl	800270c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	2b02      	cmp	r3, #2
 80056d4:	d902      	bls.n	80056dc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80056d6:	2303      	movs	r3, #3
 80056d8:	73fb      	strb	r3, [r7, #15]
        break;
 80056da:	e005      	b.n	80056e8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80056dc:	4b2c      	ldr	r3, [pc, #176]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1ef      	bne.n	80056c8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80056e8:	7bfb      	ldrb	r3, [r7, #15]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d14a      	bne.n	8005784 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d111      	bne.n	8005718 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80056f4:	4b26      	ldr	r3, [pc, #152]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056f6:	695b      	ldr	r3, [r3, #20]
 80056f8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80056fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6892      	ldr	r2, [r2, #8]
 8005704:	0211      	lsls	r1, r2, #8
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	68d2      	ldr	r2, [r2, #12]
 800570a:	0912      	lsrs	r2, r2, #4
 800570c:	0452      	lsls	r2, r2, #17
 800570e:	430a      	orrs	r2, r1
 8005710:	491f      	ldr	r1, [pc, #124]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005712:	4313      	orrs	r3, r2
 8005714:	614b      	str	r3, [r1, #20]
 8005716:	e011      	b.n	800573c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005718:	4b1d      	ldr	r3, [pc, #116]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005720:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	6892      	ldr	r2, [r2, #8]
 8005728:	0211      	lsls	r1, r2, #8
 800572a:	687a      	ldr	r2, [r7, #4]
 800572c:	6912      	ldr	r2, [r2, #16]
 800572e:	0852      	lsrs	r2, r2, #1
 8005730:	3a01      	subs	r2, #1
 8005732:	0652      	lsls	r2, r2, #25
 8005734:	430a      	orrs	r2, r1
 8005736:	4916      	ldr	r1, [pc, #88]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005738:	4313      	orrs	r3, r2
 800573a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800573c:	4b14      	ldr	r3, [pc, #80]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	4a13      	ldr	r2, [pc, #76]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005742:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005746:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005748:	f7fc ffe0 	bl	800270c <HAL_GetTick>
 800574c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800574e:	e009      	b.n	8005764 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005750:	f7fc ffdc 	bl	800270c <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	68bb      	ldr	r3, [r7, #8]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	2b02      	cmp	r3, #2
 800575c:	d902      	bls.n	8005764 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800575e:	2303      	movs	r3, #3
 8005760:	73fb      	strb	r3, [r7, #15]
          break;
 8005762:	e005      	b.n	8005770 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005764:	4b0a      	ldr	r3, [pc, #40]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800576c:	2b00      	cmp	r3, #0
 800576e:	d0ef      	beq.n	8005750 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005770:	7bfb      	ldrb	r3, [r7, #15]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005776:	4b06      	ldr	r3, [pc, #24]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005778:	695a      	ldr	r2, [r3, #20]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	695b      	ldr	r3, [r3, #20]
 800577e:	4904      	ldr	r1, [pc, #16]	; (8005790 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005780:	4313      	orrs	r3, r2
 8005782:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005784:	7bfb      	ldrb	r3, [r7, #15]
}
 8005786:	4618      	mov	r0, r3
 8005788:	3710      	adds	r7, #16
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000

08005794 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d101      	bne.n	80057a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057a2:	2301      	movs	r3, #1
 80057a4:	e095      	b.n	80058d2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d108      	bne.n	80057c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057b6:	d009      	beq.n	80057cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2200      	movs	r2, #0
 80057bc:	61da      	str	r2, [r3, #28]
 80057be:	e005      	b.n	80057cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	2200      	movs	r2, #0
 80057c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	2200      	movs	r2, #0
 80057ca:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057d8:	b2db      	uxtb	r3, r3
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d106      	bne.n	80057ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2200      	movs	r2, #0
 80057e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057e6:	6878      	ldr	r0, [r7, #4]
 80057e8:	f7fb fba6 	bl	8000f38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	681a      	ldr	r2, [r3, #0]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005802:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800580c:	d902      	bls.n	8005814 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800580e:	2300      	movs	r3, #0
 8005810:	60fb      	str	r3, [r7, #12]
 8005812:	e002      	b.n	800581a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005818:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005822:	d007      	beq.n	8005834 <HAL_SPI_Init+0xa0>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800582c:	d002      	beq.n	8005834 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	685b      	ldr	r3, [r3, #4]
 8005838:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	689b      	ldr	r3, [r3, #8]
 8005840:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005844:	431a      	orrs	r2, r3
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	691b      	ldr	r3, [r3, #16]
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	431a      	orrs	r2, r3
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	695b      	ldr	r3, [r3, #20]
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	431a      	orrs	r2, r3
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005862:	431a      	orrs	r2, r3
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800586c:	431a      	orrs	r2, r3
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005876:	ea42 0103 	orr.w	r1, r2, r3
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800587e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	699b      	ldr	r3, [r3, #24]
 800588e:	0c1b      	lsrs	r3, r3, #16
 8005890:	f003 0204 	and.w	r2, r3, #4
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	f003 0310 	and.w	r3, r3, #16
 800589c:	431a      	orrs	r2, r3
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058a2:	f003 0308 	and.w	r3, r3, #8
 80058a6:	431a      	orrs	r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	68db      	ldr	r3, [r3, #12]
 80058ac:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80058b0:	ea42 0103 	orr.w	r1, r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	430a      	orrs	r2, r1
 80058c0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2201      	movs	r2, #1
 80058cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3710      	adds	r7, #16
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}

080058da <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058da:	b580      	push	{r7, lr}
 80058dc:	b082      	sub	sp, #8
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e040      	b.n	800596e <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d106      	bne.n	8005902 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f7fb fb5f 	bl	8000fc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2224      	movs	r2, #36	; 0x24
 8005906:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	681a      	ldr	r2, [r3, #0]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f022 0201 	bic.w	r2, r2, #1
 8005916:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f8bf 	bl	8005a9c <UART_SetConfig>
 800591e:	4603      	mov	r3, r0
 8005920:	2b01      	cmp	r3, #1
 8005922:	d101      	bne.n	8005928 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005924:	2301      	movs	r3, #1
 8005926:	e022      	b.n	800596e <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592c:	2b00      	cmp	r3, #0
 800592e:	d002      	beq.n	8005936 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005930:	6878      	ldr	r0, [r7, #4]
 8005932:	f000 fb3d 	bl	8005fb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	685a      	ldr	r2, [r3, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005944:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005954:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f042 0201 	orr.w	r2, r2, #1
 8005964:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005966:	6878      	ldr	r0, [r7, #4]
 8005968:	f000 fbc4 	bl	80060f4 <UART_CheckIdleState>
 800596c:	4603      	mov	r3, r0
}
 800596e:	4618      	mov	r0, r3
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}

08005976 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b08a      	sub	sp, #40	; 0x28
 800597a:	af02      	add	r7, sp, #8
 800597c:	60f8      	str	r0, [r7, #12]
 800597e:	60b9      	str	r1, [r7, #8]
 8005980:	603b      	str	r3, [r7, #0]
 8005982:	4613      	mov	r3, r2
 8005984:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800598a:	2b20      	cmp	r3, #32
 800598c:	f040 8081 	bne.w	8005a92 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d002      	beq.n	800599c <HAL_UART_Transmit+0x26>
 8005996:	88fb      	ldrh	r3, [r7, #6]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d101      	bne.n	80059a0 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800599c:	2301      	movs	r3, #1
 800599e:	e079      	b.n	8005a94 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d101      	bne.n	80059ae <HAL_UART_Transmit+0x38>
 80059aa:	2302      	movs	r3, #2
 80059ac:	e072      	b.n	8005a94 <HAL_UART_Transmit+0x11e>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2201      	movs	r2, #1
 80059b2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2221      	movs	r2, #33	; 0x21
 80059c0:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80059c2:	f7fc fea3 	bl	800270c <HAL_GetTick>
 80059c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	88fa      	ldrh	r2, [r7, #6]
 80059cc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	88fa      	ldrh	r2, [r7, #6]
 80059d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80059e0:	d108      	bne.n	80059f4 <HAL_UART_Transmit+0x7e>
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d104      	bne.n	80059f4 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 80059ea:	2300      	movs	r3, #0
 80059ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	61bb      	str	r3, [r7, #24]
 80059f2:	e003      	b.n	80059fc <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059f8:	2300      	movs	r3, #0
 80059fa:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2200      	movs	r2, #0
 8005a00:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8005a04:	e02d      	b.n	8005a62 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2180      	movs	r1, #128	; 0x80
 8005a10:	68f8      	ldr	r0, [r7, #12]
 8005a12:	f000 fbb4 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8005a1c:	2303      	movs	r3, #3
 8005a1e:	e039      	b.n	8005a94 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8005a20:	69fb      	ldr	r3, [r7, #28]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d10b      	bne.n	8005a3e <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a26:	69bb      	ldr	r3, [r7, #24]
 8005a28:	881a      	ldrh	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a32:	b292      	uxth	r2, r2
 8005a34:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	3302      	adds	r3, #2
 8005a3a:	61bb      	str	r3, [r7, #24]
 8005a3c:	e008      	b.n	8005a50 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a3e:	69fb      	ldr	r3, [r7, #28]
 8005a40:	781a      	ldrb	r2, [r3, #0]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	b292      	uxth	r2, r2
 8005a48:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	3301      	adds	r3, #1
 8005a4e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	3b01      	subs	r3, #1
 8005a5a:	b29a      	uxth	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005a68:	b29b      	uxth	r3, r3
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1cb      	bne.n	8005a06 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	697b      	ldr	r3, [r7, #20]
 8005a74:	2200      	movs	r2, #0
 8005a76:	2140      	movs	r1, #64	; 0x40
 8005a78:	68f8      	ldr	r0, [r7, #12]
 8005a7a:	f000 fb80 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 8005a7e:	4603      	mov	r3, r0
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d001      	beq.n	8005a88 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8005a84:	2303      	movs	r3, #3
 8005a86:	e005      	b.n	8005a94 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	2220      	movs	r2, #32
 8005a8c:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	e000      	b.n	8005a94 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8005a92:	2302      	movs	r3, #2
  }
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3720      	adds	r7, #32
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a9c:	b5b0      	push	{r4, r5, r7, lr}
 8005a9e:	b088      	sub	sp, #32
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	689a      	ldr	r2, [r3, #8]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	431a      	orrs	r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	695b      	ldr	r3, [r3, #20]
 8005ab6:	431a      	orrs	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	69db      	ldr	r3, [r3, #28]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	681a      	ldr	r2, [r3, #0]
 8005ac6:	4bad      	ldr	r3, [pc, #692]	; (8005d7c <UART_SetConfig+0x2e0>)
 8005ac8:	4013      	ands	r3, r2
 8005aca:	687a      	ldr	r2, [r7, #4]
 8005acc:	6812      	ldr	r2, [r2, #0]
 8005ace:	69f9      	ldr	r1, [r7, #28]
 8005ad0:	430b      	orrs	r3, r1
 8005ad2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	68da      	ldr	r2, [r3, #12]
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	699b      	ldr	r3, [r3, #24]
 8005aee:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4aa2      	ldr	r2, [pc, #648]	; (8005d80 <UART_SetConfig+0x2e4>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d004      	beq.n	8005b04 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	69fa      	ldr	r2, [r7, #28]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	689b      	ldr	r3, [r3, #8]
 8005b0a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	430a      	orrs	r2, r1
 8005b16:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	4a99      	ldr	r2, [pc, #612]	; (8005d84 <UART_SetConfig+0x2e8>)
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d121      	bne.n	8005b66 <UART_SetConfig+0xca>
 8005b22:	4b99      	ldr	r3, [pc, #612]	; (8005d88 <UART_SetConfig+0x2ec>)
 8005b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b28:	f003 0303 	and.w	r3, r3, #3
 8005b2c:	2b03      	cmp	r3, #3
 8005b2e:	d817      	bhi.n	8005b60 <UART_SetConfig+0xc4>
 8005b30:	a201      	add	r2, pc, #4	; (adr r2, 8005b38 <UART_SetConfig+0x9c>)
 8005b32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b36:	bf00      	nop
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b55 	.word	0x08005b55
 8005b40:	08005b4f 	.word	0x08005b4f
 8005b44:	08005b5b 	.word	0x08005b5b
 8005b48:	2301      	movs	r3, #1
 8005b4a:	76fb      	strb	r3, [r7, #27]
 8005b4c:	e0e7      	b.n	8005d1e <UART_SetConfig+0x282>
 8005b4e:	2302      	movs	r3, #2
 8005b50:	76fb      	strb	r3, [r7, #27]
 8005b52:	e0e4      	b.n	8005d1e <UART_SetConfig+0x282>
 8005b54:	2304      	movs	r3, #4
 8005b56:	76fb      	strb	r3, [r7, #27]
 8005b58:	e0e1      	b.n	8005d1e <UART_SetConfig+0x282>
 8005b5a:	2308      	movs	r3, #8
 8005b5c:	76fb      	strb	r3, [r7, #27]
 8005b5e:	e0de      	b.n	8005d1e <UART_SetConfig+0x282>
 8005b60:	2310      	movs	r3, #16
 8005b62:	76fb      	strb	r3, [r7, #27]
 8005b64:	e0db      	b.n	8005d1e <UART_SetConfig+0x282>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	4a88      	ldr	r2, [pc, #544]	; (8005d8c <UART_SetConfig+0x2f0>)
 8005b6c:	4293      	cmp	r3, r2
 8005b6e:	d132      	bne.n	8005bd6 <UART_SetConfig+0x13a>
 8005b70:	4b85      	ldr	r3, [pc, #532]	; (8005d88 <UART_SetConfig+0x2ec>)
 8005b72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b76:	f003 030c 	and.w	r3, r3, #12
 8005b7a:	2b0c      	cmp	r3, #12
 8005b7c:	d828      	bhi.n	8005bd0 <UART_SetConfig+0x134>
 8005b7e:	a201      	add	r2, pc, #4	; (adr r2, 8005b84 <UART_SetConfig+0xe8>)
 8005b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b84:	08005bb9 	.word	0x08005bb9
 8005b88:	08005bd1 	.word	0x08005bd1
 8005b8c:	08005bd1 	.word	0x08005bd1
 8005b90:	08005bd1 	.word	0x08005bd1
 8005b94:	08005bc5 	.word	0x08005bc5
 8005b98:	08005bd1 	.word	0x08005bd1
 8005b9c:	08005bd1 	.word	0x08005bd1
 8005ba0:	08005bd1 	.word	0x08005bd1
 8005ba4:	08005bbf 	.word	0x08005bbf
 8005ba8:	08005bd1 	.word	0x08005bd1
 8005bac:	08005bd1 	.word	0x08005bd1
 8005bb0:	08005bd1 	.word	0x08005bd1
 8005bb4:	08005bcb 	.word	0x08005bcb
 8005bb8:	2300      	movs	r3, #0
 8005bba:	76fb      	strb	r3, [r7, #27]
 8005bbc:	e0af      	b.n	8005d1e <UART_SetConfig+0x282>
 8005bbe:	2302      	movs	r3, #2
 8005bc0:	76fb      	strb	r3, [r7, #27]
 8005bc2:	e0ac      	b.n	8005d1e <UART_SetConfig+0x282>
 8005bc4:	2304      	movs	r3, #4
 8005bc6:	76fb      	strb	r3, [r7, #27]
 8005bc8:	e0a9      	b.n	8005d1e <UART_SetConfig+0x282>
 8005bca:	2308      	movs	r3, #8
 8005bcc:	76fb      	strb	r3, [r7, #27]
 8005bce:	e0a6      	b.n	8005d1e <UART_SetConfig+0x282>
 8005bd0:	2310      	movs	r3, #16
 8005bd2:	76fb      	strb	r3, [r7, #27]
 8005bd4:	e0a3      	b.n	8005d1e <UART_SetConfig+0x282>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4a6d      	ldr	r2, [pc, #436]	; (8005d90 <UART_SetConfig+0x2f4>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d120      	bne.n	8005c22 <UART_SetConfig+0x186>
 8005be0:	4b69      	ldr	r3, [pc, #420]	; (8005d88 <UART_SetConfig+0x2ec>)
 8005be2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005bea:	2b30      	cmp	r3, #48	; 0x30
 8005bec:	d013      	beq.n	8005c16 <UART_SetConfig+0x17a>
 8005bee:	2b30      	cmp	r3, #48	; 0x30
 8005bf0:	d814      	bhi.n	8005c1c <UART_SetConfig+0x180>
 8005bf2:	2b20      	cmp	r3, #32
 8005bf4:	d009      	beq.n	8005c0a <UART_SetConfig+0x16e>
 8005bf6:	2b20      	cmp	r3, #32
 8005bf8:	d810      	bhi.n	8005c1c <UART_SetConfig+0x180>
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d002      	beq.n	8005c04 <UART_SetConfig+0x168>
 8005bfe:	2b10      	cmp	r3, #16
 8005c00:	d006      	beq.n	8005c10 <UART_SetConfig+0x174>
 8005c02:	e00b      	b.n	8005c1c <UART_SetConfig+0x180>
 8005c04:	2300      	movs	r3, #0
 8005c06:	76fb      	strb	r3, [r7, #27]
 8005c08:	e089      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c0a:	2302      	movs	r3, #2
 8005c0c:	76fb      	strb	r3, [r7, #27]
 8005c0e:	e086      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c10:	2304      	movs	r3, #4
 8005c12:	76fb      	strb	r3, [r7, #27]
 8005c14:	e083      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c16:	2308      	movs	r3, #8
 8005c18:	76fb      	strb	r3, [r7, #27]
 8005c1a:	e080      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c1c:	2310      	movs	r3, #16
 8005c1e:	76fb      	strb	r3, [r7, #27]
 8005c20:	e07d      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a5b      	ldr	r2, [pc, #364]	; (8005d94 <UART_SetConfig+0x2f8>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d120      	bne.n	8005c6e <UART_SetConfig+0x1d2>
 8005c2c:	4b56      	ldr	r3, [pc, #344]	; (8005d88 <UART_SetConfig+0x2ec>)
 8005c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005c36:	2bc0      	cmp	r3, #192	; 0xc0
 8005c38:	d013      	beq.n	8005c62 <UART_SetConfig+0x1c6>
 8005c3a:	2bc0      	cmp	r3, #192	; 0xc0
 8005c3c:	d814      	bhi.n	8005c68 <UART_SetConfig+0x1cc>
 8005c3e:	2b80      	cmp	r3, #128	; 0x80
 8005c40:	d009      	beq.n	8005c56 <UART_SetConfig+0x1ba>
 8005c42:	2b80      	cmp	r3, #128	; 0x80
 8005c44:	d810      	bhi.n	8005c68 <UART_SetConfig+0x1cc>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <UART_SetConfig+0x1b4>
 8005c4a:	2b40      	cmp	r3, #64	; 0x40
 8005c4c:	d006      	beq.n	8005c5c <UART_SetConfig+0x1c0>
 8005c4e:	e00b      	b.n	8005c68 <UART_SetConfig+0x1cc>
 8005c50:	2300      	movs	r3, #0
 8005c52:	76fb      	strb	r3, [r7, #27]
 8005c54:	e063      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c56:	2302      	movs	r3, #2
 8005c58:	76fb      	strb	r3, [r7, #27]
 8005c5a:	e060      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c5c:	2304      	movs	r3, #4
 8005c5e:	76fb      	strb	r3, [r7, #27]
 8005c60:	e05d      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c62:	2308      	movs	r3, #8
 8005c64:	76fb      	strb	r3, [r7, #27]
 8005c66:	e05a      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c68:	2310      	movs	r3, #16
 8005c6a:	76fb      	strb	r3, [r7, #27]
 8005c6c:	e057      	b.n	8005d1e <UART_SetConfig+0x282>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a49      	ldr	r2, [pc, #292]	; (8005d98 <UART_SetConfig+0x2fc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d125      	bne.n	8005cc4 <UART_SetConfig+0x228>
 8005c78:	4b43      	ldr	r3, [pc, #268]	; (8005d88 <UART_SetConfig+0x2ec>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005c82:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c86:	d017      	beq.n	8005cb8 <UART_SetConfig+0x21c>
 8005c88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005c8c:	d817      	bhi.n	8005cbe <UART_SetConfig+0x222>
 8005c8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c92:	d00b      	beq.n	8005cac <UART_SetConfig+0x210>
 8005c94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c98:	d811      	bhi.n	8005cbe <UART_SetConfig+0x222>
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d003      	beq.n	8005ca6 <UART_SetConfig+0x20a>
 8005c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ca2:	d006      	beq.n	8005cb2 <UART_SetConfig+0x216>
 8005ca4:	e00b      	b.n	8005cbe <UART_SetConfig+0x222>
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	76fb      	strb	r3, [r7, #27]
 8005caa:	e038      	b.n	8005d1e <UART_SetConfig+0x282>
 8005cac:	2302      	movs	r3, #2
 8005cae:	76fb      	strb	r3, [r7, #27]
 8005cb0:	e035      	b.n	8005d1e <UART_SetConfig+0x282>
 8005cb2:	2304      	movs	r3, #4
 8005cb4:	76fb      	strb	r3, [r7, #27]
 8005cb6:	e032      	b.n	8005d1e <UART_SetConfig+0x282>
 8005cb8:	2308      	movs	r3, #8
 8005cba:	76fb      	strb	r3, [r7, #27]
 8005cbc:	e02f      	b.n	8005d1e <UART_SetConfig+0x282>
 8005cbe:	2310      	movs	r3, #16
 8005cc0:	76fb      	strb	r3, [r7, #27]
 8005cc2:	e02c      	b.n	8005d1e <UART_SetConfig+0x282>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	4a2d      	ldr	r2, [pc, #180]	; (8005d80 <UART_SetConfig+0x2e4>)
 8005cca:	4293      	cmp	r3, r2
 8005ccc:	d125      	bne.n	8005d1a <UART_SetConfig+0x27e>
 8005cce:	4b2e      	ldr	r3, [pc, #184]	; (8005d88 <UART_SetConfig+0x2ec>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cd4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005cd8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005cdc:	d017      	beq.n	8005d0e <UART_SetConfig+0x272>
 8005cde:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005ce2:	d817      	bhi.n	8005d14 <UART_SetConfig+0x278>
 8005ce4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ce8:	d00b      	beq.n	8005d02 <UART_SetConfig+0x266>
 8005cea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cee:	d811      	bhi.n	8005d14 <UART_SetConfig+0x278>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d003      	beq.n	8005cfc <UART_SetConfig+0x260>
 8005cf4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005cf8:	d006      	beq.n	8005d08 <UART_SetConfig+0x26c>
 8005cfa:	e00b      	b.n	8005d14 <UART_SetConfig+0x278>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	76fb      	strb	r3, [r7, #27]
 8005d00:	e00d      	b.n	8005d1e <UART_SetConfig+0x282>
 8005d02:	2302      	movs	r3, #2
 8005d04:	76fb      	strb	r3, [r7, #27]
 8005d06:	e00a      	b.n	8005d1e <UART_SetConfig+0x282>
 8005d08:	2304      	movs	r3, #4
 8005d0a:	76fb      	strb	r3, [r7, #27]
 8005d0c:	e007      	b.n	8005d1e <UART_SetConfig+0x282>
 8005d0e:	2308      	movs	r3, #8
 8005d10:	76fb      	strb	r3, [r7, #27]
 8005d12:	e004      	b.n	8005d1e <UART_SetConfig+0x282>
 8005d14:	2310      	movs	r3, #16
 8005d16:	76fb      	strb	r3, [r7, #27]
 8005d18:	e001      	b.n	8005d1e <UART_SetConfig+0x282>
 8005d1a:	2310      	movs	r3, #16
 8005d1c:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <UART_SetConfig+0x2e4>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	f040 8087 	bne.w	8005e38 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005d2a:	7efb      	ldrb	r3, [r7, #27]
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d837      	bhi.n	8005da0 <UART_SetConfig+0x304>
 8005d30:	a201      	add	r2, pc, #4	; (adr r2, 8005d38 <UART_SetConfig+0x29c>)
 8005d32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d36:	bf00      	nop
 8005d38:	08005d5d 	.word	0x08005d5d
 8005d3c:	08005da1 	.word	0x08005da1
 8005d40:	08005d65 	.word	0x08005d65
 8005d44:	08005da1 	.word	0x08005da1
 8005d48:	08005d6b 	.word	0x08005d6b
 8005d4c:	08005da1 	.word	0x08005da1
 8005d50:	08005da1 	.word	0x08005da1
 8005d54:	08005da1 	.word	0x08005da1
 8005d58:	08005d73 	.word	0x08005d73
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d5c:	f7fe ffc2 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8005d60:	6178      	str	r0, [r7, #20]
        break;
 8005d62:	e022      	b.n	8005daa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d64:	4b0d      	ldr	r3, [pc, #52]	; (8005d9c <UART_SetConfig+0x300>)
 8005d66:	617b      	str	r3, [r7, #20]
        break;
 8005d68:	e01f      	b.n	8005daa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d6a:	f7fe ff23 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8005d6e:	6178      	str	r0, [r7, #20]
        break;
 8005d70:	e01b      	b.n	8005daa <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d76:	617b      	str	r3, [r7, #20]
        break;
 8005d78:	e017      	b.n	8005daa <UART_SetConfig+0x30e>
 8005d7a:	bf00      	nop
 8005d7c:	efff69f3 	.word	0xefff69f3
 8005d80:	40008000 	.word	0x40008000
 8005d84:	40013800 	.word	0x40013800
 8005d88:	40021000 	.word	0x40021000
 8005d8c:	40004400 	.word	0x40004400
 8005d90:	40004800 	.word	0x40004800
 8005d94:	40004c00 	.word	0x40004c00
 8005d98:	40005000 	.word	0x40005000
 8005d9c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8005da0:	2300      	movs	r3, #0
 8005da2:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	76bb      	strb	r3, [r7, #26]
        break;
 8005da8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	f000 80f1 	beq.w	8005f94 <UART_SetConfig+0x4f8>
        }
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685a      	ldr	r2, [r3, #4]
 8005db6:	4613      	mov	r3, r2
 8005db8:	005b      	lsls	r3, r3, #1
 8005dba:	4413      	add	r3, r2
 8005dbc:	697a      	ldr	r2, [r7, #20]
 8005dbe:	429a      	cmp	r2, r3
 8005dc0:	d305      	bcc.n	8005dce <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d902      	bls.n	8005dd4 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	76bb      	strb	r3, [r7, #26]
 8005dd2:	e0df      	b.n	8005f94 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 8005dd4:	697b      	ldr	r3, [r7, #20]
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f04f 0100 	mov.w	r1, #0
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	020b      	lsls	r3, r1, #8
 8005de6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005dea:	0202      	lsls	r2, r0, #8
 8005dec:	6879      	ldr	r1, [r7, #4]
 8005dee:	6849      	ldr	r1, [r1, #4]
 8005df0:	0849      	lsrs	r1, r1, #1
 8005df2:	4608      	mov	r0, r1
 8005df4:	f04f 0100 	mov.w	r1, #0
 8005df8:	1814      	adds	r4, r2, r0
 8005dfa:	eb43 0501 	adc.w	r5, r3, r1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	685b      	ldr	r3, [r3, #4]
 8005e02:	461a      	mov	r2, r3
 8005e04:	f04f 0300 	mov.w	r3, #0
 8005e08:	4620      	mov	r0, r4
 8005e0a:	4629      	mov	r1, r5
 8005e0c:	f7fa fa30 	bl	8000270 <__aeabi_uldivmod>
 8005e10:	4602      	mov	r2, r0
 8005e12:	460b      	mov	r3, r1
 8005e14:	4613      	mov	r3, r2
 8005e16:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e1e:	d308      	bcc.n	8005e32 <UART_SetConfig+0x396>
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005e26:	d204      	bcs.n	8005e32 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	693a      	ldr	r2, [r7, #16]
 8005e2e:	60da      	str	r2, [r3, #12]
 8005e30:	e0b0      	b.n	8005f94 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 8005e32:	2301      	movs	r3, #1
 8005e34:	76bb      	strb	r3, [r7, #26]
 8005e36:	e0ad      	b.n	8005f94 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	69db      	ldr	r3, [r3, #28]
 8005e3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e40:	d15c      	bne.n	8005efc <UART_SetConfig+0x460>
  {
    switch (clocksource)
 8005e42:	7efb      	ldrb	r3, [r7, #27]
 8005e44:	2b08      	cmp	r3, #8
 8005e46:	d828      	bhi.n	8005e9a <UART_SetConfig+0x3fe>
 8005e48:	a201      	add	r2, pc, #4	; (adr r2, 8005e50 <UART_SetConfig+0x3b4>)
 8005e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4e:	bf00      	nop
 8005e50:	08005e75 	.word	0x08005e75
 8005e54:	08005e7d 	.word	0x08005e7d
 8005e58:	08005e85 	.word	0x08005e85
 8005e5c:	08005e9b 	.word	0x08005e9b
 8005e60:	08005e8b 	.word	0x08005e8b
 8005e64:	08005e9b 	.word	0x08005e9b
 8005e68:	08005e9b 	.word	0x08005e9b
 8005e6c:	08005e9b 	.word	0x08005e9b
 8005e70:	08005e93 	.word	0x08005e93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e74:	f7fe ff36 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8005e78:	6178      	str	r0, [r7, #20]
        break;
 8005e7a:	e013      	b.n	8005ea4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e7c:	f7fe ff48 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8005e80:	6178      	str	r0, [r7, #20]
        break;
 8005e82:	e00f      	b.n	8005ea4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e84:	4b49      	ldr	r3, [pc, #292]	; (8005fac <UART_SetConfig+0x510>)
 8005e86:	617b      	str	r3, [r7, #20]
        break;
 8005e88:	e00c      	b.n	8005ea4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e8a:	f7fe fe93 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8005e8e:	6178      	str	r0, [r7, #20]
        break;
 8005e90:	e008      	b.n	8005ea4 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e96:	617b      	str	r3, [r7, #20]
        break;
 8005e98:	e004      	b.n	8005ea4 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	76bb      	strb	r3, [r7, #26]
        break;
 8005ea2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d074      	beq.n	8005f94 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005eaa:	697b      	ldr	r3, [r7, #20]
 8005eac:	005a      	lsls	r2, r3, #1
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	085b      	lsrs	r3, r3, #1
 8005eb4:	441a      	add	r2, r3
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	685b      	ldr	r3, [r3, #4]
 8005eba:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ec2:	693b      	ldr	r3, [r7, #16]
 8005ec4:	2b0f      	cmp	r3, #15
 8005ec6:	d916      	bls.n	8005ef6 <UART_SetConfig+0x45a>
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ece:	d212      	bcs.n	8005ef6 <UART_SetConfig+0x45a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005ed0:	693b      	ldr	r3, [r7, #16]
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	f023 030f 	bic.w	r3, r3, #15
 8005ed8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005eda:	693b      	ldr	r3, [r7, #16]
 8005edc:	085b      	lsrs	r3, r3, #1
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	b29a      	uxth	r2, r3
 8005ee6:	89fb      	ldrh	r3, [r7, #14]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	89fa      	ldrh	r2, [r7, #14]
 8005ef2:	60da      	str	r2, [r3, #12]
 8005ef4:	e04e      	b.n	8005f94 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	76bb      	strb	r3, [r7, #26]
 8005efa:	e04b      	b.n	8005f94 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005efc:	7efb      	ldrb	r3, [r7, #27]
 8005efe:	2b08      	cmp	r3, #8
 8005f00:	d827      	bhi.n	8005f52 <UART_SetConfig+0x4b6>
 8005f02:	a201      	add	r2, pc, #4	; (adr r2, 8005f08 <UART_SetConfig+0x46c>)
 8005f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f08:	08005f2d 	.word	0x08005f2d
 8005f0c:	08005f35 	.word	0x08005f35
 8005f10:	08005f3d 	.word	0x08005f3d
 8005f14:	08005f53 	.word	0x08005f53
 8005f18:	08005f43 	.word	0x08005f43
 8005f1c:	08005f53 	.word	0x08005f53
 8005f20:	08005f53 	.word	0x08005f53
 8005f24:	08005f53 	.word	0x08005f53
 8005f28:	08005f4b 	.word	0x08005f4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005f2c:	f7fe feda 	bl	8004ce4 <HAL_RCC_GetPCLK1Freq>
 8005f30:	6178      	str	r0, [r7, #20]
        break;
 8005f32:	e013      	b.n	8005f5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005f34:	f7fe feec 	bl	8004d10 <HAL_RCC_GetPCLK2Freq>
 8005f38:	6178      	str	r0, [r7, #20]
        break;
 8005f3a:	e00f      	b.n	8005f5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005f3c:	4b1b      	ldr	r3, [pc, #108]	; (8005fac <UART_SetConfig+0x510>)
 8005f3e:	617b      	str	r3, [r7, #20]
        break;
 8005f40:	e00c      	b.n	8005f5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005f42:	f7fe fe37 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8005f46:	6178      	str	r0, [r7, #20]
        break;
 8005f48:	e008      	b.n	8005f5c <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005f4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f4e:	617b      	str	r3, [r7, #20]
        break;
 8005f50:	e004      	b.n	8005f5c <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8005f52:	2300      	movs	r3, #0
 8005f54:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	76bb      	strb	r3, [r7, #26]
        break;
 8005f5a:	bf00      	nop
    }

    if (pclk != 0U)
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d018      	beq.n	8005f94 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	085a      	lsrs	r2, r3, #1
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	441a      	add	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f74:	b29b      	uxth	r3, r3
 8005f76:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	2b0f      	cmp	r3, #15
 8005f7c:	d908      	bls.n	8005f90 <UART_SetConfig+0x4f4>
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f84:	d204      	bcs.n	8005f90 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = usartdiv;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	60da      	str	r2, [r3, #12]
 8005f8e:	e001      	b.n	8005f94 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8005f90:	2301      	movs	r3, #1
 8005f92:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2200      	movs	r2, #0
 8005f98:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8005fa0:	7ebb      	ldrb	r3, [r7, #26]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3720      	adds	r7, #32
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8005faa:	bf00      	nop
 8005fac:	00f42400 	.word	0x00f42400

08005fb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	f003 0301 	and.w	r3, r3, #1
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00a      	beq.n	8005fda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	430a      	orrs	r2, r1
 8005fd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d00a      	beq.n	8005ffc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	430a      	orrs	r2, r1
 8005ffa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006000:	f003 0304 	and.w	r3, r3, #4
 8006004:	2b00      	cmp	r3, #0
 8006006:	d00a      	beq.n	800601e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	430a      	orrs	r2, r1
 800601c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006022:	f003 0308 	and.w	r3, r3, #8
 8006026:	2b00      	cmp	r3, #0
 8006028:	d00a      	beq.n	8006040 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	430a      	orrs	r2, r1
 800603e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006044:	f003 0310 	and.w	r3, r3, #16
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00a      	beq.n	8006062 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	430a      	orrs	r2, r1
 8006060:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006066:	f003 0320 	and.w	r3, r3, #32
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00a      	beq.n	8006084 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	689b      	ldr	r3, [r3, #8]
 8006074:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	430a      	orrs	r2, r1
 8006082:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006088:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	d01a      	beq.n	80060c6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	685b      	ldr	r3, [r3, #4]
 8006096:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80060ae:	d10a      	bne.n	80060c6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	685b      	ldr	r3, [r3, #4]
 80060b6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	430a      	orrs	r2, r1
 80060c4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d00a      	beq.n	80060e8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	685b      	ldr	r3, [r3, #4]
 80060d8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	430a      	orrs	r2, r1
 80060e6:	605a      	str	r2, [r3, #4]
  }
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b086      	sub	sp, #24
 80060f8:	af02      	add	r7, sp, #8
 80060fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8006102:	f7fc fb03 	bl	800270c <HAL_GetTick>
 8006106:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f003 0308 	and.w	r3, r3, #8
 8006112:	2b08      	cmp	r3, #8
 8006114:	d10e      	bne.n	8006134 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006116:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800611a:	9300      	str	r3, [sp, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2200      	movs	r2, #0
 8006120:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f82a 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d001      	beq.n	8006134 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006130:	2303      	movs	r3, #3
 8006132:	e020      	b.n	8006176 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f003 0304 	and.w	r3, r3, #4
 800613e:	2b04      	cmp	r3, #4
 8006140:	d10e      	bne.n	8006160 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006142:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2200      	movs	r2, #0
 800614c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 f814 	bl	800617e <UART_WaitOnFlagUntilTimeout>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d001      	beq.n	8006160 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800615c:	2303      	movs	r3, #3
 800615e:	e00a      	b.n	8006176 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2220      	movs	r2, #32
 8006164:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2200      	movs	r2, #0
 8006170:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}

0800617e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800617e:	b580      	push	{r7, lr}
 8006180:	b084      	sub	sp, #16
 8006182:	af00      	add	r7, sp, #0
 8006184:	60f8      	str	r0, [r7, #12]
 8006186:	60b9      	str	r1, [r7, #8]
 8006188:	603b      	str	r3, [r7, #0]
 800618a:	4613      	mov	r3, r2
 800618c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800618e:	e05d      	b.n	800624c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006190:	69bb      	ldr	r3, [r7, #24]
 8006192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006196:	d059      	beq.n	800624c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006198:	f7fc fab8 	bl	800270c <HAL_GetTick>
 800619c:	4602      	mov	r2, r0
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	69ba      	ldr	r2, [r7, #24]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d302      	bcc.n	80061ae <UART_WaitOnFlagUntilTimeout+0x30>
 80061a8:	69bb      	ldr	r3, [r7, #24]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d11b      	bne.n	80061e6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80061bc:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	689a      	ldr	r2, [r3, #8]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0201 	bic.w	r2, r2, #1
 80061cc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2220      	movs	r2, #32
 80061d2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	2220      	movs	r2, #32
 80061d8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 80061e2:	2303      	movs	r3, #3
 80061e4:	e042      	b.n	800626c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d02b      	beq.n	800624c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	69db      	ldr	r3, [r3, #28]
 80061fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006202:	d123      	bne.n	800624c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800620c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800621c:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	689a      	ldr	r2, [r3, #8]
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f022 0201 	bic.w	r2, r2, #1
 800622c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	2220      	movs	r2, #32
 8006232:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2220      	movs	r2, #32
 8006238:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2220      	movs	r2, #32
 800623e:	67da      	str	r2, [r3, #124]	; 0x7c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

          return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e00f      	b.n	800626c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69da      	ldr	r2, [r3, #28]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	4013      	ands	r3, r2
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	429a      	cmp	r2, r3
 800625a:	bf0c      	ite	eq
 800625c:	2301      	moveq	r3, #1
 800625e:	2300      	movne	r3, #0
 8006260:	b2db      	uxtb	r3, r3
 8006262:	461a      	mov	r2, r3
 8006264:	79fb      	ldrb	r3, [r7, #7]
 8006266:	429a      	cmp	r2, r3
 8006268:	d092      	beq.n	8006190 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800626a:	2300      	movs	r3, #0
}
 800626c:	4618      	mov	r0, r3
 800626e:	3710      	adds	r7, #16
 8006270:	46bd      	mov	sp, r7
 8006272:	bd80      	pop	{r7, pc}

08006274 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006274:	b084      	sub	sp, #16
 8006276:	b580      	push	{r7, lr}
 8006278:	b084      	sub	sp, #16
 800627a:	af00      	add	r7, sp, #0
 800627c:	6078      	str	r0, [r7, #4]
 800627e:	f107 001c 	add.w	r0, r7, #28
 8006282:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	2b01      	cmp	r3, #1
 800628a:	d122      	bne.n	80062d2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006290:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80062a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062a4:	687a      	ldr	r2, [r7, #4]
 80062a6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	68db      	ldr	r3, [r3, #12]
 80062ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80062b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d105      	bne.n	80062c6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f000 fa30 	bl	800672c <USB_CoreReset>
 80062cc:	4603      	mov	r3, r0
 80062ce:	73fb      	strb	r3, [r7, #15]
 80062d0:	e01a      	b.n	8006308 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	68db      	ldr	r3, [r3, #12]
 80062d6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 80062de:	6878      	ldr	r0, [r7, #4]
 80062e0:	f000 fa24 	bl	800672c <USB_CoreReset>
 80062e4:	4603      	mov	r3, r0
 80062e6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80062e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d106      	bne.n	80062fc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	639a      	str	r2, [r3, #56]	; 0x38
 80062fa:	e005      	b.n	8006308 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006300:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 8006308:	7bfb      	ldrb	r3, [r7, #15]
}
 800630a:	4618      	mov	r0, r3
 800630c:	3710      	adds	r7, #16
 800630e:	46bd      	mov	sp, r7
 8006310:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006314:	b004      	add	sp, #16
 8006316:	4770      	bx	lr

08006318 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006318:	b480      	push	{r7}
 800631a:	b083      	sub	sp, #12
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	f023 0201 	bic.w	r2, r3, #1
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800632c:	2300      	movs	r3, #0
}
 800632e:	4618      	mov	r0, r3
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 800633a:	b580      	push	{r7, lr}
 800633c:	b082      	sub	sp, #8
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
 8006342:	460b      	mov	r3, r1
 8006344:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	68db      	ldr	r3, [r3, #12]
 800634a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006352:	78fb      	ldrb	r3, [r7, #3]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d106      	bne.n	8006366 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60da      	str	r2, [r3, #12]
 8006364:	e00b      	b.n	800637e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8006366:	78fb      	ldrb	r3, [r7, #3]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d106      	bne.n	800637a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	68db      	ldr	r3, [r3, #12]
 8006370:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	60da      	str	r2, [r3, #12]
 8006378:	e001      	b.n	800637e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 800637a:	2301      	movs	r3, #1
 800637c:	e003      	b.n	8006386 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800637e:	2032      	movs	r0, #50	; 0x32
 8006380:	f7fc f9d0 	bl	8002724 <HAL_Delay>

  return HAL_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3708      	adds	r7, #8
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006390:	b084      	sub	sp, #16
 8006392:	b580      	push	{r7, lr}
 8006394:	b086      	sub	sp, #24
 8006396:	af00      	add	r7, sp, #0
 8006398:	6078      	str	r0, [r7, #4]
 800639a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800639e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80063a2:	2300      	movs	r3, #0
 80063a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80063aa:	2300      	movs	r3, #0
 80063ac:	613b      	str	r3, [r7, #16]
 80063ae:	e009      	b.n	80063c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80063b0:	687a      	ldr	r2, [r7, #4]
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	3340      	adds	r3, #64	; 0x40
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	2200      	movs	r2, #0
 80063bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	3301      	adds	r3, #1
 80063c2:	613b      	str	r3, [r7, #16]
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b0e      	cmp	r3, #14
 80063c8:	d9f2      	bls.n	80063b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80063ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d11c      	bne.n	800640a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063de:	f043 0302 	orr.w	r3, r3, #2
 80063e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e005      	b.n	8006416 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800640e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800641c:	461a      	mov	r2, r3
 800641e:	2300      	movs	r3, #0
 8006420:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006428:	4619      	mov	r1, r3
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006430:	461a      	mov	r2, r3
 8006432:	680b      	ldr	r3, [r1, #0]
 8006434:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006436:	2103      	movs	r1, #3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f000 f93d 	bl	80066b8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800643e:	2110      	movs	r1, #16
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 f8f1 	bl	8006628 <USB_FlushTxFifo>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d001      	beq.n	8006450 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 f90f 	bl	8006674 <USB_FlushRxFifo>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d001      	beq.n	8006460 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 800645c:	2301      	movs	r3, #1
 800645e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006466:	461a      	mov	r2, r3
 8006468:	2300      	movs	r3, #0
 800646a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006472:	461a      	mov	r2, r3
 8006474:	2300      	movs	r3, #0
 8006476:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647e:	461a      	mov	r2, r3
 8006480:	2300      	movs	r3, #0
 8006482:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006484:	2300      	movs	r3, #0
 8006486:	613b      	str	r3, [r7, #16]
 8006488:	e043      	b.n	8006512 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	015a      	lsls	r2, r3, #5
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	4413      	add	r3, r2
 8006492:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800649c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80064a0:	d118      	bne.n	80064d4 <USB_DevInit+0x144>
    {
      if (i == 0U)
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d10a      	bne.n	80064be <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80064a8:	693b      	ldr	r3, [r7, #16]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064b4:	461a      	mov	r2, r3
 80064b6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	e013      	b.n	80064e6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80064be:	693b      	ldr	r3, [r7, #16]
 80064c0:	015a      	lsls	r2, r3, #5
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ca:	461a      	mov	r2, r3
 80064cc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80064d0:	6013      	str	r3, [r2, #0]
 80064d2:	e008      	b.n	80064e6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	015a      	lsls	r2, r3, #5
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	4413      	add	r3, r2
 80064dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064e0:	461a      	mov	r2, r3
 80064e2:	2300      	movs	r3, #0
 80064e4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	015a      	lsls	r2, r3, #5
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	4413      	add	r3, r2
 80064ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064f2:	461a      	mov	r2, r3
 80064f4:	2300      	movs	r3, #0
 80064f6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	015a      	lsls	r2, r3, #5
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	4413      	add	r3, r2
 8006500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006504:	461a      	mov	r2, r3
 8006506:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800650a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	3301      	adds	r3, #1
 8006510:	613b      	str	r3, [r7, #16]
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	429a      	cmp	r2, r3
 8006518:	d3b7      	bcc.n	800648a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800651a:	2300      	movs	r3, #0
 800651c:	613b      	str	r3, [r7, #16]
 800651e:	e043      	b.n	80065a8 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	015a      	lsls	r2, r3, #5
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	4413      	add	r3, r2
 8006528:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006532:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006536:	d118      	bne.n	800656a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	015a      	lsls	r2, r3, #5
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4413      	add	r3, r2
 8006546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800654a:	461a      	mov	r2, r3
 800654c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	e013      	b.n	800657c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006554:	693b      	ldr	r3, [r7, #16]
 8006556:	015a      	lsls	r2, r3, #5
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	4413      	add	r3, r2
 800655c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006560:	461a      	mov	r2, r3
 8006562:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006566:	6013      	str	r3, [r2, #0]
 8006568:	e008      	b.n	800657c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800656a:	693b      	ldr	r3, [r7, #16]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	461a      	mov	r2, r3
 8006578:	2300      	movs	r3, #0
 800657a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	4413      	add	r3, r2
 8006584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006588:	461a      	mov	r2, r3
 800658a:	2300      	movs	r3, #0
 800658c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	015a      	lsls	r2, r3, #5
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	4413      	add	r3, r2
 8006596:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659a:	461a      	mov	r2, r3
 800659c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80065a0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80065a2:	693b      	ldr	r3, [r7, #16]
 80065a4:	3301      	adds	r3, #1
 80065a6:	613b      	str	r3, [r7, #16]
 80065a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d3b7      	bcc.n	8006520 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065b6:	691b      	ldr	r3, [r3, #16]
 80065b8:	68fa      	ldr	r2, [r7, #12]
 80065ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065be:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80065c2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2200      	movs	r2, #0
 80065c8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80065d0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	699b      	ldr	r3, [r3, #24]
 80065d6:	f043 0210 	orr.w	r2, r3, #16
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <USB_DevInit+0x294>)
 80065e4:	4313      	orrs	r3, r2
 80065e6:	687a      	ldr	r2, [r7, #4]
 80065e8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80065ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d005      	beq.n	80065fc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	699b      	ldr	r3, [r3, #24]
 80065f4:	f043 0208 	orr.w	r2, r3, #8
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80065fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80065fe:	2b01      	cmp	r3, #1
 8006600:	d107      	bne.n	8006612 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	699b      	ldr	r3, [r3, #24]
 8006606:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800660a:	f043 0304 	orr.w	r3, r3, #4
 800660e:	687a      	ldr	r2, [r7, #4]
 8006610:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006612:	7dfb      	ldrb	r3, [r7, #23]
}
 8006614:	4618      	mov	r0, r3
 8006616:	3718      	adds	r7, #24
 8006618:	46bd      	mov	sp, r7
 800661a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800661e:	b004      	add	sp, #16
 8006620:	4770      	bx	lr
 8006622:	bf00      	nop
 8006624:	803c3800 	.word	0x803c3800

08006628 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
 8006630:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8006632:	2300      	movs	r3, #0
 8006634:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006636:	683b      	ldr	r3, [r7, #0]
 8006638:	019b      	lsls	r3, r3, #6
 800663a:	f043 0220 	orr.w	r2, r3, #32
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3301      	adds	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4a09      	ldr	r2, [pc, #36]	; (8006670 <USB_FlushTxFifo+0x48>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d901      	bls.n	8006654 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8006650:	2303      	movs	r3, #3
 8006652:	e006      	b.n	8006662 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	f003 0320 	and.w	r3, r3, #32
 800665c:	2b20      	cmp	r3, #32
 800665e:	d0f0      	beq.n	8006642 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8006660:	2300      	movs	r3, #0
}
 8006662:	4618      	mov	r0, r3
 8006664:	3714      	adds	r7, #20
 8006666:	46bd      	mov	sp, r7
 8006668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	00030d40 	.word	0x00030d40

08006674 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006674:	b480      	push	{r7}
 8006676:	b085      	sub	sp, #20
 8006678:	af00      	add	r7, sp, #0
 800667a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 800667c:	2300      	movs	r3, #0
 800667e:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2210      	movs	r2, #16
 8006684:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	3301      	adds	r3, #1
 800668a:	60fb      	str	r3, [r7, #12]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	4a09      	ldr	r2, [pc, #36]	; (80066b4 <USB_FlushRxFifo+0x40>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d901      	bls.n	8006698 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e006      	b.n	80066a6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	691b      	ldr	r3, [r3, #16]
 800669c:	f003 0310 	and.w	r3, r3, #16
 80066a0:	2b10      	cmp	r3, #16
 80066a2:	d0f0      	beq.n	8006686 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80066a4:	2300      	movs	r3, #0
}
 80066a6:	4618      	mov	r0, r3
 80066a8:	3714      	adds	r7, #20
 80066aa:	46bd      	mov	sp, r7
 80066ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	00030d40 	.word	0x00030d40

080066b8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80066b8:	b480      	push	{r7}
 80066ba:	b085      	sub	sp, #20
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80066ce:	681a      	ldr	r2, [r3, #0]
 80066d0:	78fb      	ldrb	r3, [r7, #3]
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80066d8:	4313      	orrs	r3, r2
 80066da:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80066ea:	b480      	push	{r7}
 80066ec:	b085      	sub	sp, #20
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68fa      	ldr	r2, [r7, #12]
 8006700:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006704:	f023 0303 	bic.w	r3, r3, #3
 8006708:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006710:	685b      	ldr	r3, [r3, #4]
 8006712:	68fa      	ldr	r2, [r7, #12]
 8006714:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006718:	f043 0302 	orr.w	r3, r3, #2
 800671c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800671e:	2300      	movs	r3, #0
}
 8006720:	4618      	mov	r0, r3
 8006722:	3714      	adds	r7, #20
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8006734:	2300      	movs	r3, #0
 8006736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	4a13      	ldr	r2, [pc, #76]	; (8006790 <USB_CoreReset+0x64>)
 8006742:	4293      	cmp	r3, r2
 8006744:	d901      	bls.n	800674a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006746:	2303      	movs	r3, #3
 8006748:	e01b      	b.n	8006782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	691b      	ldr	r3, [r3, #16]
 800674e:	2b00      	cmp	r3, #0
 8006750:	daf2      	bge.n	8006738 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	691b      	ldr	r3, [r3, #16]
 800675a:	f043 0201 	orr.w	r2, r3, #1
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	3301      	adds	r3, #1
 8006766:	60fb      	str	r3, [r7, #12]
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	4a09      	ldr	r2, [pc, #36]	; (8006790 <USB_CoreReset+0x64>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d901      	bls.n	8006774 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e006      	b.n	8006782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	f003 0301 	and.w	r3, r3, #1
 800677c:	2b01      	cmp	r3, #1
 800677e:	d0f0      	beq.n	8006762 <USB_CoreReset+0x36>

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3714      	adds	r7, #20
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	00030d40 	.word	0x00030d40

08006794 <__errno>:
 8006794:	4b01      	ldr	r3, [pc, #4]	; (800679c <__errno+0x8>)
 8006796:	6818      	ldr	r0, [r3, #0]
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	2000000c 	.word	0x2000000c

080067a0 <__libc_init_array>:
 80067a0:	b570      	push	{r4, r5, r6, lr}
 80067a2:	4d0d      	ldr	r5, [pc, #52]	; (80067d8 <__libc_init_array+0x38>)
 80067a4:	4c0d      	ldr	r4, [pc, #52]	; (80067dc <__libc_init_array+0x3c>)
 80067a6:	1b64      	subs	r4, r4, r5
 80067a8:	10a4      	asrs	r4, r4, #2
 80067aa:	2600      	movs	r6, #0
 80067ac:	42a6      	cmp	r6, r4
 80067ae:	d109      	bne.n	80067c4 <__libc_init_array+0x24>
 80067b0:	4d0b      	ldr	r5, [pc, #44]	; (80067e0 <__libc_init_array+0x40>)
 80067b2:	4c0c      	ldr	r4, [pc, #48]	; (80067e4 <__libc_init_array+0x44>)
 80067b4:	f000 ff76 	bl	80076a4 <_init>
 80067b8:	1b64      	subs	r4, r4, r5
 80067ba:	10a4      	asrs	r4, r4, #2
 80067bc:	2600      	movs	r6, #0
 80067be:	42a6      	cmp	r6, r4
 80067c0:	d105      	bne.n	80067ce <__libc_init_array+0x2e>
 80067c2:	bd70      	pop	{r4, r5, r6, pc}
 80067c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80067c8:	4798      	blx	r3
 80067ca:	3601      	adds	r6, #1
 80067cc:	e7ee      	b.n	80067ac <__libc_init_array+0xc>
 80067ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80067d2:	4798      	blx	r3
 80067d4:	3601      	adds	r6, #1
 80067d6:	e7f2      	b.n	80067be <__libc_init_array+0x1e>
 80067d8:	080077b8 	.word	0x080077b8
 80067dc:	080077b8 	.word	0x080077b8
 80067e0:	080077b8 	.word	0x080077b8
 80067e4:	080077bc 	.word	0x080077bc

080067e8 <memset>:
 80067e8:	4402      	add	r2, r0
 80067ea:	4603      	mov	r3, r0
 80067ec:	4293      	cmp	r3, r2
 80067ee:	d100      	bne.n	80067f2 <memset+0xa>
 80067f0:	4770      	bx	lr
 80067f2:	f803 1b01 	strb.w	r1, [r3], #1
 80067f6:	e7f9      	b.n	80067ec <memset+0x4>

080067f8 <iprintf>:
 80067f8:	b40f      	push	{r0, r1, r2, r3}
 80067fa:	4b0a      	ldr	r3, [pc, #40]	; (8006824 <iprintf+0x2c>)
 80067fc:	b513      	push	{r0, r1, r4, lr}
 80067fe:	681c      	ldr	r4, [r3, #0]
 8006800:	b124      	cbz	r4, 800680c <iprintf+0x14>
 8006802:	69a3      	ldr	r3, [r4, #24]
 8006804:	b913      	cbnz	r3, 800680c <iprintf+0x14>
 8006806:	4620      	mov	r0, r4
 8006808:	f000 f866 	bl	80068d8 <__sinit>
 800680c:	ab05      	add	r3, sp, #20
 800680e:	9a04      	ldr	r2, [sp, #16]
 8006810:	68a1      	ldr	r1, [r4, #8]
 8006812:	9301      	str	r3, [sp, #4]
 8006814:	4620      	mov	r0, r4
 8006816:	f000 f983 	bl	8006b20 <_vfiprintf_r>
 800681a:	b002      	add	sp, #8
 800681c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006820:	b004      	add	sp, #16
 8006822:	4770      	bx	lr
 8006824:	2000000c 	.word	0x2000000c

08006828 <std>:
 8006828:	2300      	movs	r3, #0
 800682a:	b510      	push	{r4, lr}
 800682c:	4604      	mov	r4, r0
 800682e:	e9c0 3300 	strd	r3, r3, [r0]
 8006832:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006836:	6083      	str	r3, [r0, #8]
 8006838:	8181      	strh	r1, [r0, #12]
 800683a:	6643      	str	r3, [r0, #100]	; 0x64
 800683c:	81c2      	strh	r2, [r0, #14]
 800683e:	6183      	str	r3, [r0, #24]
 8006840:	4619      	mov	r1, r3
 8006842:	2208      	movs	r2, #8
 8006844:	305c      	adds	r0, #92	; 0x5c
 8006846:	f7ff ffcf 	bl	80067e8 <memset>
 800684a:	4b05      	ldr	r3, [pc, #20]	; (8006860 <std+0x38>)
 800684c:	6263      	str	r3, [r4, #36]	; 0x24
 800684e:	4b05      	ldr	r3, [pc, #20]	; (8006864 <std+0x3c>)
 8006850:	62a3      	str	r3, [r4, #40]	; 0x28
 8006852:	4b05      	ldr	r3, [pc, #20]	; (8006868 <std+0x40>)
 8006854:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006856:	4b05      	ldr	r3, [pc, #20]	; (800686c <std+0x44>)
 8006858:	6224      	str	r4, [r4, #32]
 800685a:	6323      	str	r3, [r4, #48]	; 0x30
 800685c:	bd10      	pop	{r4, pc}
 800685e:	bf00      	nop
 8006860:	080070c9 	.word	0x080070c9
 8006864:	080070eb 	.word	0x080070eb
 8006868:	08007123 	.word	0x08007123
 800686c:	08007147 	.word	0x08007147

08006870 <_cleanup_r>:
 8006870:	4901      	ldr	r1, [pc, #4]	; (8006878 <_cleanup_r+0x8>)
 8006872:	f000 b8af 	b.w	80069d4 <_fwalk_reent>
 8006876:	bf00      	nop
 8006878:	08007421 	.word	0x08007421

0800687c <__sfmoreglue>:
 800687c:	b570      	push	{r4, r5, r6, lr}
 800687e:	1e4a      	subs	r2, r1, #1
 8006880:	2568      	movs	r5, #104	; 0x68
 8006882:	4355      	muls	r5, r2
 8006884:	460e      	mov	r6, r1
 8006886:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800688a:	f000 f8c5 	bl	8006a18 <_malloc_r>
 800688e:	4604      	mov	r4, r0
 8006890:	b140      	cbz	r0, 80068a4 <__sfmoreglue+0x28>
 8006892:	2100      	movs	r1, #0
 8006894:	e9c0 1600 	strd	r1, r6, [r0]
 8006898:	300c      	adds	r0, #12
 800689a:	60a0      	str	r0, [r4, #8]
 800689c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80068a0:	f7ff ffa2 	bl	80067e8 <memset>
 80068a4:	4620      	mov	r0, r4
 80068a6:	bd70      	pop	{r4, r5, r6, pc}

080068a8 <__sfp_lock_acquire>:
 80068a8:	4801      	ldr	r0, [pc, #4]	; (80068b0 <__sfp_lock_acquire+0x8>)
 80068aa:	f000 b8b3 	b.w	8006a14 <__retarget_lock_acquire_recursive>
 80068ae:	bf00      	nop
 80068b0:	20000738 	.word	0x20000738

080068b4 <__sfp_lock_release>:
 80068b4:	4801      	ldr	r0, [pc, #4]	; (80068bc <__sfp_lock_release+0x8>)
 80068b6:	f000 b8ae 	b.w	8006a16 <__retarget_lock_release_recursive>
 80068ba:	bf00      	nop
 80068bc:	20000738 	.word	0x20000738

080068c0 <__sinit_lock_acquire>:
 80068c0:	4801      	ldr	r0, [pc, #4]	; (80068c8 <__sinit_lock_acquire+0x8>)
 80068c2:	f000 b8a7 	b.w	8006a14 <__retarget_lock_acquire_recursive>
 80068c6:	bf00      	nop
 80068c8:	20000733 	.word	0x20000733

080068cc <__sinit_lock_release>:
 80068cc:	4801      	ldr	r0, [pc, #4]	; (80068d4 <__sinit_lock_release+0x8>)
 80068ce:	f000 b8a2 	b.w	8006a16 <__retarget_lock_release_recursive>
 80068d2:	bf00      	nop
 80068d4:	20000733 	.word	0x20000733

080068d8 <__sinit>:
 80068d8:	b510      	push	{r4, lr}
 80068da:	4604      	mov	r4, r0
 80068dc:	f7ff fff0 	bl	80068c0 <__sinit_lock_acquire>
 80068e0:	69a3      	ldr	r3, [r4, #24]
 80068e2:	b11b      	cbz	r3, 80068ec <__sinit+0x14>
 80068e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80068e8:	f7ff bff0 	b.w	80068cc <__sinit_lock_release>
 80068ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80068f0:	6523      	str	r3, [r4, #80]	; 0x50
 80068f2:	4b13      	ldr	r3, [pc, #76]	; (8006940 <__sinit+0x68>)
 80068f4:	4a13      	ldr	r2, [pc, #76]	; (8006944 <__sinit+0x6c>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80068fa:	42a3      	cmp	r3, r4
 80068fc:	bf04      	itt	eq
 80068fe:	2301      	moveq	r3, #1
 8006900:	61a3      	streq	r3, [r4, #24]
 8006902:	4620      	mov	r0, r4
 8006904:	f000 f820 	bl	8006948 <__sfp>
 8006908:	6060      	str	r0, [r4, #4]
 800690a:	4620      	mov	r0, r4
 800690c:	f000 f81c 	bl	8006948 <__sfp>
 8006910:	60a0      	str	r0, [r4, #8]
 8006912:	4620      	mov	r0, r4
 8006914:	f000 f818 	bl	8006948 <__sfp>
 8006918:	2200      	movs	r2, #0
 800691a:	60e0      	str	r0, [r4, #12]
 800691c:	2104      	movs	r1, #4
 800691e:	6860      	ldr	r0, [r4, #4]
 8006920:	f7ff ff82 	bl	8006828 <std>
 8006924:	68a0      	ldr	r0, [r4, #8]
 8006926:	2201      	movs	r2, #1
 8006928:	2109      	movs	r1, #9
 800692a:	f7ff ff7d 	bl	8006828 <std>
 800692e:	68e0      	ldr	r0, [r4, #12]
 8006930:	2202      	movs	r2, #2
 8006932:	2112      	movs	r1, #18
 8006934:	f7ff ff78 	bl	8006828 <std>
 8006938:	2301      	movs	r3, #1
 800693a:	61a3      	str	r3, [r4, #24]
 800693c:	e7d2      	b.n	80068e4 <__sinit+0xc>
 800693e:	bf00      	nop
 8006940:	08007718 	.word	0x08007718
 8006944:	08006871 	.word	0x08006871

08006948 <__sfp>:
 8006948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800694a:	4607      	mov	r7, r0
 800694c:	f7ff ffac 	bl	80068a8 <__sfp_lock_acquire>
 8006950:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <__sfp+0x84>)
 8006952:	681e      	ldr	r6, [r3, #0]
 8006954:	69b3      	ldr	r3, [r6, #24]
 8006956:	b913      	cbnz	r3, 800695e <__sfp+0x16>
 8006958:	4630      	mov	r0, r6
 800695a:	f7ff ffbd 	bl	80068d8 <__sinit>
 800695e:	3648      	adds	r6, #72	; 0x48
 8006960:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006964:	3b01      	subs	r3, #1
 8006966:	d503      	bpl.n	8006970 <__sfp+0x28>
 8006968:	6833      	ldr	r3, [r6, #0]
 800696a:	b30b      	cbz	r3, 80069b0 <__sfp+0x68>
 800696c:	6836      	ldr	r6, [r6, #0]
 800696e:	e7f7      	b.n	8006960 <__sfp+0x18>
 8006970:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006974:	b9d5      	cbnz	r5, 80069ac <__sfp+0x64>
 8006976:	4b16      	ldr	r3, [pc, #88]	; (80069d0 <__sfp+0x88>)
 8006978:	60e3      	str	r3, [r4, #12]
 800697a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800697e:	6665      	str	r5, [r4, #100]	; 0x64
 8006980:	f000 f847 	bl	8006a12 <__retarget_lock_init_recursive>
 8006984:	f7ff ff96 	bl	80068b4 <__sfp_lock_release>
 8006988:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800698c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006990:	6025      	str	r5, [r4, #0]
 8006992:	61a5      	str	r5, [r4, #24]
 8006994:	2208      	movs	r2, #8
 8006996:	4629      	mov	r1, r5
 8006998:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800699c:	f7ff ff24 	bl	80067e8 <memset>
 80069a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80069a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80069a8:	4620      	mov	r0, r4
 80069aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069ac:	3468      	adds	r4, #104	; 0x68
 80069ae:	e7d9      	b.n	8006964 <__sfp+0x1c>
 80069b0:	2104      	movs	r1, #4
 80069b2:	4638      	mov	r0, r7
 80069b4:	f7ff ff62 	bl	800687c <__sfmoreglue>
 80069b8:	4604      	mov	r4, r0
 80069ba:	6030      	str	r0, [r6, #0]
 80069bc:	2800      	cmp	r0, #0
 80069be:	d1d5      	bne.n	800696c <__sfp+0x24>
 80069c0:	f7ff ff78 	bl	80068b4 <__sfp_lock_release>
 80069c4:	230c      	movs	r3, #12
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	e7ee      	b.n	80069a8 <__sfp+0x60>
 80069ca:	bf00      	nop
 80069cc:	08007718 	.word	0x08007718
 80069d0:	ffff0001 	.word	0xffff0001

080069d4 <_fwalk_reent>:
 80069d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069d8:	4606      	mov	r6, r0
 80069da:	4688      	mov	r8, r1
 80069dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80069e0:	2700      	movs	r7, #0
 80069e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80069e6:	f1b9 0901 	subs.w	r9, r9, #1
 80069ea:	d505      	bpl.n	80069f8 <_fwalk_reent+0x24>
 80069ec:	6824      	ldr	r4, [r4, #0]
 80069ee:	2c00      	cmp	r4, #0
 80069f0:	d1f7      	bne.n	80069e2 <_fwalk_reent+0xe>
 80069f2:	4638      	mov	r0, r7
 80069f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069f8:	89ab      	ldrh	r3, [r5, #12]
 80069fa:	2b01      	cmp	r3, #1
 80069fc:	d907      	bls.n	8006a0e <_fwalk_reent+0x3a>
 80069fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006a02:	3301      	adds	r3, #1
 8006a04:	d003      	beq.n	8006a0e <_fwalk_reent+0x3a>
 8006a06:	4629      	mov	r1, r5
 8006a08:	4630      	mov	r0, r6
 8006a0a:	47c0      	blx	r8
 8006a0c:	4307      	orrs	r7, r0
 8006a0e:	3568      	adds	r5, #104	; 0x68
 8006a10:	e7e9      	b.n	80069e6 <_fwalk_reent+0x12>

08006a12 <__retarget_lock_init_recursive>:
 8006a12:	4770      	bx	lr

08006a14 <__retarget_lock_acquire_recursive>:
 8006a14:	4770      	bx	lr

08006a16 <__retarget_lock_release_recursive>:
 8006a16:	4770      	bx	lr

08006a18 <_malloc_r>:
 8006a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a1a:	1ccd      	adds	r5, r1, #3
 8006a1c:	f025 0503 	bic.w	r5, r5, #3
 8006a20:	3508      	adds	r5, #8
 8006a22:	2d0c      	cmp	r5, #12
 8006a24:	bf38      	it	cc
 8006a26:	250c      	movcc	r5, #12
 8006a28:	2d00      	cmp	r5, #0
 8006a2a:	4606      	mov	r6, r0
 8006a2c:	db01      	blt.n	8006a32 <_malloc_r+0x1a>
 8006a2e:	42a9      	cmp	r1, r5
 8006a30:	d903      	bls.n	8006a3a <_malloc_r+0x22>
 8006a32:	230c      	movs	r3, #12
 8006a34:	6033      	str	r3, [r6, #0]
 8006a36:	2000      	movs	r0, #0
 8006a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a3a:	f000 fda3 	bl	8007584 <__malloc_lock>
 8006a3e:	4921      	ldr	r1, [pc, #132]	; (8006ac4 <_malloc_r+0xac>)
 8006a40:	680a      	ldr	r2, [r1, #0]
 8006a42:	4614      	mov	r4, r2
 8006a44:	b99c      	cbnz	r4, 8006a6e <_malloc_r+0x56>
 8006a46:	4f20      	ldr	r7, [pc, #128]	; (8006ac8 <_malloc_r+0xb0>)
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	b923      	cbnz	r3, 8006a56 <_malloc_r+0x3e>
 8006a4c:	4621      	mov	r1, r4
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f000 fb2a 	bl	80070a8 <_sbrk_r>
 8006a54:	6038      	str	r0, [r7, #0]
 8006a56:	4629      	mov	r1, r5
 8006a58:	4630      	mov	r0, r6
 8006a5a:	f000 fb25 	bl	80070a8 <_sbrk_r>
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	d123      	bne.n	8006aaa <_malloc_r+0x92>
 8006a62:	230c      	movs	r3, #12
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 fd92 	bl	8007590 <__malloc_unlock>
 8006a6c:	e7e3      	b.n	8006a36 <_malloc_r+0x1e>
 8006a6e:	6823      	ldr	r3, [r4, #0]
 8006a70:	1b5b      	subs	r3, r3, r5
 8006a72:	d417      	bmi.n	8006aa4 <_malloc_r+0x8c>
 8006a74:	2b0b      	cmp	r3, #11
 8006a76:	d903      	bls.n	8006a80 <_malloc_r+0x68>
 8006a78:	6023      	str	r3, [r4, #0]
 8006a7a:	441c      	add	r4, r3
 8006a7c:	6025      	str	r5, [r4, #0]
 8006a7e:	e004      	b.n	8006a8a <_malloc_r+0x72>
 8006a80:	6863      	ldr	r3, [r4, #4]
 8006a82:	42a2      	cmp	r2, r4
 8006a84:	bf0c      	ite	eq
 8006a86:	600b      	streq	r3, [r1, #0]
 8006a88:	6053      	strne	r3, [r2, #4]
 8006a8a:	4630      	mov	r0, r6
 8006a8c:	f000 fd80 	bl	8007590 <__malloc_unlock>
 8006a90:	f104 000b 	add.w	r0, r4, #11
 8006a94:	1d23      	adds	r3, r4, #4
 8006a96:	f020 0007 	bic.w	r0, r0, #7
 8006a9a:	1ac2      	subs	r2, r0, r3
 8006a9c:	d0cc      	beq.n	8006a38 <_malloc_r+0x20>
 8006a9e:	1a1b      	subs	r3, r3, r0
 8006aa0:	50a3      	str	r3, [r4, r2]
 8006aa2:	e7c9      	b.n	8006a38 <_malloc_r+0x20>
 8006aa4:	4622      	mov	r2, r4
 8006aa6:	6864      	ldr	r4, [r4, #4]
 8006aa8:	e7cc      	b.n	8006a44 <_malloc_r+0x2c>
 8006aaa:	1cc4      	adds	r4, r0, #3
 8006aac:	f024 0403 	bic.w	r4, r4, #3
 8006ab0:	42a0      	cmp	r0, r4
 8006ab2:	d0e3      	beq.n	8006a7c <_malloc_r+0x64>
 8006ab4:	1a21      	subs	r1, r4, r0
 8006ab6:	4630      	mov	r0, r6
 8006ab8:	f000 faf6 	bl	80070a8 <_sbrk_r>
 8006abc:	3001      	adds	r0, #1
 8006abe:	d1dd      	bne.n	8006a7c <_malloc_r+0x64>
 8006ac0:	e7cf      	b.n	8006a62 <_malloc_r+0x4a>
 8006ac2:	bf00      	nop
 8006ac4:	200000bc 	.word	0x200000bc
 8006ac8:	200000c0 	.word	0x200000c0

08006acc <__sfputc_r>:
 8006acc:	6893      	ldr	r3, [r2, #8]
 8006ace:	3b01      	subs	r3, #1
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	b410      	push	{r4}
 8006ad4:	6093      	str	r3, [r2, #8]
 8006ad6:	da08      	bge.n	8006aea <__sfputc_r+0x1e>
 8006ad8:	6994      	ldr	r4, [r2, #24]
 8006ada:	42a3      	cmp	r3, r4
 8006adc:	db01      	blt.n	8006ae2 <__sfputc_r+0x16>
 8006ade:	290a      	cmp	r1, #10
 8006ae0:	d103      	bne.n	8006aea <__sfputc_r+0x1e>
 8006ae2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006ae6:	f000 bb33 	b.w	8007150 <__swbuf_r>
 8006aea:	6813      	ldr	r3, [r2, #0]
 8006aec:	1c58      	adds	r0, r3, #1
 8006aee:	6010      	str	r0, [r2, #0]
 8006af0:	7019      	strb	r1, [r3, #0]
 8006af2:	4608      	mov	r0, r1
 8006af4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006af8:	4770      	bx	lr

08006afa <__sfputs_r>:
 8006afa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006afc:	4606      	mov	r6, r0
 8006afe:	460f      	mov	r7, r1
 8006b00:	4614      	mov	r4, r2
 8006b02:	18d5      	adds	r5, r2, r3
 8006b04:	42ac      	cmp	r4, r5
 8006b06:	d101      	bne.n	8006b0c <__sfputs_r+0x12>
 8006b08:	2000      	movs	r0, #0
 8006b0a:	e007      	b.n	8006b1c <__sfputs_r+0x22>
 8006b0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b10:	463a      	mov	r2, r7
 8006b12:	4630      	mov	r0, r6
 8006b14:	f7ff ffda 	bl	8006acc <__sfputc_r>
 8006b18:	1c43      	adds	r3, r0, #1
 8006b1a:	d1f3      	bne.n	8006b04 <__sfputs_r+0xa>
 8006b1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b20 <_vfiprintf_r>:
 8006b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b24:	460d      	mov	r5, r1
 8006b26:	b09d      	sub	sp, #116	; 0x74
 8006b28:	4614      	mov	r4, r2
 8006b2a:	4698      	mov	r8, r3
 8006b2c:	4606      	mov	r6, r0
 8006b2e:	b118      	cbz	r0, 8006b38 <_vfiprintf_r+0x18>
 8006b30:	6983      	ldr	r3, [r0, #24]
 8006b32:	b90b      	cbnz	r3, 8006b38 <_vfiprintf_r+0x18>
 8006b34:	f7ff fed0 	bl	80068d8 <__sinit>
 8006b38:	4b89      	ldr	r3, [pc, #548]	; (8006d60 <_vfiprintf_r+0x240>)
 8006b3a:	429d      	cmp	r5, r3
 8006b3c:	d11b      	bne.n	8006b76 <_vfiprintf_r+0x56>
 8006b3e:	6875      	ldr	r5, [r6, #4]
 8006b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b42:	07d9      	lsls	r1, r3, #31
 8006b44:	d405      	bmi.n	8006b52 <_vfiprintf_r+0x32>
 8006b46:	89ab      	ldrh	r3, [r5, #12]
 8006b48:	059a      	lsls	r2, r3, #22
 8006b4a:	d402      	bmi.n	8006b52 <_vfiprintf_r+0x32>
 8006b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b4e:	f7ff ff61 	bl	8006a14 <__retarget_lock_acquire_recursive>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	071b      	lsls	r3, r3, #28
 8006b56:	d501      	bpl.n	8006b5c <_vfiprintf_r+0x3c>
 8006b58:	692b      	ldr	r3, [r5, #16]
 8006b5a:	b9eb      	cbnz	r3, 8006b98 <_vfiprintf_r+0x78>
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f000 fb5a 	bl	8007218 <__swsetup_r>
 8006b64:	b1c0      	cbz	r0, 8006b98 <_vfiprintf_r+0x78>
 8006b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b68:	07dc      	lsls	r4, r3, #31
 8006b6a:	d50e      	bpl.n	8006b8a <_vfiprintf_r+0x6a>
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	b01d      	add	sp, #116	; 0x74
 8006b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b76:	4b7b      	ldr	r3, [pc, #492]	; (8006d64 <_vfiprintf_r+0x244>)
 8006b78:	429d      	cmp	r5, r3
 8006b7a:	d101      	bne.n	8006b80 <_vfiprintf_r+0x60>
 8006b7c:	68b5      	ldr	r5, [r6, #8]
 8006b7e:	e7df      	b.n	8006b40 <_vfiprintf_r+0x20>
 8006b80:	4b79      	ldr	r3, [pc, #484]	; (8006d68 <_vfiprintf_r+0x248>)
 8006b82:	429d      	cmp	r5, r3
 8006b84:	bf08      	it	eq
 8006b86:	68f5      	ldreq	r5, [r6, #12]
 8006b88:	e7da      	b.n	8006b40 <_vfiprintf_r+0x20>
 8006b8a:	89ab      	ldrh	r3, [r5, #12]
 8006b8c:	0598      	lsls	r0, r3, #22
 8006b8e:	d4ed      	bmi.n	8006b6c <_vfiprintf_r+0x4c>
 8006b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b92:	f7ff ff40 	bl	8006a16 <__retarget_lock_release_recursive>
 8006b96:	e7e9      	b.n	8006b6c <_vfiprintf_r+0x4c>
 8006b98:	2300      	movs	r3, #0
 8006b9a:	9309      	str	r3, [sp, #36]	; 0x24
 8006b9c:	2320      	movs	r3, #32
 8006b9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006ba2:	f8cd 800c 	str.w	r8, [sp, #12]
 8006ba6:	2330      	movs	r3, #48	; 0x30
 8006ba8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006d6c <_vfiprintf_r+0x24c>
 8006bac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006bb0:	f04f 0901 	mov.w	r9, #1
 8006bb4:	4623      	mov	r3, r4
 8006bb6:	469a      	mov	sl, r3
 8006bb8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006bbc:	b10a      	cbz	r2, 8006bc2 <_vfiprintf_r+0xa2>
 8006bbe:	2a25      	cmp	r2, #37	; 0x25
 8006bc0:	d1f9      	bne.n	8006bb6 <_vfiprintf_r+0x96>
 8006bc2:	ebba 0b04 	subs.w	fp, sl, r4
 8006bc6:	d00b      	beq.n	8006be0 <_vfiprintf_r+0xc0>
 8006bc8:	465b      	mov	r3, fp
 8006bca:	4622      	mov	r2, r4
 8006bcc:	4629      	mov	r1, r5
 8006bce:	4630      	mov	r0, r6
 8006bd0:	f7ff ff93 	bl	8006afa <__sfputs_r>
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	f000 80aa 	beq.w	8006d2e <_vfiprintf_r+0x20e>
 8006bda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bdc:	445a      	add	r2, fp
 8006bde:	9209      	str	r2, [sp, #36]	; 0x24
 8006be0:	f89a 3000 	ldrb.w	r3, [sl]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 80a2 	beq.w	8006d2e <_vfiprintf_r+0x20e>
 8006bea:	2300      	movs	r3, #0
 8006bec:	f04f 32ff 	mov.w	r2, #4294967295
 8006bf0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006bf4:	f10a 0a01 	add.w	sl, sl, #1
 8006bf8:	9304      	str	r3, [sp, #16]
 8006bfa:	9307      	str	r3, [sp, #28]
 8006bfc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006c00:	931a      	str	r3, [sp, #104]	; 0x68
 8006c02:	4654      	mov	r4, sl
 8006c04:	2205      	movs	r2, #5
 8006c06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c0a:	4858      	ldr	r0, [pc, #352]	; (8006d6c <_vfiprintf_r+0x24c>)
 8006c0c:	f7f9 fae0 	bl	80001d0 <memchr>
 8006c10:	9a04      	ldr	r2, [sp, #16]
 8006c12:	b9d8      	cbnz	r0, 8006c4c <_vfiprintf_r+0x12c>
 8006c14:	06d1      	lsls	r1, r2, #27
 8006c16:	bf44      	itt	mi
 8006c18:	2320      	movmi	r3, #32
 8006c1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c1e:	0713      	lsls	r3, r2, #28
 8006c20:	bf44      	itt	mi
 8006c22:	232b      	movmi	r3, #43	; 0x2b
 8006c24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c28:	f89a 3000 	ldrb.w	r3, [sl]
 8006c2c:	2b2a      	cmp	r3, #42	; 0x2a
 8006c2e:	d015      	beq.n	8006c5c <_vfiprintf_r+0x13c>
 8006c30:	9a07      	ldr	r2, [sp, #28]
 8006c32:	4654      	mov	r4, sl
 8006c34:	2000      	movs	r0, #0
 8006c36:	f04f 0c0a 	mov.w	ip, #10
 8006c3a:	4621      	mov	r1, r4
 8006c3c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c40:	3b30      	subs	r3, #48	; 0x30
 8006c42:	2b09      	cmp	r3, #9
 8006c44:	d94e      	bls.n	8006ce4 <_vfiprintf_r+0x1c4>
 8006c46:	b1b0      	cbz	r0, 8006c76 <_vfiprintf_r+0x156>
 8006c48:	9207      	str	r2, [sp, #28]
 8006c4a:	e014      	b.n	8006c76 <_vfiprintf_r+0x156>
 8006c4c:	eba0 0308 	sub.w	r3, r0, r8
 8006c50:	fa09 f303 	lsl.w	r3, r9, r3
 8006c54:	4313      	orrs	r3, r2
 8006c56:	9304      	str	r3, [sp, #16]
 8006c58:	46a2      	mov	sl, r4
 8006c5a:	e7d2      	b.n	8006c02 <_vfiprintf_r+0xe2>
 8006c5c:	9b03      	ldr	r3, [sp, #12]
 8006c5e:	1d19      	adds	r1, r3, #4
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	9103      	str	r1, [sp, #12]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	bfbb      	ittet	lt
 8006c68:	425b      	neglt	r3, r3
 8006c6a:	f042 0202 	orrlt.w	r2, r2, #2
 8006c6e:	9307      	strge	r3, [sp, #28]
 8006c70:	9307      	strlt	r3, [sp, #28]
 8006c72:	bfb8      	it	lt
 8006c74:	9204      	strlt	r2, [sp, #16]
 8006c76:	7823      	ldrb	r3, [r4, #0]
 8006c78:	2b2e      	cmp	r3, #46	; 0x2e
 8006c7a:	d10c      	bne.n	8006c96 <_vfiprintf_r+0x176>
 8006c7c:	7863      	ldrb	r3, [r4, #1]
 8006c7e:	2b2a      	cmp	r3, #42	; 0x2a
 8006c80:	d135      	bne.n	8006cee <_vfiprintf_r+0x1ce>
 8006c82:	9b03      	ldr	r3, [sp, #12]
 8006c84:	1d1a      	adds	r2, r3, #4
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	9203      	str	r2, [sp, #12]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	bfb8      	it	lt
 8006c8e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c92:	3402      	adds	r4, #2
 8006c94:	9305      	str	r3, [sp, #20]
 8006c96:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006d7c <_vfiprintf_r+0x25c>
 8006c9a:	7821      	ldrb	r1, [r4, #0]
 8006c9c:	2203      	movs	r2, #3
 8006c9e:	4650      	mov	r0, sl
 8006ca0:	f7f9 fa96 	bl	80001d0 <memchr>
 8006ca4:	b140      	cbz	r0, 8006cb8 <_vfiprintf_r+0x198>
 8006ca6:	2340      	movs	r3, #64	; 0x40
 8006ca8:	eba0 000a 	sub.w	r0, r0, sl
 8006cac:	fa03 f000 	lsl.w	r0, r3, r0
 8006cb0:	9b04      	ldr	r3, [sp, #16]
 8006cb2:	4303      	orrs	r3, r0
 8006cb4:	3401      	adds	r4, #1
 8006cb6:	9304      	str	r3, [sp, #16]
 8006cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cbc:	482c      	ldr	r0, [pc, #176]	; (8006d70 <_vfiprintf_r+0x250>)
 8006cbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cc2:	2206      	movs	r2, #6
 8006cc4:	f7f9 fa84 	bl	80001d0 <memchr>
 8006cc8:	2800      	cmp	r0, #0
 8006cca:	d03f      	beq.n	8006d4c <_vfiprintf_r+0x22c>
 8006ccc:	4b29      	ldr	r3, [pc, #164]	; (8006d74 <_vfiprintf_r+0x254>)
 8006cce:	bb1b      	cbnz	r3, 8006d18 <_vfiprintf_r+0x1f8>
 8006cd0:	9b03      	ldr	r3, [sp, #12]
 8006cd2:	3307      	adds	r3, #7
 8006cd4:	f023 0307 	bic.w	r3, r3, #7
 8006cd8:	3308      	adds	r3, #8
 8006cda:	9303      	str	r3, [sp, #12]
 8006cdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cde:	443b      	add	r3, r7
 8006ce0:	9309      	str	r3, [sp, #36]	; 0x24
 8006ce2:	e767      	b.n	8006bb4 <_vfiprintf_r+0x94>
 8006ce4:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ce8:	460c      	mov	r4, r1
 8006cea:	2001      	movs	r0, #1
 8006cec:	e7a5      	b.n	8006c3a <_vfiprintf_r+0x11a>
 8006cee:	2300      	movs	r3, #0
 8006cf0:	3401      	adds	r4, #1
 8006cf2:	9305      	str	r3, [sp, #20]
 8006cf4:	4619      	mov	r1, r3
 8006cf6:	f04f 0c0a 	mov.w	ip, #10
 8006cfa:	4620      	mov	r0, r4
 8006cfc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006d00:	3a30      	subs	r2, #48	; 0x30
 8006d02:	2a09      	cmp	r2, #9
 8006d04:	d903      	bls.n	8006d0e <_vfiprintf_r+0x1ee>
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d0c5      	beq.n	8006c96 <_vfiprintf_r+0x176>
 8006d0a:	9105      	str	r1, [sp, #20]
 8006d0c:	e7c3      	b.n	8006c96 <_vfiprintf_r+0x176>
 8006d0e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006d12:	4604      	mov	r4, r0
 8006d14:	2301      	movs	r3, #1
 8006d16:	e7f0      	b.n	8006cfa <_vfiprintf_r+0x1da>
 8006d18:	ab03      	add	r3, sp, #12
 8006d1a:	9300      	str	r3, [sp, #0]
 8006d1c:	462a      	mov	r2, r5
 8006d1e:	4b16      	ldr	r3, [pc, #88]	; (8006d78 <_vfiprintf_r+0x258>)
 8006d20:	a904      	add	r1, sp, #16
 8006d22:	4630      	mov	r0, r6
 8006d24:	f3af 8000 	nop.w
 8006d28:	4607      	mov	r7, r0
 8006d2a:	1c78      	adds	r0, r7, #1
 8006d2c:	d1d6      	bne.n	8006cdc <_vfiprintf_r+0x1bc>
 8006d2e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d30:	07d9      	lsls	r1, r3, #31
 8006d32:	d405      	bmi.n	8006d40 <_vfiprintf_r+0x220>
 8006d34:	89ab      	ldrh	r3, [r5, #12]
 8006d36:	059a      	lsls	r2, r3, #22
 8006d38:	d402      	bmi.n	8006d40 <_vfiprintf_r+0x220>
 8006d3a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d3c:	f7ff fe6b 	bl	8006a16 <__retarget_lock_release_recursive>
 8006d40:	89ab      	ldrh	r3, [r5, #12]
 8006d42:	065b      	lsls	r3, r3, #25
 8006d44:	f53f af12 	bmi.w	8006b6c <_vfiprintf_r+0x4c>
 8006d48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d4a:	e711      	b.n	8006b70 <_vfiprintf_r+0x50>
 8006d4c:	ab03      	add	r3, sp, #12
 8006d4e:	9300      	str	r3, [sp, #0]
 8006d50:	462a      	mov	r2, r5
 8006d52:	4b09      	ldr	r3, [pc, #36]	; (8006d78 <_vfiprintf_r+0x258>)
 8006d54:	a904      	add	r1, sp, #16
 8006d56:	4630      	mov	r0, r6
 8006d58:	f000 f880 	bl	8006e5c <_printf_i>
 8006d5c:	e7e4      	b.n	8006d28 <_vfiprintf_r+0x208>
 8006d5e:	bf00      	nop
 8006d60:	0800773c 	.word	0x0800773c
 8006d64:	0800775c 	.word	0x0800775c
 8006d68:	0800771c 	.word	0x0800771c
 8006d6c:	0800777c 	.word	0x0800777c
 8006d70:	08007786 	.word	0x08007786
 8006d74:	00000000 	.word	0x00000000
 8006d78:	08006afb 	.word	0x08006afb
 8006d7c:	08007782 	.word	0x08007782

08006d80 <_printf_common>:
 8006d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d84:	4616      	mov	r6, r2
 8006d86:	4699      	mov	r9, r3
 8006d88:	688a      	ldr	r2, [r1, #8]
 8006d8a:	690b      	ldr	r3, [r1, #16]
 8006d8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d90:	4293      	cmp	r3, r2
 8006d92:	bfb8      	it	lt
 8006d94:	4613      	movlt	r3, r2
 8006d96:	6033      	str	r3, [r6, #0]
 8006d98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d9c:	4607      	mov	r7, r0
 8006d9e:	460c      	mov	r4, r1
 8006da0:	b10a      	cbz	r2, 8006da6 <_printf_common+0x26>
 8006da2:	3301      	adds	r3, #1
 8006da4:	6033      	str	r3, [r6, #0]
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	0699      	lsls	r1, r3, #26
 8006daa:	bf42      	ittt	mi
 8006dac:	6833      	ldrmi	r3, [r6, #0]
 8006dae:	3302      	addmi	r3, #2
 8006db0:	6033      	strmi	r3, [r6, #0]
 8006db2:	6825      	ldr	r5, [r4, #0]
 8006db4:	f015 0506 	ands.w	r5, r5, #6
 8006db8:	d106      	bne.n	8006dc8 <_printf_common+0x48>
 8006dba:	f104 0a19 	add.w	sl, r4, #25
 8006dbe:	68e3      	ldr	r3, [r4, #12]
 8006dc0:	6832      	ldr	r2, [r6, #0]
 8006dc2:	1a9b      	subs	r3, r3, r2
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dc26      	bgt.n	8006e16 <_printf_common+0x96>
 8006dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006dcc:	1e13      	subs	r3, r2, #0
 8006dce:	6822      	ldr	r2, [r4, #0]
 8006dd0:	bf18      	it	ne
 8006dd2:	2301      	movne	r3, #1
 8006dd4:	0692      	lsls	r2, r2, #26
 8006dd6:	d42b      	bmi.n	8006e30 <_printf_common+0xb0>
 8006dd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ddc:	4649      	mov	r1, r9
 8006dde:	4638      	mov	r0, r7
 8006de0:	47c0      	blx	r8
 8006de2:	3001      	adds	r0, #1
 8006de4:	d01e      	beq.n	8006e24 <_printf_common+0xa4>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	68e5      	ldr	r5, [r4, #12]
 8006dea:	6832      	ldr	r2, [r6, #0]
 8006dec:	f003 0306 	and.w	r3, r3, #6
 8006df0:	2b04      	cmp	r3, #4
 8006df2:	bf08      	it	eq
 8006df4:	1aad      	subeq	r5, r5, r2
 8006df6:	68a3      	ldr	r3, [r4, #8]
 8006df8:	6922      	ldr	r2, [r4, #16]
 8006dfa:	bf0c      	ite	eq
 8006dfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006e00:	2500      	movne	r5, #0
 8006e02:	4293      	cmp	r3, r2
 8006e04:	bfc4      	itt	gt
 8006e06:	1a9b      	subgt	r3, r3, r2
 8006e08:	18ed      	addgt	r5, r5, r3
 8006e0a:	2600      	movs	r6, #0
 8006e0c:	341a      	adds	r4, #26
 8006e0e:	42b5      	cmp	r5, r6
 8006e10:	d11a      	bne.n	8006e48 <_printf_common+0xc8>
 8006e12:	2000      	movs	r0, #0
 8006e14:	e008      	b.n	8006e28 <_printf_common+0xa8>
 8006e16:	2301      	movs	r3, #1
 8006e18:	4652      	mov	r2, sl
 8006e1a:	4649      	mov	r1, r9
 8006e1c:	4638      	mov	r0, r7
 8006e1e:	47c0      	blx	r8
 8006e20:	3001      	adds	r0, #1
 8006e22:	d103      	bne.n	8006e2c <_printf_common+0xac>
 8006e24:	f04f 30ff 	mov.w	r0, #4294967295
 8006e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e2c:	3501      	adds	r5, #1
 8006e2e:	e7c6      	b.n	8006dbe <_printf_common+0x3e>
 8006e30:	18e1      	adds	r1, r4, r3
 8006e32:	1c5a      	adds	r2, r3, #1
 8006e34:	2030      	movs	r0, #48	; 0x30
 8006e36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e3a:	4422      	add	r2, r4
 8006e3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e44:	3302      	adds	r3, #2
 8006e46:	e7c7      	b.n	8006dd8 <_printf_common+0x58>
 8006e48:	2301      	movs	r3, #1
 8006e4a:	4622      	mov	r2, r4
 8006e4c:	4649      	mov	r1, r9
 8006e4e:	4638      	mov	r0, r7
 8006e50:	47c0      	blx	r8
 8006e52:	3001      	adds	r0, #1
 8006e54:	d0e6      	beq.n	8006e24 <_printf_common+0xa4>
 8006e56:	3601      	adds	r6, #1
 8006e58:	e7d9      	b.n	8006e0e <_printf_common+0x8e>
	...

08006e5c <_printf_i>:
 8006e5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e60:	460c      	mov	r4, r1
 8006e62:	4691      	mov	r9, r2
 8006e64:	7e27      	ldrb	r7, [r4, #24]
 8006e66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006e68:	2f78      	cmp	r7, #120	; 0x78
 8006e6a:	4680      	mov	r8, r0
 8006e6c:	469a      	mov	sl, r3
 8006e6e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e72:	d807      	bhi.n	8006e84 <_printf_i+0x28>
 8006e74:	2f62      	cmp	r7, #98	; 0x62
 8006e76:	d80a      	bhi.n	8006e8e <_printf_i+0x32>
 8006e78:	2f00      	cmp	r7, #0
 8006e7a:	f000 80d8 	beq.w	800702e <_printf_i+0x1d2>
 8006e7e:	2f58      	cmp	r7, #88	; 0x58
 8006e80:	f000 80a3 	beq.w	8006fca <_printf_i+0x16e>
 8006e84:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006e88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e8c:	e03a      	b.n	8006f04 <_printf_i+0xa8>
 8006e8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e92:	2b15      	cmp	r3, #21
 8006e94:	d8f6      	bhi.n	8006e84 <_printf_i+0x28>
 8006e96:	a001      	add	r0, pc, #4	; (adr r0, 8006e9c <_printf_i+0x40>)
 8006e98:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006e9c:	08006ef5 	.word	0x08006ef5
 8006ea0:	08006f09 	.word	0x08006f09
 8006ea4:	08006e85 	.word	0x08006e85
 8006ea8:	08006e85 	.word	0x08006e85
 8006eac:	08006e85 	.word	0x08006e85
 8006eb0:	08006e85 	.word	0x08006e85
 8006eb4:	08006f09 	.word	0x08006f09
 8006eb8:	08006e85 	.word	0x08006e85
 8006ebc:	08006e85 	.word	0x08006e85
 8006ec0:	08006e85 	.word	0x08006e85
 8006ec4:	08006e85 	.word	0x08006e85
 8006ec8:	08007015 	.word	0x08007015
 8006ecc:	08006f39 	.word	0x08006f39
 8006ed0:	08006ff7 	.word	0x08006ff7
 8006ed4:	08006e85 	.word	0x08006e85
 8006ed8:	08006e85 	.word	0x08006e85
 8006edc:	08007037 	.word	0x08007037
 8006ee0:	08006e85 	.word	0x08006e85
 8006ee4:	08006f39 	.word	0x08006f39
 8006ee8:	08006e85 	.word	0x08006e85
 8006eec:	08006e85 	.word	0x08006e85
 8006ef0:	08006fff 	.word	0x08006fff
 8006ef4:	680b      	ldr	r3, [r1, #0]
 8006ef6:	1d1a      	adds	r2, r3, #4
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	600a      	str	r2, [r1, #0]
 8006efc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006f00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006f04:	2301      	movs	r3, #1
 8006f06:	e0a3      	b.n	8007050 <_printf_i+0x1f4>
 8006f08:	6825      	ldr	r5, [r4, #0]
 8006f0a:	6808      	ldr	r0, [r1, #0]
 8006f0c:	062e      	lsls	r6, r5, #24
 8006f0e:	f100 0304 	add.w	r3, r0, #4
 8006f12:	d50a      	bpl.n	8006f2a <_printf_i+0xce>
 8006f14:	6805      	ldr	r5, [r0, #0]
 8006f16:	600b      	str	r3, [r1, #0]
 8006f18:	2d00      	cmp	r5, #0
 8006f1a:	da03      	bge.n	8006f24 <_printf_i+0xc8>
 8006f1c:	232d      	movs	r3, #45	; 0x2d
 8006f1e:	426d      	negs	r5, r5
 8006f20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f24:	485e      	ldr	r0, [pc, #376]	; (80070a0 <_printf_i+0x244>)
 8006f26:	230a      	movs	r3, #10
 8006f28:	e019      	b.n	8006f5e <_printf_i+0x102>
 8006f2a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006f2e:	6805      	ldr	r5, [r0, #0]
 8006f30:	600b      	str	r3, [r1, #0]
 8006f32:	bf18      	it	ne
 8006f34:	b22d      	sxthne	r5, r5
 8006f36:	e7ef      	b.n	8006f18 <_printf_i+0xbc>
 8006f38:	680b      	ldr	r3, [r1, #0]
 8006f3a:	6825      	ldr	r5, [r4, #0]
 8006f3c:	1d18      	adds	r0, r3, #4
 8006f3e:	6008      	str	r0, [r1, #0]
 8006f40:	0628      	lsls	r0, r5, #24
 8006f42:	d501      	bpl.n	8006f48 <_printf_i+0xec>
 8006f44:	681d      	ldr	r5, [r3, #0]
 8006f46:	e002      	b.n	8006f4e <_printf_i+0xf2>
 8006f48:	0669      	lsls	r1, r5, #25
 8006f4a:	d5fb      	bpl.n	8006f44 <_printf_i+0xe8>
 8006f4c:	881d      	ldrh	r5, [r3, #0]
 8006f4e:	4854      	ldr	r0, [pc, #336]	; (80070a0 <_printf_i+0x244>)
 8006f50:	2f6f      	cmp	r7, #111	; 0x6f
 8006f52:	bf0c      	ite	eq
 8006f54:	2308      	moveq	r3, #8
 8006f56:	230a      	movne	r3, #10
 8006f58:	2100      	movs	r1, #0
 8006f5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f5e:	6866      	ldr	r6, [r4, #4]
 8006f60:	60a6      	str	r6, [r4, #8]
 8006f62:	2e00      	cmp	r6, #0
 8006f64:	bfa2      	ittt	ge
 8006f66:	6821      	ldrge	r1, [r4, #0]
 8006f68:	f021 0104 	bicge.w	r1, r1, #4
 8006f6c:	6021      	strge	r1, [r4, #0]
 8006f6e:	b90d      	cbnz	r5, 8006f74 <_printf_i+0x118>
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	d04d      	beq.n	8007010 <_printf_i+0x1b4>
 8006f74:	4616      	mov	r6, r2
 8006f76:	fbb5 f1f3 	udiv	r1, r5, r3
 8006f7a:	fb03 5711 	mls	r7, r3, r1, r5
 8006f7e:	5dc7      	ldrb	r7, [r0, r7]
 8006f80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006f84:	462f      	mov	r7, r5
 8006f86:	42bb      	cmp	r3, r7
 8006f88:	460d      	mov	r5, r1
 8006f8a:	d9f4      	bls.n	8006f76 <_printf_i+0x11a>
 8006f8c:	2b08      	cmp	r3, #8
 8006f8e:	d10b      	bne.n	8006fa8 <_printf_i+0x14c>
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	07df      	lsls	r7, r3, #31
 8006f94:	d508      	bpl.n	8006fa8 <_printf_i+0x14c>
 8006f96:	6923      	ldr	r3, [r4, #16]
 8006f98:	6861      	ldr	r1, [r4, #4]
 8006f9a:	4299      	cmp	r1, r3
 8006f9c:	bfde      	ittt	le
 8006f9e:	2330      	movle	r3, #48	; 0x30
 8006fa0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006fa4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006fa8:	1b92      	subs	r2, r2, r6
 8006faa:	6122      	str	r2, [r4, #16]
 8006fac:	f8cd a000 	str.w	sl, [sp]
 8006fb0:	464b      	mov	r3, r9
 8006fb2:	aa03      	add	r2, sp, #12
 8006fb4:	4621      	mov	r1, r4
 8006fb6:	4640      	mov	r0, r8
 8006fb8:	f7ff fee2 	bl	8006d80 <_printf_common>
 8006fbc:	3001      	adds	r0, #1
 8006fbe:	d14c      	bne.n	800705a <_printf_i+0x1fe>
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	b004      	add	sp, #16
 8006fc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fca:	4835      	ldr	r0, [pc, #212]	; (80070a0 <_printf_i+0x244>)
 8006fcc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fd0:	6823      	ldr	r3, [r4, #0]
 8006fd2:	680e      	ldr	r6, [r1, #0]
 8006fd4:	061f      	lsls	r7, r3, #24
 8006fd6:	f856 5b04 	ldr.w	r5, [r6], #4
 8006fda:	600e      	str	r6, [r1, #0]
 8006fdc:	d514      	bpl.n	8007008 <_printf_i+0x1ac>
 8006fde:	07d9      	lsls	r1, r3, #31
 8006fe0:	bf44      	itt	mi
 8006fe2:	f043 0320 	orrmi.w	r3, r3, #32
 8006fe6:	6023      	strmi	r3, [r4, #0]
 8006fe8:	b91d      	cbnz	r5, 8006ff2 <_printf_i+0x196>
 8006fea:	6823      	ldr	r3, [r4, #0]
 8006fec:	f023 0320 	bic.w	r3, r3, #32
 8006ff0:	6023      	str	r3, [r4, #0]
 8006ff2:	2310      	movs	r3, #16
 8006ff4:	e7b0      	b.n	8006f58 <_printf_i+0xfc>
 8006ff6:	6823      	ldr	r3, [r4, #0]
 8006ff8:	f043 0320 	orr.w	r3, r3, #32
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	2378      	movs	r3, #120	; 0x78
 8007000:	4828      	ldr	r0, [pc, #160]	; (80070a4 <_printf_i+0x248>)
 8007002:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007006:	e7e3      	b.n	8006fd0 <_printf_i+0x174>
 8007008:	065e      	lsls	r6, r3, #25
 800700a:	bf48      	it	mi
 800700c:	b2ad      	uxthmi	r5, r5
 800700e:	e7e6      	b.n	8006fde <_printf_i+0x182>
 8007010:	4616      	mov	r6, r2
 8007012:	e7bb      	b.n	8006f8c <_printf_i+0x130>
 8007014:	680b      	ldr	r3, [r1, #0]
 8007016:	6826      	ldr	r6, [r4, #0]
 8007018:	6960      	ldr	r0, [r4, #20]
 800701a:	1d1d      	adds	r5, r3, #4
 800701c:	600d      	str	r5, [r1, #0]
 800701e:	0635      	lsls	r5, r6, #24
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	d501      	bpl.n	8007028 <_printf_i+0x1cc>
 8007024:	6018      	str	r0, [r3, #0]
 8007026:	e002      	b.n	800702e <_printf_i+0x1d2>
 8007028:	0671      	lsls	r1, r6, #25
 800702a:	d5fb      	bpl.n	8007024 <_printf_i+0x1c8>
 800702c:	8018      	strh	r0, [r3, #0]
 800702e:	2300      	movs	r3, #0
 8007030:	6123      	str	r3, [r4, #16]
 8007032:	4616      	mov	r6, r2
 8007034:	e7ba      	b.n	8006fac <_printf_i+0x150>
 8007036:	680b      	ldr	r3, [r1, #0]
 8007038:	1d1a      	adds	r2, r3, #4
 800703a:	600a      	str	r2, [r1, #0]
 800703c:	681e      	ldr	r6, [r3, #0]
 800703e:	6862      	ldr	r2, [r4, #4]
 8007040:	2100      	movs	r1, #0
 8007042:	4630      	mov	r0, r6
 8007044:	f7f9 f8c4 	bl	80001d0 <memchr>
 8007048:	b108      	cbz	r0, 800704e <_printf_i+0x1f2>
 800704a:	1b80      	subs	r0, r0, r6
 800704c:	6060      	str	r0, [r4, #4]
 800704e:	6863      	ldr	r3, [r4, #4]
 8007050:	6123      	str	r3, [r4, #16]
 8007052:	2300      	movs	r3, #0
 8007054:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007058:	e7a8      	b.n	8006fac <_printf_i+0x150>
 800705a:	6923      	ldr	r3, [r4, #16]
 800705c:	4632      	mov	r2, r6
 800705e:	4649      	mov	r1, r9
 8007060:	4640      	mov	r0, r8
 8007062:	47d0      	blx	sl
 8007064:	3001      	adds	r0, #1
 8007066:	d0ab      	beq.n	8006fc0 <_printf_i+0x164>
 8007068:	6823      	ldr	r3, [r4, #0]
 800706a:	079b      	lsls	r3, r3, #30
 800706c:	d413      	bmi.n	8007096 <_printf_i+0x23a>
 800706e:	68e0      	ldr	r0, [r4, #12]
 8007070:	9b03      	ldr	r3, [sp, #12]
 8007072:	4298      	cmp	r0, r3
 8007074:	bfb8      	it	lt
 8007076:	4618      	movlt	r0, r3
 8007078:	e7a4      	b.n	8006fc4 <_printf_i+0x168>
 800707a:	2301      	movs	r3, #1
 800707c:	4632      	mov	r2, r6
 800707e:	4649      	mov	r1, r9
 8007080:	4640      	mov	r0, r8
 8007082:	47d0      	blx	sl
 8007084:	3001      	adds	r0, #1
 8007086:	d09b      	beq.n	8006fc0 <_printf_i+0x164>
 8007088:	3501      	adds	r5, #1
 800708a:	68e3      	ldr	r3, [r4, #12]
 800708c:	9903      	ldr	r1, [sp, #12]
 800708e:	1a5b      	subs	r3, r3, r1
 8007090:	42ab      	cmp	r3, r5
 8007092:	dcf2      	bgt.n	800707a <_printf_i+0x21e>
 8007094:	e7eb      	b.n	800706e <_printf_i+0x212>
 8007096:	2500      	movs	r5, #0
 8007098:	f104 0619 	add.w	r6, r4, #25
 800709c:	e7f5      	b.n	800708a <_printf_i+0x22e>
 800709e:	bf00      	nop
 80070a0:	0800778d 	.word	0x0800778d
 80070a4:	0800779e 	.word	0x0800779e

080070a8 <_sbrk_r>:
 80070a8:	b538      	push	{r3, r4, r5, lr}
 80070aa:	4d06      	ldr	r5, [pc, #24]	; (80070c4 <_sbrk_r+0x1c>)
 80070ac:	2300      	movs	r3, #0
 80070ae:	4604      	mov	r4, r0
 80070b0:	4608      	mov	r0, r1
 80070b2:	602b      	str	r3, [r5, #0]
 80070b4:	f7fa f90a 	bl	80012cc <_sbrk>
 80070b8:	1c43      	adds	r3, r0, #1
 80070ba:	d102      	bne.n	80070c2 <_sbrk_r+0x1a>
 80070bc:	682b      	ldr	r3, [r5, #0]
 80070be:	b103      	cbz	r3, 80070c2 <_sbrk_r+0x1a>
 80070c0:	6023      	str	r3, [r4, #0]
 80070c2:	bd38      	pop	{r3, r4, r5, pc}
 80070c4:	2000073c 	.word	0x2000073c

080070c8 <__sread>:
 80070c8:	b510      	push	{r4, lr}
 80070ca:	460c      	mov	r4, r1
 80070cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070d0:	f000 fab4 	bl	800763c <_read_r>
 80070d4:	2800      	cmp	r0, #0
 80070d6:	bfab      	itete	ge
 80070d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80070da:	89a3      	ldrhlt	r3, [r4, #12]
 80070dc:	181b      	addge	r3, r3, r0
 80070de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80070e2:	bfac      	ite	ge
 80070e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80070e6:	81a3      	strhlt	r3, [r4, #12]
 80070e8:	bd10      	pop	{r4, pc}

080070ea <__swrite>:
 80070ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070ee:	461f      	mov	r7, r3
 80070f0:	898b      	ldrh	r3, [r1, #12]
 80070f2:	05db      	lsls	r3, r3, #23
 80070f4:	4605      	mov	r5, r0
 80070f6:	460c      	mov	r4, r1
 80070f8:	4616      	mov	r6, r2
 80070fa:	d505      	bpl.n	8007108 <__swrite+0x1e>
 80070fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007100:	2302      	movs	r3, #2
 8007102:	2200      	movs	r2, #0
 8007104:	f000 f9c8 	bl	8007498 <_lseek_r>
 8007108:	89a3      	ldrh	r3, [r4, #12]
 800710a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800710e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007112:	81a3      	strh	r3, [r4, #12]
 8007114:	4632      	mov	r2, r6
 8007116:	463b      	mov	r3, r7
 8007118:	4628      	mov	r0, r5
 800711a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800711e:	f000 b869 	b.w	80071f4 <_write_r>

08007122 <__sseek>:
 8007122:	b510      	push	{r4, lr}
 8007124:	460c      	mov	r4, r1
 8007126:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800712a:	f000 f9b5 	bl	8007498 <_lseek_r>
 800712e:	1c43      	adds	r3, r0, #1
 8007130:	89a3      	ldrh	r3, [r4, #12]
 8007132:	bf15      	itete	ne
 8007134:	6560      	strne	r0, [r4, #84]	; 0x54
 8007136:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800713a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800713e:	81a3      	strheq	r3, [r4, #12]
 8007140:	bf18      	it	ne
 8007142:	81a3      	strhne	r3, [r4, #12]
 8007144:	bd10      	pop	{r4, pc}

08007146 <__sclose>:
 8007146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800714a:	f000 b8d3 	b.w	80072f4 <_close_r>
	...

08007150 <__swbuf_r>:
 8007150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007152:	460e      	mov	r6, r1
 8007154:	4614      	mov	r4, r2
 8007156:	4605      	mov	r5, r0
 8007158:	b118      	cbz	r0, 8007162 <__swbuf_r+0x12>
 800715a:	6983      	ldr	r3, [r0, #24]
 800715c:	b90b      	cbnz	r3, 8007162 <__swbuf_r+0x12>
 800715e:	f7ff fbbb 	bl	80068d8 <__sinit>
 8007162:	4b21      	ldr	r3, [pc, #132]	; (80071e8 <__swbuf_r+0x98>)
 8007164:	429c      	cmp	r4, r3
 8007166:	d12b      	bne.n	80071c0 <__swbuf_r+0x70>
 8007168:	686c      	ldr	r4, [r5, #4]
 800716a:	69a3      	ldr	r3, [r4, #24]
 800716c:	60a3      	str	r3, [r4, #8]
 800716e:	89a3      	ldrh	r3, [r4, #12]
 8007170:	071a      	lsls	r2, r3, #28
 8007172:	d52f      	bpl.n	80071d4 <__swbuf_r+0x84>
 8007174:	6923      	ldr	r3, [r4, #16]
 8007176:	b36b      	cbz	r3, 80071d4 <__swbuf_r+0x84>
 8007178:	6923      	ldr	r3, [r4, #16]
 800717a:	6820      	ldr	r0, [r4, #0]
 800717c:	1ac0      	subs	r0, r0, r3
 800717e:	6963      	ldr	r3, [r4, #20]
 8007180:	b2f6      	uxtb	r6, r6
 8007182:	4283      	cmp	r3, r0
 8007184:	4637      	mov	r7, r6
 8007186:	dc04      	bgt.n	8007192 <__swbuf_r+0x42>
 8007188:	4621      	mov	r1, r4
 800718a:	4628      	mov	r0, r5
 800718c:	f000 f948 	bl	8007420 <_fflush_r>
 8007190:	bb30      	cbnz	r0, 80071e0 <__swbuf_r+0x90>
 8007192:	68a3      	ldr	r3, [r4, #8]
 8007194:	3b01      	subs	r3, #1
 8007196:	60a3      	str	r3, [r4, #8]
 8007198:	6823      	ldr	r3, [r4, #0]
 800719a:	1c5a      	adds	r2, r3, #1
 800719c:	6022      	str	r2, [r4, #0]
 800719e:	701e      	strb	r6, [r3, #0]
 80071a0:	6963      	ldr	r3, [r4, #20]
 80071a2:	3001      	adds	r0, #1
 80071a4:	4283      	cmp	r3, r0
 80071a6:	d004      	beq.n	80071b2 <__swbuf_r+0x62>
 80071a8:	89a3      	ldrh	r3, [r4, #12]
 80071aa:	07db      	lsls	r3, r3, #31
 80071ac:	d506      	bpl.n	80071bc <__swbuf_r+0x6c>
 80071ae:	2e0a      	cmp	r6, #10
 80071b0:	d104      	bne.n	80071bc <__swbuf_r+0x6c>
 80071b2:	4621      	mov	r1, r4
 80071b4:	4628      	mov	r0, r5
 80071b6:	f000 f933 	bl	8007420 <_fflush_r>
 80071ba:	b988      	cbnz	r0, 80071e0 <__swbuf_r+0x90>
 80071bc:	4638      	mov	r0, r7
 80071be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071c0:	4b0a      	ldr	r3, [pc, #40]	; (80071ec <__swbuf_r+0x9c>)
 80071c2:	429c      	cmp	r4, r3
 80071c4:	d101      	bne.n	80071ca <__swbuf_r+0x7a>
 80071c6:	68ac      	ldr	r4, [r5, #8]
 80071c8:	e7cf      	b.n	800716a <__swbuf_r+0x1a>
 80071ca:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <__swbuf_r+0xa0>)
 80071cc:	429c      	cmp	r4, r3
 80071ce:	bf08      	it	eq
 80071d0:	68ec      	ldreq	r4, [r5, #12]
 80071d2:	e7ca      	b.n	800716a <__swbuf_r+0x1a>
 80071d4:	4621      	mov	r1, r4
 80071d6:	4628      	mov	r0, r5
 80071d8:	f000 f81e 	bl	8007218 <__swsetup_r>
 80071dc:	2800      	cmp	r0, #0
 80071de:	d0cb      	beq.n	8007178 <__swbuf_r+0x28>
 80071e0:	f04f 37ff 	mov.w	r7, #4294967295
 80071e4:	e7ea      	b.n	80071bc <__swbuf_r+0x6c>
 80071e6:	bf00      	nop
 80071e8:	0800773c 	.word	0x0800773c
 80071ec:	0800775c 	.word	0x0800775c
 80071f0:	0800771c 	.word	0x0800771c

080071f4 <_write_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d07      	ldr	r5, [pc, #28]	; (8007214 <_write_r+0x20>)
 80071f8:	4604      	mov	r4, r0
 80071fa:	4608      	mov	r0, r1
 80071fc:	4611      	mov	r1, r2
 80071fe:	2200      	movs	r2, #0
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	f7f9 fa10 	bl	8000628 <_write>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_write_r+0x1e>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b103      	cbz	r3, 8007212 <_write_r+0x1e>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	2000073c 	.word	0x2000073c

08007218 <__swsetup_r>:
 8007218:	4b32      	ldr	r3, [pc, #200]	; (80072e4 <__swsetup_r+0xcc>)
 800721a:	b570      	push	{r4, r5, r6, lr}
 800721c:	681d      	ldr	r5, [r3, #0]
 800721e:	4606      	mov	r6, r0
 8007220:	460c      	mov	r4, r1
 8007222:	b125      	cbz	r5, 800722e <__swsetup_r+0x16>
 8007224:	69ab      	ldr	r3, [r5, #24]
 8007226:	b913      	cbnz	r3, 800722e <__swsetup_r+0x16>
 8007228:	4628      	mov	r0, r5
 800722a:	f7ff fb55 	bl	80068d8 <__sinit>
 800722e:	4b2e      	ldr	r3, [pc, #184]	; (80072e8 <__swsetup_r+0xd0>)
 8007230:	429c      	cmp	r4, r3
 8007232:	d10f      	bne.n	8007254 <__swsetup_r+0x3c>
 8007234:	686c      	ldr	r4, [r5, #4]
 8007236:	89a3      	ldrh	r3, [r4, #12]
 8007238:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800723c:	0719      	lsls	r1, r3, #28
 800723e:	d42c      	bmi.n	800729a <__swsetup_r+0x82>
 8007240:	06dd      	lsls	r5, r3, #27
 8007242:	d411      	bmi.n	8007268 <__swsetup_r+0x50>
 8007244:	2309      	movs	r3, #9
 8007246:	6033      	str	r3, [r6, #0]
 8007248:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800724c:	81a3      	strh	r3, [r4, #12]
 800724e:	f04f 30ff 	mov.w	r0, #4294967295
 8007252:	e03e      	b.n	80072d2 <__swsetup_r+0xba>
 8007254:	4b25      	ldr	r3, [pc, #148]	; (80072ec <__swsetup_r+0xd4>)
 8007256:	429c      	cmp	r4, r3
 8007258:	d101      	bne.n	800725e <__swsetup_r+0x46>
 800725a:	68ac      	ldr	r4, [r5, #8]
 800725c:	e7eb      	b.n	8007236 <__swsetup_r+0x1e>
 800725e:	4b24      	ldr	r3, [pc, #144]	; (80072f0 <__swsetup_r+0xd8>)
 8007260:	429c      	cmp	r4, r3
 8007262:	bf08      	it	eq
 8007264:	68ec      	ldreq	r4, [r5, #12]
 8007266:	e7e6      	b.n	8007236 <__swsetup_r+0x1e>
 8007268:	0758      	lsls	r0, r3, #29
 800726a:	d512      	bpl.n	8007292 <__swsetup_r+0x7a>
 800726c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800726e:	b141      	cbz	r1, 8007282 <__swsetup_r+0x6a>
 8007270:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007274:	4299      	cmp	r1, r3
 8007276:	d002      	beq.n	800727e <__swsetup_r+0x66>
 8007278:	4630      	mov	r0, r6
 800727a:	f000 f98f 	bl	800759c <_free_r>
 800727e:	2300      	movs	r3, #0
 8007280:	6363      	str	r3, [r4, #52]	; 0x34
 8007282:	89a3      	ldrh	r3, [r4, #12]
 8007284:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007288:	81a3      	strh	r3, [r4, #12]
 800728a:	2300      	movs	r3, #0
 800728c:	6063      	str	r3, [r4, #4]
 800728e:	6923      	ldr	r3, [r4, #16]
 8007290:	6023      	str	r3, [r4, #0]
 8007292:	89a3      	ldrh	r3, [r4, #12]
 8007294:	f043 0308 	orr.w	r3, r3, #8
 8007298:	81a3      	strh	r3, [r4, #12]
 800729a:	6923      	ldr	r3, [r4, #16]
 800729c:	b94b      	cbnz	r3, 80072b2 <__swsetup_r+0x9a>
 800729e:	89a3      	ldrh	r3, [r4, #12]
 80072a0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a8:	d003      	beq.n	80072b2 <__swsetup_r+0x9a>
 80072aa:	4621      	mov	r1, r4
 80072ac:	4630      	mov	r0, r6
 80072ae:	f000 f929 	bl	8007504 <__smakebuf_r>
 80072b2:	89a0      	ldrh	r0, [r4, #12]
 80072b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072b8:	f010 0301 	ands.w	r3, r0, #1
 80072bc:	d00a      	beq.n	80072d4 <__swsetup_r+0xbc>
 80072be:	2300      	movs	r3, #0
 80072c0:	60a3      	str	r3, [r4, #8]
 80072c2:	6963      	ldr	r3, [r4, #20]
 80072c4:	425b      	negs	r3, r3
 80072c6:	61a3      	str	r3, [r4, #24]
 80072c8:	6923      	ldr	r3, [r4, #16]
 80072ca:	b943      	cbnz	r3, 80072de <__swsetup_r+0xc6>
 80072cc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072d0:	d1ba      	bne.n	8007248 <__swsetup_r+0x30>
 80072d2:	bd70      	pop	{r4, r5, r6, pc}
 80072d4:	0781      	lsls	r1, r0, #30
 80072d6:	bf58      	it	pl
 80072d8:	6963      	ldrpl	r3, [r4, #20]
 80072da:	60a3      	str	r3, [r4, #8]
 80072dc:	e7f4      	b.n	80072c8 <__swsetup_r+0xb0>
 80072de:	2000      	movs	r0, #0
 80072e0:	e7f7      	b.n	80072d2 <__swsetup_r+0xba>
 80072e2:	bf00      	nop
 80072e4:	2000000c 	.word	0x2000000c
 80072e8:	0800773c 	.word	0x0800773c
 80072ec:	0800775c 	.word	0x0800775c
 80072f0:	0800771c 	.word	0x0800771c

080072f4 <_close_r>:
 80072f4:	b538      	push	{r3, r4, r5, lr}
 80072f6:	4d06      	ldr	r5, [pc, #24]	; (8007310 <_close_r+0x1c>)
 80072f8:	2300      	movs	r3, #0
 80072fa:	4604      	mov	r4, r0
 80072fc:	4608      	mov	r0, r1
 80072fe:	602b      	str	r3, [r5, #0]
 8007300:	f7f9 ffb0 	bl	8001264 <_close>
 8007304:	1c43      	adds	r3, r0, #1
 8007306:	d102      	bne.n	800730e <_close_r+0x1a>
 8007308:	682b      	ldr	r3, [r5, #0]
 800730a:	b103      	cbz	r3, 800730e <_close_r+0x1a>
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	bd38      	pop	{r3, r4, r5, pc}
 8007310:	2000073c 	.word	0x2000073c

08007314 <__sflush_r>:
 8007314:	898a      	ldrh	r2, [r1, #12]
 8007316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800731a:	4605      	mov	r5, r0
 800731c:	0710      	lsls	r0, r2, #28
 800731e:	460c      	mov	r4, r1
 8007320:	d458      	bmi.n	80073d4 <__sflush_r+0xc0>
 8007322:	684b      	ldr	r3, [r1, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	dc05      	bgt.n	8007334 <__sflush_r+0x20>
 8007328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	dc02      	bgt.n	8007334 <__sflush_r+0x20>
 800732e:	2000      	movs	r0, #0
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007336:	2e00      	cmp	r6, #0
 8007338:	d0f9      	beq.n	800732e <__sflush_r+0x1a>
 800733a:	2300      	movs	r3, #0
 800733c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007340:	682f      	ldr	r7, [r5, #0]
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	d032      	beq.n	80073ac <__sflush_r+0x98>
 8007346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	075a      	lsls	r2, r3, #29
 800734c:	d505      	bpl.n	800735a <__sflush_r+0x46>
 800734e:	6863      	ldr	r3, [r4, #4]
 8007350:	1ac0      	subs	r0, r0, r3
 8007352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007354:	b10b      	cbz	r3, 800735a <__sflush_r+0x46>
 8007356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007358:	1ac0      	subs	r0, r0, r3
 800735a:	2300      	movs	r3, #0
 800735c:	4602      	mov	r2, r0
 800735e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007360:	6a21      	ldr	r1, [r4, #32]
 8007362:	4628      	mov	r0, r5
 8007364:	47b0      	blx	r6
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	d106      	bne.n	800737a <__sflush_r+0x66>
 800736c:	6829      	ldr	r1, [r5, #0]
 800736e:	291d      	cmp	r1, #29
 8007370:	d82c      	bhi.n	80073cc <__sflush_r+0xb8>
 8007372:	4a2a      	ldr	r2, [pc, #168]	; (800741c <__sflush_r+0x108>)
 8007374:	40ca      	lsrs	r2, r1
 8007376:	07d6      	lsls	r6, r2, #31
 8007378:	d528      	bpl.n	80073cc <__sflush_r+0xb8>
 800737a:	2200      	movs	r2, #0
 800737c:	6062      	str	r2, [r4, #4]
 800737e:	04d9      	lsls	r1, r3, #19
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	6022      	str	r2, [r4, #0]
 8007384:	d504      	bpl.n	8007390 <__sflush_r+0x7c>
 8007386:	1c42      	adds	r2, r0, #1
 8007388:	d101      	bne.n	800738e <__sflush_r+0x7a>
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	b903      	cbnz	r3, 8007390 <__sflush_r+0x7c>
 800738e:	6560      	str	r0, [r4, #84]	; 0x54
 8007390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007392:	602f      	str	r7, [r5, #0]
 8007394:	2900      	cmp	r1, #0
 8007396:	d0ca      	beq.n	800732e <__sflush_r+0x1a>
 8007398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800739c:	4299      	cmp	r1, r3
 800739e:	d002      	beq.n	80073a6 <__sflush_r+0x92>
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 f8fb 	bl	800759c <_free_r>
 80073a6:	2000      	movs	r0, #0
 80073a8:	6360      	str	r0, [r4, #52]	; 0x34
 80073aa:	e7c1      	b.n	8007330 <__sflush_r+0x1c>
 80073ac:	6a21      	ldr	r1, [r4, #32]
 80073ae:	2301      	movs	r3, #1
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b0      	blx	r6
 80073b4:	1c41      	adds	r1, r0, #1
 80073b6:	d1c7      	bne.n	8007348 <__sflush_r+0x34>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0c4      	beq.n	8007348 <__sflush_r+0x34>
 80073be:	2b1d      	cmp	r3, #29
 80073c0:	d001      	beq.n	80073c6 <__sflush_r+0xb2>
 80073c2:	2b16      	cmp	r3, #22
 80073c4:	d101      	bne.n	80073ca <__sflush_r+0xb6>
 80073c6:	602f      	str	r7, [r5, #0]
 80073c8:	e7b1      	b.n	800732e <__sflush_r+0x1a>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	e7ad      	b.n	8007330 <__sflush_r+0x1c>
 80073d4:	690f      	ldr	r7, [r1, #16]
 80073d6:	2f00      	cmp	r7, #0
 80073d8:	d0a9      	beq.n	800732e <__sflush_r+0x1a>
 80073da:	0793      	lsls	r3, r2, #30
 80073dc:	680e      	ldr	r6, [r1, #0]
 80073de:	bf08      	it	eq
 80073e0:	694b      	ldreq	r3, [r1, #20]
 80073e2:	600f      	str	r7, [r1, #0]
 80073e4:	bf18      	it	ne
 80073e6:	2300      	movne	r3, #0
 80073e8:	eba6 0807 	sub.w	r8, r6, r7
 80073ec:	608b      	str	r3, [r1, #8]
 80073ee:	f1b8 0f00 	cmp.w	r8, #0
 80073f2:	dd9c      	ble.n	800732e <__sflush_r+0x1a>
 80073f4:	6a21      	ldr	r1, [r4, #32]
 80073f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073f8:	4643      	mov	r3, r8
 80073fa:	463a      	mov	r2, r7
 80073fc:	4628      	mov	r0, r5
 80073fe:	47b0      	blx	r6
 8007400:	2800      	cmp	r0, #0
 8007402:	dc06      	bgt.n	8007412 <__sflush_r+0xfe>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	e78e      	b.n	8007330 <__sflush_r+0x1c>
 8007412:	4407      	add	r7, r0
 8007414:	eba8 0800 	sub.w	r8, r8, r0
 8007418:	e7e9      	b.n	80073ee <__sflush_r+0xda>
 800741a:	bf00      	nop
 800741c:	20400001 	.word	0x20400001

08007420 <_fflush_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	690b      	ldr	r3, [r1, #16]
 8007424:	4605      	mov	r5, r0
 8007426:	460c      	mov	r4, r1
 8007428:	b913      	cbnz	r3, 8007430 <_fflush_r+0x10>
 800742a:	2500      	movs	r5, #0
 800742c:	4628      	mov	r0, r5
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	b118      	cbz	r0, 800743a <_fflush_r+0x1a>
 8007432:	6983      	ldr	r3, [r0, #24]
 8007434:	b90b      	cbnz	r3, 800743a <_fflush_r+0x1a>
 8007436:	f7ff fa4f 	bl	80068d8 <__sinit>
 800743a:	4b14      	ldr	r3, [pc, #80]	; (800748c <_fflush_r+0x6c>)
 800743c:	429c      	cmp	r4, r3
 800743e:	d11b      	bne.n	8007478 <_fflush_r+0x58>
 8007440:	686c      	ldr	r4, [r5, #4]
 8007442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0ef      	beq.n	800742a <_fflush_r+0xa>
 800744a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800744c:	07d0      	lsls	r0, r2, #31
 800744e:	d404      	bmi.n	800745a <_fflush_r+0x3a>
 8007450:	0599      	lsls	r1, r3, #22
 8007452:	d402      	bmi.n	800745a <_fflush_r+0x3a>
 8007454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007456:	f7ff fadd 	bl	8006a14 <__retarget_lock_acquire_recursive>
 800745a:	4628      	mov	r0, r5
 800745c:	4621      	mov	r1, r4
 800745e:	f7ff ff59 	bl	8007314 <__sflush_r>
 8007462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007464:	07da      	lsls	r2, r3, #31
 8007466:	4605      	mov	r5, r0
 8007468:	d4e0      	bmi.n	800742c <_fflush_r+0xc>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	059b      	lsls	r3, r3, #22
 800746e:	d4dd      	bmi.n	800742c <_fflush_r+0xc>
 8007470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007472:	f7ff fad0 	bl	8006a16 <__retarget_lock_release_recursive>
 8007476:	e7d9      	b.n	800742c <_fflush_r+0xc>
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <_fflush_r+0x70>)
 800747a:	429c      	cmp	r4, r3
 800747c:	d101      	bne.n	8007482 <_fflush_r+0x62>
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	e7df      	b.n	8007442 <_fflush_r+0x22>
 8007482:	4b04      	ldr	r3, [pc, #16]	; (8007494 <_fflush_r+0x74>)
 8007484:	429c      	cmp	r4, r3
 8007486:	bf08      	it	eq
 8007488:	68ec      	ldreq	r4, [r5, #12]
 800748a:	e7da      	b.n	8007442 <_fflush_r+0x22>
 800748c:	0800773c 	.word	0x0800773c
 8007490:	0800775c 	.word	0x0800775c
 8007494:	0800771c 	.word	0x0800771c

08007498 <_lseek_r>:
 8007498:	b538      	push	{r3, r4, r5, lr}
 800749a:	4d07      	ldr	r5, [pc, #28]	; (80074b8 <_lseek_r+0x20>)
 800749c:	4604      	mov	r4, r0
 800749e:	4608      	mov	r0, r1
 80074a0:	4611      	mov	r1, r2
 80074a2:	2200      	movs	r2, #0
 80074a4:	602a      	str	r2, [r5, #0]
 80074a6:	461a      	mov	r2, r3
 80074a8:	f7f9 ff03 	bl	80012b2 <_lseek>
 80074ac:	1c43      	adds	r3, r0, #1
 80074ae:	d102      	bne.n	80074b6 <_lseek_r+0x1e>
 80074b0:	682b      	ldr	r3, [r5, #0]
 80074b2:	b103      	cbz	r3, 80074b6 <_lseek_r+0x1e>
 80074b4:	6023      	str	r3, [r4, #0]
 80074b6:	bd38      	pop	{r3, r4, r5, pc}
 80074b8:	2000073c 	.word	0x2000073c

080074bc <__swhatbuf_r>:
 80074bc:	b570      	push	{r4, r5, r6, lr}
 80074be:	460e      	mov	r6, r1
 80074c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074c4:	2900      	cmp	r1, #0
 80074c6:	b096      	sub	sp, #88	; 0x58
 80074c8:	4614      	mov	r4, r2
 80074ca:	461d      	mov	r5, r3
 80074cc:	da07      	bge.n	80074de <__swhatbuf_r+0x22>
 80074ce:	2300      	movs	r3, #0
 80074d0:	602b      	str	r3, [r5, #0]
 80074d2:	89b3      	ldrh	r3, [r6, #12]
 80074d4:	061a      	lsls	r2, r3, #24
 80074d6:	d410      	bmi.n	80074fa <__swhatbuf_r+0x3e>
 80074d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80074dc:	e00e      	b.n	80074fc <__swhatbuf_r+0x40>
 80074de:	466a      	mov	r2, sp
 80074e0:	f000 f8be 	bl	8007660 <_fstat_r>
 80074e4:	2800      	cmp	r0, #0
 80074e6:	dbf2      	blt.n	80074ce <__swhatbuf_r+0x12>
 80074e8:	9a01      	ldr	r2, [sp, #4]
 80074ea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80074ee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80074f2:	425a      	negs	r2, r3
 80074f4:	415a      	adcs	r2, r3
 80074f6:	602a      	str	r2, [r5, #0]
 80074f8:	e7ee      	b.n	80074d8 <__swhatbuf_r+0x1c>
 80074fa:	2340      	movs	r3, #64	; 0x40
 80074fc:	2000      	movs	r0, #0
 80074fe:	6023      	str	r3, [r4, #0]
 8007500:	b016      	add	sp, #88	; 0x58
 8007502:	bd70      	pop	{r4, r5, r6, pc}

08007504 <__smakebuf_r>:
 8007504:	898b      	ldrh	r3, [r1, #12]
 8007506:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007508:	079d      	lsls	r5, r3, #30
 800750a:	4606      	mov	r6, r0
 800750c:	460c      	mov	r4, r1
 800750e:	d507      	bpl.n	8007520 <__smakebuf_r+0x1c>
 8007510:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007514:	6023      	str	r3, [r4, #0]
 8007516:	6123      	str	r3, [r4, #16]
 8007518:	2301      	movs	r3, #1
 800751a:	6163      	str	r3, [r4, #20]
 800751c:	b002      	add	sp, #8
 800751e:	bd70      	pop	{r4, r5, r6, pc}
 8007520:	ab01      	add	r3, sp, #4
 8007522:	466a      	mov	r2, sp
 8007524:	f7ff ffca 	bl	80074bc <__swhatbuf_r>
 8007528:	9900      	ldr	r1, [sp, #0]
 800752a:	4605      	mov	r5, r0
 800752c:	4630      	mov	r0, r6
 800752e:	f7ff fa73 	bl	8006a18 <_malloc_r>
 8007532:	b948      	cbnz	r0, 8007548 <__smakebuf_r+0x44>
 8007534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007538:	059a      	lsls	r2, r3, #22
 800753a:	d4ef      	bmi.n	800751c <__smakebuf_r+0x18>
 800753c:	f023 0303 	bic.w	r3, r3, #3
 8007540:	f043 0302 	orr.w	r3, r3, #2
 8007544:	81a3      	strh	r3, [r4, #12]
 8007546:	e7e3      	b.n	8007510 <__smakebuf_r+0xc>
 8007548:	4b0d      	ldr	r3, [pc, #52]	; (8007580 <__smakebuf_r+0x7c>)
 800754a:	62b3      	str	r3, [r6, #40]	; 0x28
 800754c:	89a3      	ldrh	r3, [r4, #12]
 800754e:	6020      	str	r0, [r4, #0]
 8007550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007554:	81a3      	strh	r3, [r4, #12]
 8007556:	9b00      	ldr	r3, [sp, #0]
 8007558:	6163      	str	r3, [r4, #20]
 800755a:	9b01      	ldr	r3, [sp, #4]
 800755c:	6120      	str	r0, [r4, #16]
 800755e:	b15b      	cbz	r3, 8007578 <__smakebuf_r+0x74>
 8007560:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007564:	4630      	mov	r0, r6
 8007566:	f000 f88d 	bl	8007684 <_isatty_r>
 800756a:	b128      	cbz	r0, 8007578 <__smakebuf_r+0x74>
 800756c:	89a3      	ldrh	r3, [r4, #12]
 800756e:	f023 0303 	bic.w	r3, r3, #3
 8007572:	f043 0301 	orr.w	r3, r3, #1
 8007576:	81a3      	strh	r3, [r4, #12]
 8007578:	89a0      	ldrh	r0, [r4, #12]
 800757a:	4305      	orrs	r5, r0
 800757c:	81a5      	strh	r5, [r4, #12]
 800757e:	e7cd      	b.n	800751c <__smakebuf_r+0x18>
 8007580:	08006871 	.word	0x08006871

08007584 <__malloc_lock>:
 8007584:	4801      	ldr	r0, [pc, #4]	; (800758c <__malloc_lock+0x8>)
 8007586:	f7ff ba45 	b.w	8006a14 <__retarget_lock_acquire_recursive>
 800758a:	bf00      	nop
 800758c:	20000734 	.word	0x20000734

08007590 <__malloc_unlock>:
 8007590:	4801      	ldr	r0, [pc, #4]	; (8007598 <__malloc_unlock+0x8>)
 8007592:	f7ff ba40 	b.w	8006a16 <__retarget_lock_release_recursive>
 8007596:	bf00      	nop
 8007598:	20000734 	.word	0x20000734

0800759c <_free_r>:
 800759c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800759e:	2900      	cmp	r1, #0
 80075a0:	d048      	beq.n	8007634 <_free_r+0x98>
 80075a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a6:	9001      	str	r0, [sp, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f1a1 0404 	sub.w	r4, r1, #4
 80075ae:	bfb8      	it	lt
 80075b0:	18e4      	addlt	r4, r4, r3
 80075b2:	f7ff ffe7 	bl	8007584 <__malloc_lock>
 80075b6:	4a20      	ldr	r2, [pc, #128]	; (8007638 <_free_r+0x9c>)
 80075b8:	9801      	ldr	r0, [sp, #4]
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	4615      	mov	r5, r2
 80075be:	b933      	cbnz	r3, 80075ce <_free_r+0x32>
 80075c0:	6063      	str	r3, [r4, #4]
 80075c2:	6014      	str	r4, [r2, #0]
 80075c4:	b003      	add	sp, #12
 80075c6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075ca:	f7ff bfe1 	b.w	8007590 <__malloc_unlock>
 80075ce:	42a3      	cmp	r3, r4
 80075d0:	d90b      	bls.n	80075ea <_free_r+0x4e>
 80075d2:	6821      	ldr	r1, [r4, #0]
 80075d4:	1862      	adds	r2, r4, r1
 80075d6:	4293      	cmp	r3, r2
 80075d8:	bf04      	itt	eq
 80075da:	681a      	ldreq	r2, [r3, #0]
 80075dc:	685b      	ldreq	r3, [r3, #4]
 80075de:	6063      	str	r3, [r4, #4]
 80075e0:	bf04      	itt	eq
 80075e2:	1852      	addeq	r2, r2, r1
 80075e4:	6022      	streq	r2, [r4, #0]
 80075e6:	602c      	str	r4, [r5, #0]
 80075e8:	e7ec      	b.n	80075c4 <_free_r+0x28>
 80075ea:	461a      	mov	r2, r3
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	b10b      	cbz	r3, 80075f4 <_free_r+0x58>
 80075f0:	42a3      	cmp	r3, r4
 80075f2:	d9fa      	bls.n	80075ea <_free_r+0x4e>
 80075f4:	6811      	ldr	r1, [r2, #0]
 80075f6:	1855      	adds	r5, r2, r1
 80075f8:	42a5      	cmp	r5, r4
 80075fa:	d10b      	bne.n	8007614 <_free_r+0x78>
 80075fc:	6824      	ldr	r4, [r4, #0]
 80075fe:	4421      	add	r1, r4
 8007600:	1854      	adds	r4, r2, r1
 8007602:	42a3      	cmp	r3, r4
 8007604:	6011      	str	r1, [r2, #0]
 8007606:	d1dd      	bne.n	80075c4 <_free_r+0x28>
 8007608:	681c      	ldr	r4, [r3, #0]
 800760a:	685b      	ldr	r3, [r3, #4]
 800760c:	6053      	str	r3, [r2, #4]
 800760e:	4421      	add	r1, r4
 8007610:	6011      	str	r1, [r2, #0]
 8007612:	e7d7      	b.n	80075c4 <_free_r+0x28>
 8007614:	d902      	bls.n	800761c <_free_r+0x80>
 8007616:	230c      	movs	r3, #12
 8007618:	6003      	str	r3, [r0, #0]
 800761a:	e7d3      	b.n	80075c4 <_free_r+0x28>
 800761c:	6825      	ldr	r5, [r4, #0]
 800761e:	1961      	adds	r1, r4, r5
 8007620:	428b      	cmp	r3, r1
 8007622:	bf04      	itt	eq
 8007624:	6819      	ldreq	r1, [r3, #0]
 8007626:	685b      	ldreq	r3, [r3, #4]
 8007628:	6063      	str	r3, [r4, #4]
 800762a:	bf04      	itt	eq
 800762c:	1949      	addeq	r1, r1, r5
 800762e:	6021      	streq	r1, [r4, #0]
 8007630:	6054      	str	r4, [r2, #4]
 8007632:	e7c7      	b.n	80075c4 <_free_r+0x28>
 8007634:	b003      	add	sp, #12
 8007636:	bd30      	pop	{r4, r5, pc}
 8007638:	200000bc 	.word	0x200000bc

0800763c <_read_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4d07      	ldr	r5, [pc, #28]	; (800765c <_read_r+0x20>)
 8007640:	4604      	mov	r4, r0
 8007642:	4608      	mov	r0, r1
 8007644:	4611      	mov	r1, r2
 8007646:	2200      	movs	r2, #0
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f7f9 fded 	bl	800122a <_read>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_read_r+0x1e>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_read_r+0x1e>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	2000073c 	.word	0x2000073c

08007660 <_fstat_r>:
 8007660:	b538      	push	{r3, r4, r5, lr}
 8007662:	4d07      	ldr	r5, [pc, #28]	; (8007680 <_fstat_r+0x20>)
 8007664:	2300      	movs	r3, #0
 8007666:	4604      	mov	r4, r0
 8007668:	4608      	mov	r0, r1
 800766a:	4611      	mov	r1, r2
 800766c:	602b      	str	r3, [r5, #0]
 800766e:	f7f9 fe05 	bl	800127c <_fstat>
 8007672:	1c43      	adds	r3, r0, #1
 8007674:	d102      	bne.n	800767c <_fstat_r+0x1c>
 8007676:	682b      	ldr	r3, [r5, #0]
 8007678:	b103      	cbz	r3, 800767c <_fstat_r+0x1c>
 800767a:	6023      	str	r3, [r4, #0]
 800767c:	bd38      	pop	{r3, r4, r5, pc}
 800767e:	bf00      	nop
 8007680:	2000073c 	.word	0x2000073c

08007684 <_isatty_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d06      	ldr	r5, [pc, #24]	; (80076a0 <_isatty_r+0x1c>)
 8007688:	2300      	movs	r3, #0
 800768a:	4604      	mov	r4, r0
 800768c:	4608      	mov	r0, r1
 800768e:	602b      	str	r3, [r5, #0]
 8007690:	f7f9 fe04 	bl	800129c <_isatty>
 8007694:	1c43      	adds	r3, r0, #1
 8007696:	d102      	bne.n	800769e <_isatty_r+0x1a>
 8007698:	682b      	ldr	r3, [r5, #0]
 800769a:	b103      	cbz	r3, 800769e <_isatty_r+0x1a>
 800769c:	6023      	str	r3, [r4, #0]
 800769e:	bd38      	pop	{r3, r4, r5, pc}
 80076a0:	2000073c 	.word	0x2000073c

080076a4 <_init>:
 80076a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076a6:	bf00      	nop
 80076a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076aa:	bc08      	pop	{r3}
 80076ac:	469e      	mov	lr, r3
 80076ae:	4770      	bx	lr

080076b0 <_fini>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	bf00      	nop
 80076b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b6:	bc08      	pop	{r3}
 80076b8:	469e      	mov	lr, r3
 80076ba:	4770      	bx	lr
