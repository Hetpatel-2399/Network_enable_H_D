
B-L475E-IOT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004eb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009d0  08005048  08005048  00015048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a18  08005a18  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08005a18  08005a18  00015a18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a20  08005a20  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005a20  08005a20  00015a20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08005a28  08005a28  00015a28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08005a30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c78  20000088  08005ab8  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00017000  20000d00  08005ab8  00020d00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019f85  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003283  00000000  00000000  0003a03d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    0000b8e0  00000000  00000000  0003d2c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00048ba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001170  00000000  00000000  000498e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027905  00000000  00000000  0004aa58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012fae  00000000  00000000  0007235d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000edcd3  00000000  00000000  0008530b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00172fde  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000033ac  00000000  00000000  00173034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000088 	.word	0x20000088
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005030 	.word	0x08005030

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	08005030 	.word	0x08005030

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <main>:
  * @brief  Main program
  * @param  None
  * @retval None
  */
int main(void)
{
 8000578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint8_t  MAC_Addr[6];
  uint8_t  IP_Addr[4];
  uint8_t TxData[] = "STM32 : Hello!\n";
 800057c:	4b84      	ldr	r3, [pc, #528]	; (8000790 <main+0x218>)
{
 800057e:	b0a1      	sub	sp, #132	; 0x84
  uint8_t TxData[] = "STM32 : Hello!\n";
 8000580:	aa06      	add	r2, sp, #24
 8000582:	f103 0510 	add.w	r5, r3, #16
 8000586:	4616      	mov	r6, r2
 8000588:	6818      	ldr	r0, [r3, #0]
 800058a:	6859      	ldr	r1, [r3, #4]
 800058c:	4614      	mov	r4, r2
 800058e:	c403      	stmia	r4!, {r0, r1}
 8000590:	3308      	adds	r3, #8
 8000592:	42ab      	cmp	r3, r5
 8000594:	4622      	mov	r2, r4
 8000596:	d1f7      	bne.n	8000588 <main+0x10>
  uint16_t Datalen;
  int32_t ret;
  int16_t Trials = CONNECTION_TRIAL_MAX;

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000598:	f001 f95a 	bl	8001850 <HAL_Init>

  /* MSI is enabled after System reset, activate PLL with MSI as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800059c:	2460      	movs	r4, #96	; 0x60
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800059e:	2310      	movs	r3, #16
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80005a0:	2200      	movs	r2, #0
 80005a2:	e9cd 2416 	strd	r2, r4, [sp, #88]	; 0x58
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2202      	movs	r2, #2
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005aa:	2301      	movs	r3, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80005ac:	e9cd 2319 	strd	r2, r3, [sp, #100]	; 0x64
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005b0:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005b2:	931b      	str	r3, [sp, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLN = 40;
 80005b4:	2328      	movs	r3, #40	; 0x28
 80005b6:	931c      	str	r3, [sp, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLP = 7;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005b8:	2404      	movs	r4, #4
 80005ba:	2307      	movs	r3, #7
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005bc:	a80f      	add	r0, sp, #60	; 0x3c
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005be:	e9cd 341d 	strd	r3, r4, [sp, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005c2:	921f      	str	r2, [sp, #124]	; 0x7c
  if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f001 fb96 	bl	8001cf4 <HAL_RCC_OscConfig>
 80005c8:	b100      	cbz	r0, 80005cc <main+0x54>
  {
    /* Initialization Error */
    while(1);
 80005ca:	e7fe      	b.n	80005ca <main+0x52>
  }

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	210f      	movs	r1, #15
 80005ce:	2303      	movs	r3, #3
 80005d0:	e9cd 130a 	strd	r1, r3, [sp, #40]	; 0x28
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d4:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005d8:	900e      	str	r0, [sp, #56]	; 0x38
  if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005da:	4621      	mov	r1, r4
 80005dc:	a80a      	add	r0, sp, #40	; 0x28
 80005de:	f001 fe0f 	bl	8002200 <HAL_RCC_ClockConfig>
 80005e2:	4604      	mov	r4, r0
 80005e4:	b100      	cbz	r0, 80005e8 <main+0x70>
  {
    /* Initialization Error */
    while(1);
 80005e6:	e7fe      	b.n	80005e6 <main+0x6e>
  BSP_LED_Init(LED2);
 80005e8:	f001 f878 	bl	80016dc <BSP_LED_Init>
  hDiscoUart.Instance = DISCOVERY_COM1;
 80005ec:	4969      	ldr	r1, [pc, #420]	; (8000794 <main+0x21c>)
  hDiscoUart.Init.BaudRate = 115200;
 80005ee:	4a6a      	ldr	r2, [pc, #424]	; (8000798 <main+0x220>)
  hDiscoUart.Init.Parity = UART_PARITY_NONE;
 80005f0:	610c      	str	r4, [r1, #16]
  hDiscoUart.Init.BaudRate = 115200;
 80005f2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80005f6:	e9c1 2300 	strd	r2, r3, [r1]
  BSP_COM_Init(COM1, &hDiscoUart);
 80005fa:	4620      	mov	r0, r4
  hDiscoUart.Init.Mode = UART_MODE_TX_RX;
 80005fc:	230c      	movs	r3, #12
  hDiscoUart.Init.StopBits = UART_STOPBITS_1;
 80005fe:	e9c1 4402 	strd	r4, r4, [r1, #8]
  hDiscoUart.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000602:	e9c1 3405 	strd	r3, r4, [r1, #20]
  hDiscoUart.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000606:	e9c1 4407 	strd	r4, r4, [r1, #28]
  hDiscoUart.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060a:	624c      	str	r4, [r1, #36]	; 0x24
  BSP_COM_Init(COM1, &hDiscoUart);
 800060c:	f001 f892 	bl	8001734 <BSP_COM_Init>
  TERMOUT("****** WIFI Module in TCP Client mode demonstration ****** \n\n");
 8000610:	4862      	ldr	r0, [pc, #392]	; (800079c <main+0x224>)
 8000612:	f003 faf1 	bl	8003bf8 <puts>
  TERMOUT("TCP Client Instructions :\n");
 8000616:	4862      	ldr	r0, [pc, #392]	; (80007a0 <main+0x228>)
 8000618:	f003 faee 	bl	8003bf8 <puts>
  TERMOUT("1- Make sure your Phone is connected to the same network that\n");
 800061c:	4861      	ldr	r0, [pc, #388]	; (80007a4 <main+0x22c>)
 800061e:	f003 faeb 	bl	8003bf8 <puts>
  TERMOUT("   you configured using the Configuration Access Point.\n");
 8000622:	4861      	ldr	r0, [pc, #388]	; (80007a8 <main+0x230>)
 8000624:	f003 fae8 	bl	8003bf8 <puts>
  TERMOUT("2- Create a server by using the android application TCP Server\n");
 8000628:	4860      	ldr	r0, [pc, #384]	; (80007ac <main+0x234>)
 800062a:	f003 fae5 	bl	8003bf8 <puts>
  TERMOUT("   with port(8002).\n");
 800062e:	4860      	ldr	r0, [pc, #384]	; (80007b0 <main+0x238>)
 8000630:	f003 fae2 	bl	8003bf8 <puts>
  TERMOUT("3- Get the Network Name or IP Address of your Android from the step 2.\n\n");
 8000634:	485f      	ldr	r0, [pc, #380]	; (80007b4 <main+0x23c>)
 8000636:	f003 fadf 	bl	8003bf8 <puts>
  if(WIFI_Init() ==  WIFI_STATUS_OK)
 800063a:	f000 ffaf 	bl	800159c <WIFI_Init>
 800063e:	4605      	mov	r5, r0
 8000640:	2800      	cmp	r0, #0
 8000642:	d17a      	bne.n	800073a <main+0x1c2>
    TERMOUT("> WIFI Module Initialized.\n");
 8000644:	485c      	ldr	r0, [pc, #368]	; (80007b8 <main+0x240>)
 8000646:	f003 fad7 	bl	8003bf8 <puts>
    if(WIFI_GetMAC_Address(MAC_Addr) == WIFI_STATUS_OK)
 800064a:	a80f      	add	r0, sp, #60	; 0x3c
 800064c:	f000 ffde 	bl	800160c <WIFI_GetMAC_Address>
 8000650:	2800      	cmp	r0, #0
 8000652:	d14a      	bne.n	80006ea <main+0x172>
      TERMOUT("> es-wifi module MAC Address : %X:%X:%X:%X:%X:%X\n",
 8000654:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8000658:	9302      	str	r3, [sp, #8]
 800065a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
 800065e:	9301      	str	r3, [sp, #4]
 8000660:	f89d 303f 	ldrb.w	r3, [sp, #63]	; 0x3f
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	f89d 203d 	ldrb.w	r2, [sp, #61]	; 0x3d
 800066a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
 800066e:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 8000672:	4852      	ldr	r0, [pc, #328]	; (80007bc <main+0x244>)
 8000674:	f003 fa3a 	bl	8003aec <iprintf>
    if( WIFI_Connect(SSID, PASSWORD, WIFI_ECN_WPA2_PSK) == WIFI_STATUS_OK)
 8000678:	4951      	ldr	r1, [pc, #324]	; (80007c0 <main+0x248>)
 800067a:	4852      	ldr	r0, [pc, #328]	; (80007c4 <main+0x24c>)
 800067c:	2203      	movs	r2, #3
 800067e:	f000 ffb1 	bl	80015e4 <WIFI_Connect>
 8000682:	4604      	mov	r4, r0
 8000684:	2800      	cmp	r0, #0
 8000686:	d156      	bne.n	8000736 <main+0x1be>
      TERMOUT("> es-wifi module connected \n");
 8000688:	484f      	ldr	r0, [pc, #316]	; (80007c8 <main+0x250>)
 800068a:	f003 fab5 	bl	8003bf8 <puts>
      if(WIFI_GetIP_Address(IP_Addr) == WIFI_STATUS_OK)
 800068e:	a80a      	add	r0, sp, #40	; 0x28
 8000690:	f000 ffc8 	bl	8001624 <WIFI_GetIP_Address>
 8000694:	4607      	mov	r7, r0
 8000696:	2800      	cmp	r0, #0
 8000698:	d148      	bne.n	800072c <main+0x1b4>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 800069a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800069e:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
 80006a2:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
 80006a6:	9300      	str	r3, [sp, #0]
 80006a8:	4848      	ldr	r0, [pc, #288]	; (80007cc <main+0x254>)
 80006aa:	f89d 302a 	ldrb.w	r3, [sp, #42]	; 0x2a
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80006ae:	4c48      	ldr	r4, [pc, #288]	; (80007d0 <main+0x258>)
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80006b0:	f8df 9148 	ldr.w	r9, [pc, #328]	; 80007fc <main+0x284>
        TERMOUT("> es-wifi module got IP Address : %d.%d.%d.%d\n",
 80006b4:	f003 fa1a 	bl	8003aec <iprintf>
        TERMOUT("> Trying to connect to Server: %d.%d.%d.%d:%d ...\n",
 80006b8:	f641 7342 	movw	r3, #8002	; 0x1f42
 80006bc:	9301      	str	r3, [sp, #4]
 80006be:	78e3      	ldrb	r3, [r4, #3]
 80006c0:	9300      	str	r3, [sp, #0]
 80006c2:	78a3      	ldrb	r3, [r4, #2]
 80006c4:	7862      	ldrb	r2, [r4, #1]
 80006c6:	7821      	ldrb	r1, [r4, #0]
 80006c8:	4842      	ldr	r0, [pc, #264]	; (80007d4 <main+0x25c>)
 80006ca:	f003 fa0f 	bl	8003aec <iprintf>
        while (Trials--)
 80006ce:	250b      	movs	r5, #11
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80006d0:	46b8      	mov	r8, r7
        while (Trials--)
 80006d2:	3d01      	subs	r5, #1
 80006d4:	b2ad      	uxth	r5, r5
 80006d6:	b97d      	cbnz	r5, 80006f8 <main+0x180>
          TERMOUT("> ERROR : Cannot open Connection\n");
 80006d8:	483f      	ldr	r0, [pc, #252]	; (80007d8 <main+0x260>)
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 80006da:	f003 fa8d 	bl	8003bf8 <puts>
      BSP_LED_On(LED2);
 80006de:	2000      	movs	r0, #0
    BSP_LED_On(LED2);
 80006e0:	f001 f81e 	bl	8001720 <BSP_LED_On>
  int32_t Socket = -1;
 80006e4:	f04f 34ff 	mov.w	r4, #4294967295
 80006e8:	e018      	b.n	800071c <main+0x1a4>
      TERMOUT("> ERROR : CANNOT get MAC address\n");
 80006ea:	483c      	ldr	r0, [pc, #240]	; (80007dc <main+0x264>)
 80006ec:	f003 fa84 	bl	8003bf8 <puts>
      BSP_LED_On(LED2);
 80006f0:	4628      	mov	r0, r5
 80006f2:	f001 f815 	bl	8001720 <BSP_LED_On>
 80006f6:	e7bf      	b.n	8000678 <main+0x100>
          if( WIFI_OpenClientConnection(0, WIFI_TCP_PROTOCOL, "TCP_CLIENT", RemoteIP, RemotePORT, 0) == WIFI_STATUS_OK)
 80006f8:	f641 7342 	movw	r3, #8002	; 0x1f42
 80006fc:	2100      	movs	r1, #0
 80006fe:	9300      	str	r3, [sp, #0]
 8000700:	f8cd 8004 	str.w	r8, [sp, #4]
 8000704:	4623      	mov	r3, r4
 8000706:	464a      	mov	r2, r9
 8000708:	4608      	mov	r0, r1
 800070a:	f000 ff9b 	bl	8001644 <WIFI_OpenClientConnection>
 800070e:	4607      	mov	r7, r0
 8000710:	2800      	cmp	r0, #0
 8000712:	d1de      	bne.n	80006d2 <main+0x15a>
            TERMOUT("> TCP Connection opened successfully.\n");
 8000714:	4832      	ldr	r0, [pc, #200]	; (80007e0 <main+0x268>)
 8000716:	f003 fa6f 	bl	8003bf8 <puts>
            Socket = 0;
 800071a:	463c      	mov	r4, r7
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 800071c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80007f0 <main+0x278>
          TERMOUT("Received: %s\n",RxData);
 8000720:	f8df 90dc 	ldr.w	r9, [pc, #220]	; 8000800 <main+0x288>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 8000724:	f242 7710 	movw	r7, #10000	; 0x2710
    if(Socket != -1)
 8000728:	b14c      	cbz	r4, 800073e <main+0x1c6>
 800072a:	e7fe      	b.n	800072a <main+0x1b2>
        TERMOUT("> ERROR : es-wifi module CANNOT get IP address\n");
 800072c:	482d      	ldr	r0, [pc, #180]	; (80007e4 <main+0x26c>)
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 800072e:	f003 fa63 	bl	8003bf8 <puts>
    BSP_LED_On(LED2);
 8000732:	4620      	mov	r0, r4
 8000734:	e7d4      	b.n	80006e0 <main+0x168>
      TERMOUT("> ERROR : es-wifi module NOT connected\n");
 8000736:	482c      	ldr	r0, [pc, #176]	; (80007e8 <main+0x270>)
 8000738:	e7cf      	b.n	80006da <main+0x162>
    TERMOUT("> ERROR : WIFI Module cannot be initialized.\n");
 800073a:	482c      	ldr	r0, [pc, #176]	; (80007ec <main+0x274>)
 800073c:	e7f7      	b.n	800072e <main+0x1b6>
      ret = WIFI_ReceiveData(Socket, RxData, sizeof(RxData)-1, &Datalen, WIFI_READ_TIMEOUT);
 800073e:	492c      	ldr	r1, [pc, #176]	; (80007f0 <main+0x278>)
 8000740:	9700      	str	r7, [sp, #0]
 8000742:	f10d 0316 	add.w	r3, sp, #22
 8000746:	f240 12f3 	movw	r2, #499	; 0x1f3
 800074a:	2000      	movs	r0, #0
 800074c:	f000 ffb4 	bl	80016b8 <WIFI_ReceiveData>
      if(ret == WIFI_STATUS_OK)
 8000750:	4605      	mov	r5, r0
 8000752:	b9d0      	cbnz	r0, 800078a <main+0x212>
        if(Datalen > 0)
 8000754:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 8000758:	2b00      	cmp	r3, #0
 800075a:	d0e5      	beq.n	8000728 <main+0x1b0>
          RxData[Datalen]=0;
 800075c:	f808 0003 	strb.w	r0, [r8, r3]
          TERMOUT("Received: %s\n",RxData);
 8000760:	4641      	mov	r1, r8
 8000762:	4648      	mov	r0, r9
 8000764:	f003 f9c2 	bl	8003aec <iprintf>
          ret = WIFI_SendData(Socket, TxData, sizeof(TxData), &Datalen, WIFI_WRITE_TIMEOUT);
 8000768:	9700      	str	r7, [sp, #0]
 800076a:	f10d 0316 	add.w	r3, sp, #22
 800076e:	2210      	movs	r2, #16
 8000770:	4631      	mov	r1, r6
 8000772:	4628      	mov	r0, r5
 8000774:	f000 ff8e 	bl	8001694 <WIFI_SendData>
          if (ret != WIFI_STATUS_OK)
 8000778:	2800      	cmp	r0, #0
 800077a:	d0d3      	beq.n	8000724 <main+0x1ac>
            TERMOUT("> ERROR : Failed to Send Data, connection closed\n");
 800077c:	481d      	ldr	r0, [pc, #116]	; (80007f4 <main+0x27c>)
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 800077e:	f003 fa3b 	bl	8003bf8 <puts>
}
 8000782:	2000      	movs	r0, #0
 8000784:	b021      	add	sp, #132	; 0x84
 8000786:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        TERMOUT("> ERROR : Failed to Receive Data, connection closed\n");
 800078a:	481b      	ldr	r0, [pc, #108]	; (80007f8 <main+0x280>)
 800078c:	e7f7      	b.n	800077e <main+0x206>
 800078e:	bf00      	nop
 8000790:	08005449 	.word	0x08005449
 8000794:	20000c20 	.word	0x20000c20
 8000798:	40013800 	.word	0x40013800
 800079c:	080050a0 	.word	0x080050a0
 80007a0:	080050dd 	.word	0x080050dd
 80007a4:	080050f7 	.word	0x080050f7
 80007a8:	08005135 	.word	0x08005135
 80007ac:	0800516d 	.word	0x0800516d
 80007b0:	080051ac 	.word	0x080051ac
 80007b4:	080051c0 	.word	0x080051c0
 80007b8:	08005208 	.word	0x08005208
 80007bc:	08005223 	.word	0x08005223
 80007c0:	08005276 	.word	0x08005276
 80007c4:	08005280 	.word	0x08005280
 80007c8:	08005283 	.word	0x08005283
 80007cc:	0800529f 	.word	0x0800529f
 80007d0:	20000000 	.word	0x20000000
 80007d4:	080052ce 	.word	0x080052ce
 80007d8:	08005332 	.word	0x08005332
 80007dc:	08005255 	.word	0x08005255
 80007e0:	0800530c 	.word	0x0800530c
 80007e4:	08005353 	.word	0x08005353
 80007e8:	08005382 	.word	0x08005382
 80007ec:	080053a9 	.word	0x080053a9
 80007f0:	200000a4 	.word	0x200000a4
 80007f4:	080053e4 	.word	0x080053e4
 80007f8:	08005415 	.word	0x08005415
 80007fc:	08005301 	.word	0x08005301
 8000800:	080053d6 	.word	0x080053d6

08000804 <__io_putchar>:
  * @brief  Retargets the C library TERMOUT function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000804:	b507      	push	{r0, r1, r2, lr}
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 8000806:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 800080a:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&hDiscoUart, (uint8_t *)&ch, 1, 0xFFFF);
 800080c:	2201      	movs	r2, #1
 800080e:	a901      	add	r1, sp, #4
 8000810:	4803      	ldr	r0, [pc, #12]	; (8000820 <__io_putchar+0x1c>)
 8000812:	f002 fffe 	bl	8003812 <HAL_UART_Transmit>

  return ch;
}
 8000816:	9801      	ldr	r0, [sp, #4]
 8000818:	b003      	add	sp, #12
 800081a:	f85d fb04 	ldr.w	pc, [sp], #4
 800081e:	bf00      	nop
 8000820:	20000c20 	.word	0x20000c20

08000824 <HAL_GPIO_EXTI_Callback>:
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
  switch (GPIO_Pin)
 8000824:	2802      	cmp	r0, #2
 8000826:	d101      	bne.n	800082c <HAL_GPIO_EXTI_Callback+0x8>
  {
    case (GPIO_PIN_1):
    {
      SPI_WIFI_ISR();
 8000828:	f000 beae 	b.w	8001588 <SPI_WIFI_ISR>
    default:
    {
      break;
    }
  }
}
 800082c:	4770      	bx	lr
	...

08000830 <SPI3_IRQHandler>:

void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi);
 8000830:	4801      	ldr	r0, [pc, #4]	; (8000838 <SPI3_IRQHandler+0x8>)
 8000832:	f002 bd7d 	b.w	8003330 <HAL_SPI_IRQHandler>
 8000836:	bf00      	nop
 8000838:	200002bc 	.word	0x200002bc

0800083c <NMI_Handler>:
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
}
 800083c:	4770      	bx	lr

0800083e <HardFault_Handler>:
  * @retval None
  */
void HardFault_Handler(void)
{
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800083e:	e7fe      	b.n	800083e <HardFault_Handler>

08000840 <MemManage_Handler>:
  * @retval None
  */
void MemManage_Handler(void)
{
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000840:	e7fe      	b.n	8000840 <MemManage_Handler>

08000842 <BusFault_Handler>:
  * @retval None
  */
void BusFault_Handler(void)
{
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000842:	e7fe      	b.n	8000842 <BusFault_Handler>

08000844 <UsageFault_Handler>:
  * @retval None
  */
void UsageFault_Handler(void)
{
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000844:	e7fe      	b.n	8000844 <UsageFault_Handler>

08000846 <SVC_Handler>:
 8000846:	4770      	bx	lr

08000848 <DebugMon_Handler>:
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
  HAL_IncTick();
 800084c:	f001 b810 	b.w	8001870 <HAL_IncTick>

08000850 <EXTI1_IRQHandler>:
  * @param  None
  * @retval None
  */
void EXTI1_IRQHandler(void)
{
 HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000850:	2002      	movs	r0, #2
 8000852:	f001 b9ab 	b.w	8001bac <HAL_GPIO_EXTI_IRQHandler>

08000856 <ParseNumber>:
  * @param  ptr: pointer to string
  * @param  cnt: pointer to the number of parsed digit
  * @retval integer value.
  */
static int32_t ParseNumber(char* ptr, uint8_t* cnt)
{
 8000856:	b5f0      	push	{r4, r5, r6, r7, lr}
    uint8_t minus = 0, i = 0;
    int32_t sum = 0;

    if (*ptr == '-') {                                		/* Check for minus character */
 8000858:	7803      	ldrb	r3, [r0, #0]
 800085a:	2b2d      	cmp	r3, #45	; 0x2d
 800085c:	d115      	bne.n	800088a <ParseNumber+0x34>
        minus = 1;
        ptr++;
 800085e:	3001      	adds	r0, #1
        minus = 1;
 8000860:	2501      	movs	r5, #1
 8000862:	1e43      	subs	r3, r0, #1
    uint8_t minus = 0, i = 0;
 8000864:	462a      	mov	r2, r5
 8000866:	2000      	movs	r0, #0
        i++;
    }
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
        sum = 10 * sum + CHAR2NUM(*ptr);
 8000868:	270a      	movs	r7, #10
 800086a:	e003      	b.n	8000874 <ParseNumber+0x1e>
        ptr++;
        i++;
 800086c:	3201      	adds	r2, #1
        sum = 10 * sum + CHAR2NUM(*ptr);
 800086e:	fb07 4000 	mla	r0, r7, r0, r4
        i++;
 8000872:	b2d2      	uxtb	r2, r2
    while (CHARISNUM(*ptr)) {                        		/* Parse number */
 8000874:	f813 4f01 	ldrb.w	r4, [r3, #1]!
 8000878:	3c30      	subs	r4, #48	; 0x30
 800087a:	b2e6      	uxtb	r6, r4
 800087c:	2e09      	cmp	r6, #9
 800087e:	d9f5      	bls.n	800086c <ParseNumber+0x16>
    }
    if (cnt != NULL) {                                		/* Save number of characters used for number */
 8000880:	b101      	cbz	r1, 8000884 <ParseNumber+0x2e>
        *cnt = i;
 8000882:	700a      	strb	r2, [r1, #0]
    }
    if (minus) {                                    		/* Minus detected */
 8000884:	b105      	cbz	r5, 8000888 <ParseNumber+0x32>
        return 0 - sum;
 8000886:	4240      	negs	r0, r0
    }
    return sum;                                       		/* Return number */
}
 8000888:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint8_t minus = 0, i = 0;
 800088a:	2500      	movs	r5, #0
 800088c:	e7e9      	b.n	8000862 <ParseNumber+0xc>

0800088e <ParseMAC>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to MAC array
  * @retval None.
  */
static void ParseMAC(char* ptr, uint8_t* arr)
{
 800088e:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint8_t hexnum = 0, hexcnt;
 8000890:	2600      	movs	r6, #0

  while(* ptr) {
 8000892:	7803      	ldrb	r3, [r0, #0]
 8000894:	b903      	cbnz	r3, 8000898 <ParseMAC+0xa>
    {
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8000896:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != ':')
 8000898:	2b3a      	cmp	r3, #58	; 0x3a
 800089a:	d128      	bne.n	80008ee <ParseMAC+0x60>
    hexcnt = 1;
 800089c:	f04f 0c01 	mov.w	ip, #1
    ptr = ptr + hexcnt;
 80008a0:	4460      	add	r0, ip
 80008a2:	e7f6      	b.n	8000892 <ParseMAC+0x4>
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80008a4:	2a09      	cmp	r2, #9
        sum <<= 4;
 80008a6:	ea4f 1404 	mov.w	r4, r4, lsl #4
    if (a >= '0' && a <= '9') {                             /* Char is num */
 80008aa:	d905      	bls.n	80008b8 <ParseMAC+0x2a>
    } else if (a >= 'a' && a <= 'f') {                      /* Char is lowercase character A - Z (hex) */
 80008ac:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80008b0:	2a05      	cmp	r2, #5
 80008b2:	d814      	bhi.n	80008de <ParseMAC+0x50>
        return (a - 'a') + 10;
 80008b4:	3b57      	subs	r3, #87	; 0x57
        return (a - 'A') + 10;
 80008b6:	b2da      	uxtb	r2, r3
        sum += Hex2Num(*ptr);
 80008b8:	4414      	add	r4, r2
        i++;
 80008ba:	3501      	adds	r5, #1
    while (CHARISHEXNUM(*ptr)) {                    		/* Parse number */
 80008bc:	5d43      	ldrb	r3, [r0, r5]
 80008be:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80008c2:	b2d2      	uxtb	r2, r2
 80008c4:	2a09      	cmp	r2, #9
 80008c6:	fa5f fc85 	uxtb.w	ip, r5
 80008ca:	d9eb      	bls.n	80008a4 <ParseMAC+0x16>
 80008cc:	f023 0720 	bic.w	r7, r3, #32
 80008d0:	3f41      	subs	r7, #65	; 0x41
 80008d2:	2f05      	cmp	r7, #5
 80008d4:	d9e6      	bls.n	80008a4 <ParseMAC+0x16>
      arr[hexnum++] = ParseHexNumber(ptr, &hexcnt);
 80008d6:	1c73      	adds	r3, r6, #1
 80008d8:	558c      	strb	r4, [r1, r6]
 80008da:	b2de      	uxtb	r6, r3
 80008dc:	e7e0      	b.n	80008a0 <ParseMAC+0x12>
    } else if (a >= 'A' && a <= 'F') {                      /* Char is uppercase character A - Z (hex) */
 80008de:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80008e2:	2a05      	cmp	r2, #5
 80008e4:	d801      	bhi.n	80008ea <ParseMAC+0x5c>
        return (a - 'A') + 10;
 80008e6:	3b37      	subs	r3, #55	; 0x37
 80008e8:	e7e5      	b.n	80008b6 <ParseMAC+0x28>
    return 0;
 80008ea:	2200      	movs	r2, #0
 80008ec:	e7e4      	b.n	80008b8 <ParseMAC+0x2a>
 80008ee:	2500      	movs	r5, #0
    uint32_t sum = 0;
 80008f0:	462c      	mov	r4, r5
 80008f2:	e7e3      	b.n	80008bc <ParseMAC+0x2e>

080008f4 <ParseIP>:
  * @param  ptr: pointer to string
  * @param  arr: pointer to IP array
  * @retval None.
  */
static  void ParseIP(char* ptr, uint8_t* arr)
{
 80008f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	460e      	mov	r6, r1
  uint8_t hexnum = 0, hexcnt;
 80008fa:	2500      	movs	r5, #0

  while(* ptr) {
    hexcnt = 1;
 80008fc:	2701      	movs	r7, #1
  while(* ptr) {
 80008fe:	7823      	ldrb	r3, [r4, #0]
 8000900:	b90b      	cbnz	r3, 8000906 <ParseIP+0x12>
    {
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
    }
    ptr = ptr + hexcnt;
  }
}
 8000902:	b003      	add	sp, #12
 8000904:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if(*ptr != '.')
 8000906:	2b2e      	cmp	r3, #46	; 0x2e
    hexcnt = 1;
 8000908:	f88d 7007 	strb.w	r7, [sp, #7]
    if(*ptr != '.')
 800090c:	d007      	beq.n	800091e <ParseIP+0x2a>
      arr[hexnum++] = ParseNumber(ptr, &hexcnt);
 800090e:	f10d 0107 	add.w	r1, sp, #7
 8000912:	4620      	mov	r0, r4
 8000914:	f7ff ff9f 	bl	8000856 <ParseNumber>
 8000918:	1c6b      	adds	r3, r5, #1
 800091a:	5570      	strb	r0, [r6, r5]
 800091c:	b2dd      	uxtb	r5, r3
    ptr = ptr + hexcnt;
 800091e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8000922:	441c      	add	r4, r3
 8000924:	e7eb      	b.n	80008fe <ParseIP+0xa>
	...

08000928 <AT_ExecuteCommand>:
  * @param  cmd: pointer to command string
  * @param  pdata: pointer to returned data
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_ExecuteCommand(ES_WIFIObject_t *Obj, uint8_t* cmd, uint8_t *pdata)
{
 8000928:	b570      	push	{r4, r5, r6, lr}
 800092a:	4604      	mov	r4, r0
  int ret = 0;
  int16_t recv_len = 0;
  LOCK_WIFI();

  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 800092c:	4608      	mov	r0, r1
{
 800092e:	460e      	mov	r6, r1
 8000930:	4615      	mov	r5, r2
  ret = Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout);
 8000932:	f7ff fc4d 	bl	80001d0 <strlen>
 8000936:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
 800093a:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 800093e:	b281      	uxth	r1, r0
 8000940:	4630      	mov	r0, r6
 8000942:	4798      	blx	r3

  if( ret > 0)
 8000944:	2800      	cmp	r0, #0
 8000946:	dd24      	ble.n	8000992 <AT_ExecuteCommand+0x6a>
  {
    recv_len = Obj->fops.IO_Receive(pdata, ES_WIFI_DATA_SIZE, Obj->Timeout);
 8000948:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
 800094c:	f8d4 28f8 	ldr.w	r2, [r4, #2296]	; 0x8f8
 8000950:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000954:	4628      	mov	r0, r5
 8000956:	4798      	blx	r3
    if((recv_len > 0) && (recv_len <= ES_WIFI_DATA_SIZE))
 8000958:	1e43      	subs	r3, r0, #1
 800095a:	b29b      	uxth	r3, r3
 800095c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8000960:	d211      	bcs.n	8000986 <AT_ExecuteCommand+0x5e>
    {
      if (recv_len == ES_WIFI_DATA_SIZE)
 8000962:	f5b0 6ffa 	cmp.w	r0, #2000	; 0x7d0
      {
        // ES_WIFI_DATA_SIZE maybe too small !!
        recv_len--;
 8000966:	bf08      	it	eq
 8000968:	b218      	sxtheq	r0, r3
      }
      *(pdata + recv_len) = 0;
 800096a:	2400      	movs	r4, #0
 800096c:	542c      	strb	r4, [r5, r0]
      if(strstr((char *)pdata, AT_OK_STRING))
 800096e:	490a      	ldr	r1, [pc, #40]	; (8000998 <AT_ExecuteCommand+0x70>)
 8000970:	4628      	mov	r0, r5
 8000972:	f003 f984 	bl	8003c7e <strstr>
 8000976:	b950      	cbnz	r0, 800098e <AT_ExecuteCommand+0x66>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_OK;
      }
      else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000978:	4908      	ldr	r1, [pc, #32]	; (800099c <AT_ExecuteCommand+0x74>)
 800097a:	4628      	mov	r0, r5
 800097c:	f003 f97f 	bl	8003c7e <strstr>
 8000980:	b138      	cbz	r0, 8000992 <AT_ExecuteCommand+0x6a>
      {
        UNLOCK_WIFI();
        return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000982:	2005      	movs	r0, #5
 8000984:	e002      	b.n	800098c <AT_ExecuteCommand+0x64>
      }
    }
    if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000986:	3004      	adds	r0, #4
 8000988:	d103      	bne.n	8000992 <AT_ExecuteCommand+0x6a>
    {
      UNLOCK_WIFI();
      return ES_WIFI_STATUS_MODULE_CRASH;
 800098a:	2006      	movs	r0, #6
    }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
}
 800098c:	bd70      	pop	{r4, r5, r6, pc}
        return ES_WIFI_STATUS_OK;
 800098e:	4620      	mov	r0, r4
 8000990:	e7fc      	b.n	800098c <AT_ExecuteCommand+0x64>
  return ES_WIFI_STATUS_IO_ERROR;
 8000992:	2004      	movs	r0, #4
 8000994:	e7fa      	b.n	800098c <AT_ExecuteCommand+0x64>
 8000996:	bf00      	nop
 8000998:	08005459 	.word	0x08005459
 800099c:	08005462 	.word	0x08005462

080009a0 <AT_RequestReceiveData>:
  * @param  Reqlen : requested Data length.
  * @param  ReadData : pointer to received data length.
  * @retval Operation Status.
  */
static ES_WIFI_Status_t AT_RequestReceiveData(ES_WIFIObject_t *Obj, uint8_t* cmd, char *pdata, uint16_t Reqlen, uint16_t *ReadData)
{
 80009a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009a4:	4680      	mov	r8, r0
  int len;
  uint8_t *p=Obj->CmdData;

  LOCK_WIFI();
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80009a6:	4608      	mov	r0, r1
{
 80009a8:	4689      	mov	r9, r1
 80009aa:	4615      	mov	r5, r2
 80009ac:	461f      	mov	r7, r3
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80009ae:	f7ff fc0f 	bl	80001d0 <strlen>
 80009b2:	f8d8 3120 	ldr.w	r3, [r8, #288]	; 0x120
 80009b6:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
{
 80009ba:	9e08      	ldr	r6, [sp, #32]
  if(Obj->fops.IO_Send(cmd, strlen((char*)cmd), Obj->Timeout) > 0)
 80009bc:	b281      	uxth	r1, r0
 80009be:	4648      	mov	r0, r9
 80009c0:	4798      	blx	r3
 80009c2:	2800      	cmp	r0, #0
 80009c4:	dc02      	bgt.n	80009cc <AT_RequestReceiveData+0x2c>
     UNLOCK_WIFI();
     return ES_WIFI_STATUS_MODULE_CRASH;
   }
  }
  UNLOCK_WIFI();
  return ES_WIFI_STATUS_IO_ERROR;
 80009c6:	2004      	movs	r0, #4
}
 80009c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    len = Obj->fops.IO_Receive(p, 0 , Obj->Timeout);
 80009cc:	f8d8 3124 	ldr.w	r3, [r8, #292]	; 0x124
 80009d0:	f8d8 28f8 	ldr.w	r2, [r8, #2296]	; 0x8f8
 80009d4:	2100      	movs	r1, #0
 80009d6:	f508 7094 	add.w	r0, r8, #296	; 0x128
 80009da:	4798      	blx	r3
    if ((p[0]!='\r') || (p[1]!='\n'))
 80009dc:	f898 3128 	ldrb.w	r3, [r8, #296]	; 0x128
 80009e0:	2b0d      	cmp	r3, #13
 80009e2:	d1f0      	bne.n	80009c6 <AT_RequestReceiveData+0x26>
 80009e4:	f898 3129 	ldrb.w	r3, [r8, #297]	; 0x129
 80009e8:	2b0a      	cmp	r3, #10
 80009ea:	d1ec      	bne.n	80009c6 <AT_RequestReceiveData+0x26>
    len-=2;
 80009ec:	1e81      	subs	r1, r0, #2
    if (len >= AT_OK_STRING_LEN)
 80009ee:	2907      	cmp	r1, #7
 80009f0:	d9e9      	bls.n	80009c6 <AT_RequestReceiveData+0x26>
    p+=2;
 80009f2:	f508 7995 	add.w	r9, r8, #298	; 0x12a
     while(len && (p[len-1]==0x15)) len--;
 80009f6:	f208 1829 	addw	r8, r8, #297	; 0x129
 80009fa:	b119      	cbz	r1, 8000a04 <AT_RequestReceiveData+0x64>
 80009fc:	f818 3001 	ldrb.w	r3, [r8, r1]
 8000a00:	2b15      	cmp	r3, #21
 8000a02:	d017      	beq.n	8000a34 <AT_RequestReceiveData+0x94>
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000a04:	f1a1 0408 	sub.w	r4, r1, #8
     p[len] = '\0';
 8000a08:	f04f 0800 	mov.w	r8, #0
 8000a0c:	f809 8001 	strb.w	r8, [r9, r1]
     if(strstr( (char*) p + len - AT_OK_STRING_LEN, AT_OK_STRING))
 8000a10:	eb09 0004 	add.w	r0, r9, r4
 8000a14:	490a      	ldr	r1, [pc, #40]	; (8000a40 <AT_RequestReceiveData+0xa0>)
 8000a16:	f003 f932 	bl	8003c7e <strstr>
 8000a1a:	b168      	cbz	r0, 8000a38 <AT_RequestReceiveData+0x98>
	   if (*ReadData > Reqlen)
 8000a1c:	b2a4      	uxth	r4, r4
 8000a1e:	42bc      	cmp	r4, r7
 8000a20:	4622      	mov	r2, r4
 8000a22:	bf28      	it	cs
 8000a24:	463a      	movcs	r2, r7
 8000a26:	8032      	strh	r2, [r6, #0]
       memcpy(pdata, p, *ReadData);
 8000a28:	4649      	mov	r1, r9
 8000a2a:	4628      	mov	r0, r5
 8000a2c:	f003 f848 	bl	8003ac0 <memcpy>
       return ES_WIFI_STATUS_OK;
 8000a30:	4640      	mov	r0, r8
 8000a32:	e7c9      	b.n	80009c8 <AT_RequestReceiveData+0x28>
     while(len && (p[len-1]==0x15)) len--;
 8000a34:	3901      	subs	r1, #1
 8000a36:	e7e0      	b.n	80009fa <AT_RequestReceiveData+0x5a>
       *ReadData = 0;
 8000a38:	8030      	strh	r0, [r6, #0]
       return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000a3a:	2005      	movs	r0, #5
 8000a3c:	e7c4      	b.n	80009c8 <AT_RequestReceiveData+0x28>
 8000a3e:	bf00      	nop
 8000a40:	08005459 	.word	0x08005459

08000a44 <AT_RequestSendData>:
{
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	4605      	mov	r5, r0
  cmd_len = strlen((char*)cmd);
 8000a4a:	4608      	mov	r0, r1
{
 8000a4c:	4688      	mov	r8, r1
 8000a4e:	4691      	mov	r9, r2
 8000a50:	461f      	mov	r7, r3
  cmd_len = strlen((char*)cmd);
 8000a52:	f7ff fbbd 	bl	80001d0 <strlen>
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000a56:	f010 0401 	ands.w	r4, r0, #1
{
 8000a5a:	9e08      	ldr	r6, [sp, #32]
  cmd_len = strlen((char*)cmd);
 8000a5c:	fa1f fa80 	uxth.w	sl, r0
  if (cmd_len & 1) return ES_WIFI_STATUS_ERROR;
 8000a60:	d126      	bne.n	8000ab0 <AT_RequestSendData+0x6c>
  n=Obj->fops.IO_Send(cmd, cmd_len, Obj->Timeout);
 8000a62:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8000a66:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000a6a:	4651      	mov	r1, sl
 8000a6c:	4640      	mov	r0, r8
 8000a6e:	4798      	blx	r3
  if (n == cmd_len)
 8000a70:	b280      	uxth	r0, r0
 8000a72:	4582      	cmp	sl, r0
 8000a74:	d123      	bne.n	8000abe <AT_RequestSendData+0x7a>
    send_len = Obj->fops.IO_Send(pcmd_data, len, Obj->Timeout);
 8000a76:	f8d5 3120 	ldr.w	r3, [r5, #288]	; 0x120
 8000a7a:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000a7e:	4639      	mov	r1, r7
 8000a80:	4648      	mov	r0, r9
 8000a82:	4798      	blx	r3
    if (send_len == len)
 8000a84:	42b8      	cmp	r0, r7
 8000a86:	d113      	bne.n	8000ab0 <AT_RequestSendData+0x6c>
      recv_len = Obj->fops.IO_Receive(pdata, 0, Obj->Timeout);
 8000a88:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
 8000a8c:	f8d5 28f8 	ldr.w	r2, [r5, #2296]	; 0x8f8
 8000a90:	4621      	mov	r1, r4
 8000a92:	4630      	mov	r0, r6
 8000a94:	4798      	blx	r3
      if (recv_len > 0)
 8000a96:	2800      	cmp	r0, #0
 8000a98:	dd0d      	ble.n	8000ab6 <AT_RequestSendData+0x72>
        *(pdata+recv_len) = 0;
 8000a9a:	5434      	strb	r4, [r6, r0]
        if(strstr((char *)pdata, AT_OK_STRING))
 8000a9c:	490b      	ldr	r1, [pc, #44]	; (8000acc <AT_RequestSendData+0x88>)
 8000a9e:	4630      	mov	r0, r6
 8000aa0:	f003 f8ed 	bl	8003c7e <strstr>
 8000aa4:	b968      	cbnz	r0, 8000ac2 <AT_RequestSendData+0x7e>
        else if(strstr((char *)pdata, AT_ERROR_STRING))
 8000aa6:	490a      	ldr	r1, [pc, #40]	; (8000ad0 <AT_RequestSendData+0x8c>)
 8000aa8:	4630      	mov	r0, r6
 8000aaa:	f003 f8e8 	bl	8003c7e <strstr>
 8000aae:	b950      	cbnz	r0, 8000ac6 <AT_RequestSendData+0x82>
          return ES_WIFI_STATUS_ERROR;
 8000ab0:	2002      	movs	r0, #2
}
 8000ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if (recv_len == ES_WIFI_ERROR_STUFFING_FOREVER )
 8000ab6:	3004      	adds	r0, #4
 8000ab8:	d1fa      	bne.n	8000ab0 <AT_RequestSendData+0x6c>
        return ES_WIFI_STATUS_MODULE_CRASH;
 8000aba:	2006      	movs	r0, #6
 8000abc:	e7f9      	b.n	8000ab2 <AT_RequestSendData+0x6e>
  return ES_WIFI_STATUS_IO_ERROR;
 8000abe:	2004      	movs	r0, #4
 8000ac0:	e7f7      	b.n	8000ab2 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_OK;
 8000ac2:	4620      	mov	r0, r4
 8000ac4:	e7f5      	b.n	8000ab2 <AT_RequestSendData+0x6e>
          return ES_WIFI_STATUS_UNEXPECTED_CLOSED_SOCKET;
 8000ac6:	2005      	movs	r0, #5
 8000ac8:	e7f3      	b.n	8000ab2 <AT_RequestSendData+0x6e>
 8000aca:	bf00      	nop
 8000acc:	08005459 	.word	0x08005459
 8000ad0:	08005462 	.word	0x08005462

08000ad4 <ES_WIFI_Init>:
  * @brief  Initialize WIFI module.
  * @param  Obj: pointer to module handle
  * @retval Operation Status.
  */
ES_WIFI_Status_t  ES_WIFI_Init(ES_WIFIObject_t *Obj)
{
 8000ad4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;

  LOCK_WIFI();

  Obj->Timeout = ES_WIFI_TIMEOUT;
 8000ad8:	f247 5330 	movw	r3, #30000	; 0x7530
 8000adc:	f8c0 38f8 	str.w	r3, [r0, #2296]	; 0x8f8
{
 8000ae0:	4604      	mov	r4, r0

  if (Obj->fops.IO_Init(ES_WIFI_INIT) == 0)
 8000ae2:	f8d0 3114 	ldr.w	r3, [r0, #276]	; 0x114
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	4798      	blx	r3
 8000aea:	2800      	cmp	r0, #0
 8000aec:	d14b      	bne.n	8000b86 <ES_WIFI_Init+0xb2>
  {
    ret = AT_ExecuteCommand(Obj,(uint8_t*)"I?\r\n", Obj->CmdData);
 8000aee:	4927      	ldr	r1, [pc, #156]	; (8000b8c <ES_WIFI_Init+0xb8>)
 8000af0:	f504 7294 	add.w	r2, r4, #296	; 0x128
 8000af4:	4620      	mov	r0, r4
 8000af6:	f7ff ff17 	bl	8000928 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8000afa:	4605      	mov	r5, r0
 8000afc:	b960      	cbnz	r0, 8000b18 <ES_WIFI_Init+0x44>
  ptr = strtok((char *)pdata + 2, ",");
 8000afe:	4924      	ldr	r1, [pc, #144]	; (8000b90 <ES_WIFI_Init+0xbc>)
      ptr = strtok(ptr, "\r");
 8000b00:	4f24      	ldr	r7, [pc, #144]	; (8000b94 <ES_WIFI_Init+0xc0>)
    ptr = strtok(NULL, ",");
 8000b02:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8000b90 <ES_WIFI_Init+0xbc>
  ptr = strtok((char *)pdata + 2, ",");
 8000b06:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000b0a:	f003 f8cf 	bl	8003cac <strtok>
  while (ptr != NULL){
 8000b0e:	462e      	mov	r6, r5
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000b10:	f104 0868 	add.w	r8, r4, #104	; 0x68
 8000b14:	b2f3      	uxtb	r3, r6
  while (ptr != NULL){
 8000b16:	b910      	cbnz	r0, 8000b1e <ES_WIFI_Init+0x4a>
      AT_ParseInfo (Obj, Obj->CmdData);
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8000b18:	4628      	mov	r0, r5
 8000b1a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8000b1e:	2b06      	cmp	r3, #6
 8000b20:	d824      	bhi.n	8000b6c <ES_WIFI_Init+0x98>
 8000b22:	e8df f003 	tbb	[pc, r3]
 8000b26:	0a04      	.short	0x0a04
 8000b28:	1e19140f 	.word	0x1e19140f
 8000b2c:	29          	.byte	0x29
 8000b2d:	00          	.byte	0x00
      strncpy((char *)Obj->Product_ID,  ptr, ES_WIFI_PRODUCT_ID_SIZE);
 8000b2e:	4601      	mov	r1, r0
 8000b30:	2220      	movs	r2, #32
 8000b32:	4620      	mov	r0, r4
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000b34:	f003 f890 	bl	8003c58 <strncpy>
      break;
 8000b38:	e018      	b.n	8000b6c <ES_WIFI_Init+0x98>
      strncpy((char *)Obj->FW_Rev,  ptr, ES_WIFI_FW_REV_SIZE );
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	2218      	movs	r2, #24
 8000b3e:	f104 0020 	add.w	r0, r4, #32
 8000b42:	e7f7      	b.n	8000b34 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->API_Rev,  ptr, ES_WIFI_API_REV_SIZE);
 8000b44:	4601      	mov	r1, r0
 8000b46:	2210      	movs	r2, #16
 8000b48:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8000b4c:	e7f2      	b.n	8000b34 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->Stack_Rev,  ptr, ES_WIFI_STACK_REV_SIZE);
 8000b4e:	4601      	mov	r1, r0
 8000b50:	2210      	movs	r2, #16
 8000b52:	f104 0048 	add.w	r0, r4, #72	; 0x48
 8000b56:	e7ed      	b.n	8000b34 <ES_WIFI_Init+0x60>
      strncpy((char *)Obj->RTOS_Rev,  ptr, ES_WIFI_RTOS_REV_SIZE);
 8000b58:	4601      	mov	r1, r0
 8000b5a:	2210      	movs	r2, #16
 8000b5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000b60:	e7e8      	b.n	8000b34 <ES_WIFI_Init+0x60>
      Obj->CPU_Clock = ParseNumber(ptr, NULL);
 8000b62:	2100      	movs	r1, #0
 8000b64:	f7ff fe77 	bl	8000856 <ParseNumber>
 8000b68:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
    ptr = strtok(NULL, ",");
 8000b6c:	4649      	mov	r1, r9
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f003 f89c 	bl	8003cac <strtok>
 8000b74:	3601      	adds	r6, #1
 8000b76:	e7cd      	b.n	8000b14 <ES_WIFI_Init+0x40>
      ptr = strtok(ptr, "\r");
 8000b78:	4639      	mov	r1, r7
 8000b7a:	f003 f897 	bl	8003cac <strtok>
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000b7e:	2220      	movs	r2, #32
      ptr = strtok(ptr, "\r");
 8000b80:	4601      	mov	r1, r0
      strncpy((char *)Obj->Product_Name,  ptr, ES_WIFI_PRODUCT_NAME_SIZE);
 8000b82:	4640      	mov	r0, r8
 8000b84:	e7d6      	b.n	8000b34 <ES_WIFI_Init+0x60>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8000b86:	2502      	movs	r5, #2
 8000b88:	e7c6      	b.n	8000b18 <ES_WIFI_Init+0x44>
 8000b8a:	bf00      	nop
 8000b8c:	0800548a 	.word	0x0800548a
 8000b90:	08005694 	.word	0x08005694
 8000b94:	08005555 	.word	0x08005555

08000b98 <ES_WIFI_RegisterBusIO>:
ES_WIFI_Status_t  ES_WIFI_RegisterBusIO(ES_WIFIObject_t *Obj, IO_Init_Func IO_Init,
                                                              IO_DeInit_Func  IO_DeInit,
                                                              IO_Delay_Func   IO_Delay,
                                                              IO_Send_Func    IO_Send,
                                                              IO_Receive_Func  IO_Receive)
{
 8000b98:	b530      	push	{r4, r5, lr}
 8000b9a:	e9dd 5403 	ldrd	r5, r4, [sp, #12]
  if(!Obj || !IO_Init || !IO_DeInit || !IO_Send || !IO_Receive)
 8000b9e:	b158      	cbz	r0, 8000bb8 <ES_WIFI_RegisterBusIO+0x20>
 8000ba0:	b151      	cbz	r1, 8000bb8 <ES_WIFI_RegisterBusIO+0x20>
 8000ba2:	b14a      	cbz	r2, 8000bb8 <ES_WIFI_RegisterBusIO+0x20>
 8000ba4:	b145      	cbz	r5, 8000bb8 <ES_WIFI_RegisterBusIO+0x20>
 8000ba6:	b13c      	cbz	r4, 8000bb8 <ES_WIFI_RegisterBusIO+0x20>
  {
    return ES_WIFI_STATUS_ERROR;
  }

  Obj->fops.IO_Init = IO_Init;
  Obj->fops.IO_DeInit = IO_DeInit;
 8000ba8:	e9c0 1245 	strd	r1, r2, [r0, #276]	; 0x114
  Obj->fops.IO_Send = IO_Send;
  Obj->fops.IO_Receive = IO_Receive;
 8000bac:	e9c0 5448 	strd	r5, r4, [r0, #288]	; 0x120
  Obj->fops.IO_Delay = IO_Delay;
 8000bb0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c

  return ES_WIFI_STATUS_OK;
 8000bb4:	2000      	movs	r0, #0
}
 8000bb6:	bd30      	pop	{r4, r5, pc}
    return ES_WIFI_STATUS_ERROR;
 8000bb8:	2002      	movs	r0, #2
 8000bba:	e7fc      	b.n	8000bb6 <ES_WIFI_RegisterBusIO+0x1e>

08000bbc <ES_WIFI_Connect>:
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_Connect(ES_WIFIObject_t *Obj, const char* SSID,
                                         const char* Password,
                                         ES_WIFI_SecurityType_t SecType)
{
 8000bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000bbe:	f500 7494 	add.w	r4, r0, #296	; 0x128
{
 8000bc2:	4605      	mov	r5, r0
 8000bc4:	4617      	mov	r7, r2
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000bc6:	4620      	mov	r0, r4
 8000bc8:	460a      	mov	r2, r1
 8000bca:	4918      	ldr	r1, [pc, #96]	; (8000c2c <ES_WIFI_Connect+0x70>)
{
 8000bcc:	461e      	mov	r6, r3
  sprintf((char*)Obj->CmdData,"C1=%s\r", SSID);
 8000bce:	f003 f81b 	bl	8003c08 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000bd2:	4622      	mov	r2, r4
 8000bd4:	4621      	mov	r1, r4
 8000bd6:	4628      	mov	r0, r5
 8000bd8:	f7ff fea6 	bl	8000928 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000bdc:	bb20      	cbnz	r0, 8000c28 <ES_WIFI_Connect+0x6c>
  {
    sprintf((char*)Obj->CmdData,"C2=%s\r", Password);
 8000bde:	4914      	ldr	r1, [pc, #80]	; (8000c30 <ES_WIFI_Connect+0x74>)
 8000be0:	463a      	mov	r2, r7
 8000be2:	4620      	mov	r0, r4
 8000be4:	f003 f810 	bl	8003c08 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000be8:	4622      	mov	r2, r4
 8000bea:	4621      	mov	r1, r4
 8000bec:	4628      	mov	r0, r5
 8000bee:	f7ff fe9b 	bl	8000928 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8000bf2:	b9c8      	cbnz	r0, 8000c28 <ES_WIFI_Connect+0x6c>
    {
      Obj->Security = SecType;
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000bf4:	490f      	ldr	r1, [pc, #60]	; (8000c34 <ES_WIFI_Connect+0x78>)
      Obj->Security = SecType;
 8000bf6:	f885 608c 	strb.w	r6, [r5, #140]	; 0x8c
      sprintf((char*)Obj->CmdData,"C3=%d\r", (uint8_t)SecType);
 8000bfa:	4632      	mov	r2, r6
 8000bfc:	4620      	mov	r0, r4
 8000bfe:	f003 f803 	bl	8003c08 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c02:	4622      	mov	r2, r4
 8000c04:	4621      	mov	r1, r4
 8000c06:	4628      	mov	r0, r5
 8000c08:	f7ff fe8e 	bl	8000928 <AT_ExecuteCommand>

      if(ret == ES_WIFI_STATUS_OK)
 8000c0c:	b960      	cbnz	r0, 8000c28 <ES_WIFI_Connect+0x6c>
      {
        sprintf((char*)Obj->CmdData,"C0\r");
 8000c0e:	490a      	ldr	r1, [pc, #40]	; (8000c38 <ES_WIFI_Connect+0x7c>)
 8000c10:	4620      	mov	r0, r4
 8000c12:	f003 f819 	bl	8003c48 <strcpy>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c16:	4622      	mov	r2, r4
 8000c18:	4621      	mov	r1, r4
 8000c1a:	4628      	mov	r0, r5
 8000c1c:	f7ff fe84 	bl	8000928 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8000c20:	b910      	cbnz	r0, 8000c28 <ES_WIFI_Connect+0x6c>
        {
           Obj->NetSettings.IsConnected = 1;
 8000c22:	2301      	movs	r3, #1
 8000c24:	f885 30d2 	strb.w	r3, [r5, #210]	; 0xd2
      }
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8000c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	0800549d 	.word	0x0800549d
 8000c30:	080054a4 	.word	0x080054a4
 8000c34:	080054ab 	.word	0x080054ab
 8000c38:	080054b2 	.word	0x080054b2

08000c3c <ES_WIFI_IsConnected>:
uint8_t ES_WIFI_IsConnected(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret ;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"CS\r");
 8000c3c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000c40:	b510      	push	{r4, lr}
  sprintf((char*)Obj->CmdData,"CS\r");
 8000c42:	490b      	ldr	r1, [pc, #44]	; (8000c70 <ES_WIFI_IsConnected+0x34>)
{
 8000c44:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"CS\r");
 8000c46:	4610      	mov	r0, r2
 8000c48:	f002 fffe 	bl	8003c48 <strcpy>
 8000c4c:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c4e:	4601      	mov	r1, r0
 8000c50:	4620      	mov	r0, r4
 8000c52:	f7ff fe69 	bl	8000928 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000c56:	b938      	cbnz	r0, 8000c68 <ES_WIFI_IsConnected+0x2c>
  *isConnected = (pdata[2] == '1') ? 1 : 0;
 8000c58:	f894 312a 	ldrb.w	r3, [r4, #298]	; 0x12a
 8000c5c:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 8000c60:	4253      	negs	r3, r2
 8000c62:	4153      	adcs	r3, r2
 8000c64:	f884 30d2 	strb.w	r3, [r4, #210]	; 0xd2
  {
    AT_ParseIsConnected((char *)Obj->CmdData, &(Obj->NetSettings.IsConnected));
  }
  UNLOCK_WIFI();
  return Obj->NetSettings.IsConnected;
}
 8000c68:	f894 00d2 	ldrb.w	r0, [r4, #210]	; 0xd2
 8000c6c:	bd10      	pop	{r4, pc}
 8000c6e:	bf00      	nop
 8000c70:	080054b6 	.word	0x080054b6

08000c74 <ES_WIFI_GetNetworkSettings>:
ES_WIFI_Status_t ES_WIFI_GetNetworkSettings(ES_WIFIObject_t *Obj)
{
  ES_WIFI_Status_t ret;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"C?\r");
 8000c74:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000c78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  sprintf((char*)Obj->CmdData,"C?\r");
 8000c7c:	4935      	ldr	r1, [pc, #212]	; (8000d54 <ES_WIFI_GetNetworkSettings+0xe0>)
{
 8000c7e:	4604      	mov	r4, r0
  sprintf((char*)Obj->CmdData,"C?\r");
 8000c80:	4610      	mov	r0, r2
 8000c82:	f002 ffe1 	bl	8003c48 <strcpy>
 8000c86:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000c88:	4601      	mov	r1, r0
 8000c8a:	4620      	mov	r0, r4
 8000c8c:	f7ff fe4c 	bl	8000928 <AT_ExecuteCommand>

  if(ret == ES_WIFI_STATUS_OK)
 8000c90:	4606      	mov	r6, r0
 8000c92:	b960      	cbnz	r0, 8000cae <ES_WIFI_GetNetworkSettings+0x3a>
  ptr = strtok(pdata + 2, ",");
 8000c94:	4930      	ldr	r1, [pc, #192]	; (8000d58 <ES_WIFI_GetNetworkSettings+0xe4>)
    ptr = strtok(NULL, ",");
 8000c96:	f8df 90c0 	ldr.w	r9, [pc, #192]	; 8000d58 <ES_WIFI_GetNetworkSettings+0xe4>
  ptr = strtok(pdata + 2, ",");
 8000c9a:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000c9e:	f003 f805 	bl	8003cac <strtok>
  {
     AT_ParseConnSettings((char *)Obj->CmdData, &Obj->NetSettings);
 8000ca2:	f104 078d 	add.w	r7, r4, #141	; 0x8d
  uint8_t num = 0;
 8000ca6:	4635      	mov	r5, r6
      ParseIP(ptr, NetSettings->DNS2);
 8000ca8:	f104 08e5 	add.w	r8, r4, #229	; 0xe5
  while (ptr != NULL) {
 8000cac:	b910      	cbnz	r0, 8000cb4 <ES_WIFI_GetNetworkSettings+0x40>
  }

  UNLOCK_WIFI();
  return ret;
}
 8000cae:	4630      	mov	r0, r6
 8000cb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    switch (num++) {
 8000cb4:	2d0b      	cmp	r5, #11
 8000cb6:	d80c      	bhi.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x5e>
 8000cb8:	e8df f005 	tbb	[pc, r5]
 8000cbc:	241e1906 	.word	0x241e1906
 8000cc0:	3835302a 	.word	0x3835302a
 8000cc4:	46403e3b 	.word	0x46403e3b
      strncpy((char *)NetSettings->SSID,  ptr, ES_WIFI_MAX_SSID_NAME_SIZE + 1);
 8000cc8:	4601      	mov	r1, r0
 8000cca:	2221      	movs	r2, #33	; 0x21
 8000ccc:	4638      	mov	r0, r7
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8000cce:	f002 ffc3 	bl	8003c58 <strncpy>
    ptr = strtok(NULL, ",");
 8000cd2:	4649      	mov	r1, r9
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f002 ffe9 	bl	8003cac <strtok>
    if ((ptr != NULL) && (ptr[-1] == ','))
 8000cda:	2800      	cmp	r0, #0
 8000cdc:	d0e7      	beq.n	8000cae <ES_WIFI_GetNetworkSettings+0x3a>
 8000cde:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 8000ce2:	2b2c      	cmp	r3, #44	; 0x2c
    switch (num++) {
 8000ce4:	bf14      	ite	ne
 8000ce6:	3501      	addne	r5, #1
      num++;
 8000ce8:	3502      	addeq	r5, #2
 8000cea:	b2ed      	uxtb	r5, r5
 8000cec:	e7de      	b.n	8000cac <ES_WIFI_GetNetworkSettings+0x38>
      strncpy((char *)NetSettings->pswd,  ptr, ES_WIFI_MAX_PSWD_NAME_SIZE + 1);
 8000cee:	4601      	mov	r1, r0
 8000cf0:	2221      	movs	r2, #33	; 0x21
 8000cf2:	f104 00ae 	add.w	r0, r4, #174	; 0xae
 8000cf6:	e7ea      	b.n	8000cce <ES_WIFI_GetNetworkSettings+0x5a>
        NetSettings->Security = (ES_WIFI_SecurityType_t)ParseNumber(ptr, NULL);
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	f7ff fdac 	bl	8000856 <ParseNumber>
 8000cfe:	f884 00cf 	strb.w	r0, [r4, #207]	; 0xcf
        break;
 8000d02:	e7e6      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->DHCP_IsEnabled = ParseNumber(ptr, NULL);
 8000d04:	2100      	movs	r1, #0
 8000d06:	f7ff fda6 	bl	8000856 <ParseNumber>
 8000d0a:	f884 00d0 	strb.w	r0, [r4, #208]	; 0xd0
      break;
 8000d0e:	e7e0      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->IP_Ver = (ES_WIFI_IPVer_t)ParseNumber(ptr, NULL);
 8000d10:	2100      	movs	r1, #0
 8000d12:	f7ff fda0 	bl	8000856 <ParseNumber>
 8000d16:	f884 00d4 	strb.w	r0, [r4, #212]	; 0xd4
      break;
 8000d1a:	e7da      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Addr);
 8000d1c:	f104 01d5 	add.w	r1, r4, #213	; 0xd5
      ParseIP(ptr, NetSettings->IP_Mask);
 8000d20:	f7ff fde8 	bl	80008f4 <ParseIP>
      break;
 8000d24:	e7d5      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x5e>
      ParseIP(ptr, NetSettings->IP_Mask);
 8000d26:	f104 01d9 	add.w	r1, r4, #217	; 0xd9
 8000d2a:	e7f9      	b.n	8000d20 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->Gateway_Addr);
 8000d2c:	f104 01dd 	add.w	r1, r4, #221	; 0xdd
 8000d30:	e7f6      	b.n	8000d20 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS1);
 8000d32:	f104 01e1 	add.w	r1, r4, #225	; 0xe1
 8000d36:	e7f3      	b.n	8000d20 <ES_WIFI_GetNetworkSettings+0xac>
      ParseIP(ptr, NetSettings->DNS2);
 8000d38:	4641      	mov	r1, r8
 8000d3a:	e7f1      	b.n	8000d20 <ES_WIFI_GetNetworkSettings+0xac>
      NetSettings->JoinRetries = ParseNumber(ptr, NULL);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	f7ff fd8a 	bl	8000856 <ParseNumber>
 8000d42:	f884 00d1 	strb.w	r0, [r4, #209]	; 0xd1
      break;
 8000d46:	e7c4      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x5e>
      NetSettings->AutoConnect = ParseNumber(ptr, NULL);
 8000d48:	2100      	movs	r1, #0
 8000d4a:	f7ff fd84 	bl	8000856 <ParseNumber>
 8000d4e:	f884 00d3 	strb.w	r0, [r4, #211]	; 0xd3
      break;
 8000d52:	e7be      	b.n	8000cd2 <ES_WIFI_GetNetworkSettings+0x5e>
 8000d54:	080054be 	.word	0x080054be
 8000d58:	08005694 	.word	0x08005694

08000d5c <ES_WIFI_GetMACAddress>:
{
  ES_WIFI_Status_t ret ;
  char *ptr;
  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"Z5\r");
 8000d5c:	f500 7294 	add.w	r2, r0, #296	; 0x128
{
 8000d60:	b570      	push	{r4, r5, r6, lr}
 8000d62:	4604      	mov	r4, r0
 8000d64:	460e      	mov	r6, r1
  sprintf((char*)Obj->CmdData,"Z5\r");
 8000d66:	4610      	mov	r0, r2
 8000d68:	4909      	ldr	r1, [pc, #36]	; (8000d90 <ES_WIFI_GetMACAddress+0x34>)
 8000d6a:	f002 ff6d 	bl	8003c48 <strcpy>
 8000d6e:	4602      	mov	r2, r0
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000d70:	4601      	mov	r1, r0
 8000d72:	4620      	mov	r0, r4
 8000d74:	f7ff fdd8 	bl	8000928 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000d78:	4605      	mov	r5, r0
 8000d7a:	b938      	cbnz	r0, 8000d8c <ES_WIFI_GetMACAddress+0x30>
  {
    ptr = strtok((char *)(Obj->CmdData + 2), "\r\n");
 8000d7c:	4905      	ldr	r1, [pc, #20]	; (8000d94 <ES_WIFI_GetMACAddress+0x38>)
 8000d7e:	f504 7095 	add.w	r0, r4, #298	; 0x12a
 8000d82:	f002 ff93 	bl	8003cac <strtok>
    ParseMAC(ptr, mac) ;
 8000d86:	4631      	mov	r1, r6
 8000d88:	f7ff fd81 	bl	800088e <ParseMAC>
  }
  UNLOCK_WIFI();
  return ret;
}
 8000d8c:	4628      	mov	r0, r5
 8000d8e:	bd70      	pop	{r4, r5, r6, pc}
 8000d90:	080054ff 	.word	0x080054ff
 8000d94:	08005753 	.word	0x08005753

08000d98 <ES_WIFI_StartClientConnection>:
  * @param  Obj: pointer to module handle
  * @param  conn: pointer to the connection structure
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_StartClientConnection(ES_WIFIObject_t *Obj, ES_WIFI_Conn_t *conn)
{
 8000d98:	b573      	push	{r0, r1, r4, r5, r6, lr}
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_OK;

  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000d9a:	780b      	ldrb	r3, [r1, #0]
{
 8000d9c:	4605      	mov	r5, r0
 8000d9e:	460e      	mov	r6, r1
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000da0:	b10b      	cbz	r3, 8000da6 <ES_WIFI_StartClientConnection+0xe>
 8000da2:	2b03      	cmp	r3, #3
 8000da4:	d102      	bne.n	8000dac <ES_WIFI_StartClientConnection+0x14>
 8000da6:	8873      	ldrh	r3, [r6, #2]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d064      	beq.n	8000e76 <ES_WIFI_StartClientConnection+0xde>

  LOCK_WIFI();

  sprintf((char*)Obj->CmdData,"P0=%d\r", conn->Number);
 8000dac:	f505 7494 	add.w	r4, r5, #296	; 0x128
 8000db0:	7872      	ldrb	r2, [r6, #1]
 8000db2:	4932      	ldr	r1, [pc, #200]	; (8000e7c <ES_WIFI_StartClientConnection+0xe4>)
 8000db4:	4620      	mov	r0, r4
 8000db6:	f002 ff27 	bl	8003c08 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dba:	4622      	mov	r2, r4
 8000dbc:	4621      	mov	r1, r4
 8000dbe:	4628      	mov	r0, r5
 8000dc0:	f7ff fdb2 	bl	8000928 <AT_ExecuteCommand>

  if (ret == ES_WIFI_STATUS_OK)
 8000dc4:	2800      	cmp	r0, #0
 8000dc6:	d146      	bne.n	8000e56 <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P1=%d\r", conn->Type);
 8000dc8:	7832      	ldrb	r2, [r6, #0]
 8000dca:	492d      	ldr	r1, [pc, #180]	; (8000e80 <ES_WIFI_StartClientConnection+0xe8>)
 8000dcc:	4620      	mov	r0, r4
 8000dce:	f002 ff1b 	bl	8003c08 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dd2:	4622      	mov	r2, r4
 8000dd4:	4621      	mov	r1, r4
 8000dd6:	4628      	mov	r0, r5
 8000dd8:	f7ff fda6 	bl	8000928 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8000ddc:	2800      	cmp	r0, #0
 8000dde:	d13a      	bne.n	8000e56 <ES_WIFI_StartClientConnection+0xbe>
  {
    sprintf((char*)Obj->CmdData,"P2=%d\r", conn->LocalPort);
 8000de0:	88b2      	ldrh	r2, [r6, #4]
 8000de2:	4928      	ldr	r1, [pc, #160]	; (8000e84 <ES_WIFI_StartClientConnection+0xec>)
 8000de4:	4620      	mov	r0, r4
 8000de6:	f002 ff0f 	bl	8003c08 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000dea:	4622      	mov	r2, r4
 8000dec:	4621      	mov	r1, r4
 8000dee:	4628      	mov	r0, r5
 8000df0:	f7ff fd9a 	bl	8000928 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK)&& ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000df4:	bb78      	cbnz	r0, 8000e56 <ES_WIFI_StartClientConnection+0xbe>
 8000df6:	7833      	ldrb	r3, [r6, #0]
 8000df8:	b30b      	cbz	r3, 8000e3e <ES_WIFI_StartClientConnection+0xa6>
 8000dfa:	2b03      	cmp	r3, #3
 8000dfc:	d01f      	beq.n	8000e3e <ES_WIFI_StartClientConnection+0xa6>
  {
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000dfe:	7833      	ldrb	r3, [r6, #0]
 8000e00:	bb5b      	cbnz	r3, 8000e5a <ES_WIFI_StartClientConnection+0xc2>
  {
    sprintf((char*)Obj->CmdData,"P3=%d.%d.%d.%d\r", conn->RemoteIP[0],conn->RemoteIP[1],
 8000e02:	7a73      	ldrb	r3, [r6, #9]
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	7a33      	ldrb	r3, [r6, #8]
 8000e08:	79b2      	ldrb	r2, [r6, #6]
 8000e0a:	491f      	ldr	r1, [pc, #124]	; (8000e88 <ES_WIFI_StartClientConnection+0xf0>)
 8000e0c:	9300      	str	r3, [sp, #0]
 8000e0e:	4620      	mov	r0, r4
 8000e10:	79f3      	ldrb	r3, [r6, #7]
 8000e12:	f002 fef9 	bl	8003c08 <siprintf>
            conn->RemoteIP[2],conn->RemoteIP[3]);
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e16:	4622      	mov	r2, r4
 8000e18:	4621      	mov	r1, r4
 8000e1a:	4628      	mov	r0, r5
 8000e1c:	f7ff fd84 	bl	8000928 <AT_ExecuteCommand>
  }

  if ((ret == ES_WIFI_STATUS_OK) && (conn->Type == ES_WIFI_TCP_SSL_CONNECTION))
 8000e20:	b9c8      	cbnz	r0, 8000e56 <ES_WIFI_StartClientConnection+0xbe>
 8000e22:	7833      	ldrb	r3, [r6, #0]
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d11a      	bne.n	8000e5e <ES_WIFI_StartClientConnection+0xc6>
  {
    sprintf((char*)Obj->CmdData,"P9=2\r");
 8000e28:	4918      	ldr	r1, [pc, #96]	; (8000e8c <ES_WIFI_StartClientConnection+0xf4>)
 8000e2a:	4620      	mov	r0, r4
 8000e2c:	f002 ff0c 	bl	8003c48 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e30:	4622      	mov	r2, r4
 8000e32:	4621      	mov	r1, r4
 8000e34:	4628      	mov	r0, r5
 8000e36:	f7ff fd77 	bl	8000928 <AT_ExecuteCommand>
  }

  if (ret == ES_WIFI_STATUS_OK)
 8000e3a:	b180      	cbz	r0, 8000e5e <ES_WIFI_StartClientConnection+0xc6>
 8000e3c:	e00b      	b.n	8000e56 <ES_WIFI_StartClientConnection+0xbe>
    sprintf((char*)Obj->CmdData,"P4=%d\r", conn->RemotePort);
 8000e3e:	8872      	ldrh	r2, [r6, #2]
 8000e40:	4913      	ldr	r1, [pc, #76]	; (8000e90 <ES_WIFI_StartClientConnection+0xf8>)
 8000e42:	4620      	mov	r0, r4
 8000e44:	f002 fee0 	bl	8003c08 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e48:	4622      	mov	r2, r4
 8000e4a:	4621      	mov	r1, r4
 8000e4c:	4628      	mov	r0, r5
 8000e4e:	f7ff fd6b 	bl	8000928 <AT_ExecuteCommand>
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000e52:	2800      	cmp	r0, #0
 8000e54:	d0d3      	beq.n	8000dfe <ES_WIFI_StartClientConnection+0x66>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
  }

  UNLOCK_WIFI();
  return ret;
}
 8000e56:	b002      	add	sp, #8
 8000e58:	bd70      	pop	{r4, r5, r6, pc}
  if ((ret == ES_WIFI_STATUS_OK) && ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)))
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d0d1      	beq.n	8000e02 <ES_WIFI_StartClientConnection+0x6a>
    sprintf((char*)Obj->CmdData,"P6=1\r");
 8000e5e:	490d      	ldr	r1, [pc, #52]	; (8000e94 <ES_WIFI_StartClientConnection+0xfc>)
 8000e60:	4620      	mov	r0, r4
 8000e62:	f002 fef1 	bl	8003c48 <strcpy>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e66:	4622      	mov	r2, r4
 8000e68:	4621      	mov	r1, r4
 8000e6a:	4628      	mov	r0, r5
}
 8000e6c:	b002      	add	sp, #8
 8000e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000e72:	f7ff bd59 	b.w	8000928 <AT_ExecuteCommand>
  if ( ((conn->Type == ES_WIFI_TCP_CONNECTION) || (conn->Type == ES_WIFI_TCP_SSL_CONNECTION)) && (conn->RemotePort == 0) ) return ES_WIFI_STATUS_ERROR;
 8000e76:	2002      	movs	r0, #2
 8000e78:	e7ed      	b.n	8000e56 <ES_WIFI_StartClientConnection+0xbe>
 8000e7a:	bf00      	nop
 8000e7c:	0800555e 	.word	0x0800555e
 8000e80:	08005565 	.word	0x08005565
 8000e84:	0800556c 	.word	0x0800556c
 8000e88:	08005580 	.word	0x08005580
 8000e8c:	08005590 	.word	0x08005590
 8000e90:	08005573 	.word	0x08005573
 8000e94:	0800557a 	.word	0x0800557a

08000e98 <ES_WIFI_SendData>:
  * @param  pdata: pointer to data
  * @param  len : length of the data to be sent
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_SendData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen , uint16_t *SentLen , uint32_t Timeout)
{
 8000e98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  {
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();
  if(Reqlen >= ES_WIFI_PAYLOAD_SIZE ) Reqlen= ES_WIFI_PAYLOAD_SIZE;
 8000e9c:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8000ea0:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 8000ea4:	bf28      	it	cs
 8000ea6:	f44f 6396 	movcs.w	r3, #1200	; 0x4b0

  *SentLen = Reqlen;
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000eaa:	f500 7594 	add.w	r5, r0, #296	; 0x128
{
 8000eae:	4606      	mov	r6, r0
  *SentLen = Reqlen;
 8000eb0:	f8a8 3000 	strh.w	r3, [r8]
{
 8000eb4:	4691      	mov	r9, r2
  sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000eb6:	4628      	mov	r0, r5
 8000eb8:	460a      	mov	r2, r1
 8000eba:	492e      	ldr	r1, [pc, #184]	; (8000f74 <ES_WIFI_SendData+0xdc>)
 8000ebc:	461f      	mov	r7, r3
 8000ebe:	f002 fea3 	bl	8003c08 <siprintf>
  ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000ec2:	462a      	mov	r2, r5
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f7ff fd2e 	bl	8000928 <AT_ExecuteCommand>
  if(ret == ES_WIFI_STATUS_OK)
 8000ecc:	4604      	mov	r4, r0
 8000ece:	2800      	cmp	r0, #0
 8000ed0:	d147      	bne.n	8000f62 <ES_WIFI_SendData+0xca>
  {
    sprintf((char*)Obj->CmdData,"S2=%lu\r",wkgTimeOut);
 8000ed2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000ed4:	4928      	ldr	r1, [pc, #160]	; (8000f78 <ES_WIFI_SendData+0xe0>)
 8000ed6:	2a01      	cmp	r2, #1
 8000ed8:	bf38      	it	cc
 8000eda:	2201      	movcc	r2, #1
 8000edc:	4628      	mov	r0, r5
 8000ede:	f002 fe93 	bl	8003c08 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000ee2:	462a      	mov	r2, r5
 8000ee4:	4629      	mov	r1, r5
 8000ee6:	4630      	mov	r0, r6
 8000ee8:	f7ff fd1e 	bl	8000928 <AT_ExecuteCommand>

    if(ret == ES_WIFI_STATUS_OK)
 8000eec:	4604      	mov	r4, r0
 8000eee:	bb80      	cbnz	r0, 8000f52 <ES_WIFI_SendData+0xba>
    {
      sprintf((char *)Obj->CmdData,"S3=%04d\r",Reqlen);
 8000ef0:	4922      	ldr	r1, [pc, #136]	; (8000f7c <ES_WIFI_SendData+0xe4>)
 8000ef2:	463a      	mov	r2, r7
 8000ef4:	4628      	mov	r0, r5
 8000ef6:	f002 fe87 	bl	8003c08 <siprintf>
      ret = AT_RequestSendData(Obj, Obj->CmdData, pdata, Reqlen, Obj->CmdData);
 8000efa:	9500      	str	r5, [sp, #0]
 8000efc:	463b      	mov	r3, r7
 8000efe:	464a      	mov	r2, r9
 8000f00:	4629      	mov	r1, r5
 8000f02:	4630      	mov	r0, r6
 8000f04:	f7ff fd9e 	bl	8000a44 <AT_RequestSendData>

      if(ret == ES_WIFI_STATUS_OK)
 8000f08:	4604      	mov	r4, r0
 8000f0a:	b998      	cbnz	r0, 8000f34 <ES_WIFI_SendData+0x9c>
      {
        if(strstr((char *)Obj->CmdData,"-1\r\n"))
 8000f0c:	491c      	ldr	r1, [pc, #112]	; (8000f80 <ES_WIFI_SendData+0xe8>)
 8000f0e:	4628      	mov	r0, r5
 8000f10:	f002 feb5 	bl	8003c7e <strstr>
 8000f14:	b1c8      	cbz	r0, 8000f4a <ES_WIFI_SendData+0xb2>
        {
          DEBUG("Send Data detect error %s\n", (char *)Obj->CmdData);
 8000f16:	491b      	ldr	r1, [pc, #108]	; (8000f84 <ES_WIFI_SendData+0xec>)
 8000f18:	481b      	ldr	r0, [pc, #108]	; (8000f88 <ES_WIFI_SendData+0xf0>)
 8000f1a:	f640 025b 	movw	r2, #2139	; 0x85b
 8000f1e:	f002 fde5 	bl	8003aec <iprintf>
 8000f22:	481a      	ldr	r0, [pc, #104]	; (8000f8c <ES_WIFI_SendData+0xf4>)
 8000f24:	4629      	mov	r1, r5
 8000f26:	f002 fde1 	bl	8003aec <iprintf>
   DEBUG("P0 command failed\n");
  }

  if (ret == ES_WIFI_STATUS_ERROR)
  {
    *SentLen = 0;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	f8a8 3000 	strh.w	r3, [r8]
 8000f30:	2402      	movs	r4, #2
 8000f32:	e00a      	b.n	8000f4a <ES_WIFI_SendData+0xb2>
        DEBUG("Send Data command failed\n");
 8000f34:	4913      	ldr	r1, [pc, #76]	; (8000f84 <ES_WIFI_SendData+0xec>)
 8000f36:	4814      	ldr	r0, [pc, #80]	; (8000f88 <ES_WIFI_SendData+0xf0>)
 8000f38:	f640 0261 	movw	r2, #2145	; 0x861
 8000f3c:	f002 fdd6 	bl	8003aec <iprintf>
 8000f40:	4813      	ldr	r0, [pc, #76]	; (8000f90 <ES_WIFI_SendData+0xf8>)
   DEBUG("P0 command failed\n");
 8000f42:	f002 fe59 	bl	8003bf8 <puts>
  if (ret == ES_WIFI_STATUS_ERROR)
 8000f46:	2c02      	cmp	r4, #2
 8000f48:	d0ef      	beq.n	8000f2a <ES_WIFI_SendData+0x92>
  }
  UNLOCK_WIFI();
  return ret;
}
 8000f4a:	4620      	mov	r0, r4
 8000f4c:	b003      	add	sp, #12
 8000f4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      DEBUG("S2 command failed\n");
 8000f52:	490c      	ldr	r1, [pc, #48]	; (8000f84 <ES_WIFI_SendData+0xec>)
 8000f54:	480c      	ldr	r0, [pc, #48]	; (8000f88 <ES_WIFI_SendData+0xf0>)
 8000f56:	f640 0266 	movw	r2, #2150	; 0x866
 8000f5a:	f002 fdc7 	bl	8003aec <iprintf>
 8000f5e:	480d      	ldr	r0, [pc, #52]	; (8000f94 <ES_WIFI_SendData+0xfc>)
 8000f60:	e7ef      	b.n	8000f42 <ES_WIFI_SendData+0xaa>
   DEBUG("P0 command failed\n");
 8000f62:	4908      	ldr	r1, [pc, #32]	; (8000f84 <ES_WIFI_SendData+0xec>)
 8000f64:	4808      	ldr	r0, [pc, #32]	; (8000f88 <ES_WIFI_SendData+0xf0>)
 8000f66:	f640 026b 	movw	r2, #2155	; 0x86b
 8000f6a:	f002 fdbf 	bl	8003aec <iprintf>
 8000f6e:	480a      	ldr	r0, [pc, #40]	; (8000f98 <ES_WIFI_SendData+0x100>)
 8000f70:	e7e7      	b.n	8000f42 <ES_WIFI_SendData+0xaa>
 8000f72:	bf00      	nop
 8000f74:	0800555e 	.word	0x0800555e
 8000f78:	08005740 	.word	0x08005740
 8000f7c:	08005748 	.word	0x08005748
 8000f80:	08005751 	.word	0x08005751
 8000f84:	080055d2 	.word	0x080055d2
 8000f88:	08005651 	.word	0x08005651
 8000f8c:	08005756 	.word	0x08005756
 8000f90:	08005771 	.word	0x08005771
 8000f94:	0800578a 	.word	0x0800578a
 8000f98:	0800579c 	.word	0x0800579c

08000f9c <ES_WIFI_ReceiveData>:
  * @param  pdata: pointer to data
  * @param  len : pointer to the length of the data to be received
  * @retval Operation Status.
  */
ES_WIFI_Status_t ES_WIFI_ReceiveData(ES_WIFIObject_t *Obj, uint8_t Socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *Receivedlen, uint32_t Timeout)
{
 8000f9c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
    wkgTimeOut = Timeout;
  }

  LOCK_WIFI();

  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8000fa0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
{
 8000fa4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 8000fa8:	4606      	mov	r6, r0
 8000faa:	4690      	mov	r8, r2
 8000fac:	461f      	mov	r7, r3
  if(Reqlen <= ES_WIFI_PAYLOAD_SIZE )
 8000fae:	d867      	bhi.n	8001080 <ES_WIFI_ReceiveData+0xe4>
  {
    sprintf((char*)Obj->CmdData,"P0=%d\r", Socket);
 8000fb0:	f500 7594 	add.w	r5, r0, #296	; 0x128
 8000fb4:	460a      	mov	r2, r1
 8000fb6:	4628      	mov	r0, r5
 8000fb8:	4932      	ldr	r1, [pc, #200]	; (8001084 <ES_WIFI_ReceiveData+0xe8>)
 8000fba:	f002 fe25 	bl	8003c08 <siprintf>
    ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fbe:	462a      	mov	r2, r5
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	4630      	mov	r0, r6
 8000fc4:	f7ff fcb0 	bl	8000928 <AT_ExecuteCommand>
 8000fc8:	4604      	mov	r4, r0
 8000fca:	4682      	mov	sl, r0

    if(ret == ES_WIFI_STATUS_OK)
 8000fcc:	2800      	cmp	r0, #0
 8000fce:	d149      	bne.n	8001064 <ES_WIFI_ReceiveData+0xc8>
    {
      sprintf((char*)Obj->CmdData,"R1=%d\r", Reqlen);
 8000fd0:	492d      	ldr	r1, [pc, #180]	; (8001088 <ES_WIFI_ReceiveData+0xec>)
 8000fd2:	463a      	mov	r2, r7
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	f002 fe17 	bl	8003c08 <siprintf>
      ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000fda:	462a      	mov	r2, r5
 8000fdc:	4629      	mov	r1, r5
 8000fde:	4630      	mov	r0, r6
 8000fe0:	f7ff fca2 	bl	8000928 <AT_ExecuteCommand>
      if(ret == ES_WIFI_STATUS_OK)
 8000fe4:	4604      	mov	r4, r0
 8000fe6:	bb88      	cbnz	r0, 800104c <ES_WIFI_ReceiveData+0xb0>
      {
        sprintf((char*)Obj->CmdData,"R2=%lu\r", wkgTimeOut);
 8000fe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000fea:	4928      	ldr	r1, [pc, #160]	; (800108c <ES_WIFI_ReceiveData+0xf0>)
 8000fec:	2a01      	cmp	r2, #1
 8000fee:	bf38      	it	cc
 8000ff0:	2201      	movcc	r2, #1
 8000ff2:	4628      	mov	r0, r5
 8000ff4:	f002 fe08 	bl	8003c08 <siprintf>
        ret = AT_ExecuteCommand(Obj, Obj->CmdData, Obj->CmdData);
 8000ff8:	462a      	mov	r2, r5
 8000ffa:	4629      	mov	r1, r5
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	f7ff fc93 	bl	8000928 <AT_ExecuteCommand>
        if(ret == ES_WIFI_STATUS_OK)
 8001002:	4604      	mov	r4, r0
 8001004:	b9d0      	cbnz	r0, 800103c <ES_WIFI_ReceiveData+0xa0>
        {
          sprintf((char*)Obj->CmdData,"R0\r");
 8001006:	4922      	ldr	r1, [pc, #136]	; (8001090 <ES_WIFI_ReceiveData+0xf4>)
 8001008:	4628      	mov	r0, r5
 800100a:	f002 fe1d 	bl	8003c48 <strcpy>
          ret = AT_RequestReceiveData(Obj, Obj->CmdData, (char *)pdata, Reqlen, Receivedlen);
 800100e:	f8cd 9000 	str.w	r9, [sp]
 8001012:	463b      	mov	r3, r7
 8001014:	4642      	mov	r2, r8
 8001016:	4629      	mov	r1, r5
 8001018:	4630      	mov	r0, r6
 800101a:	f7ff fcc1 	bl	80009a0 <AT_RequestReceiveData>
          if (ret != ES_WIFI_STATUS_OK)
 800101e:	4604      	mov	r4, r0
 8001020:	b140      	cbz	r0, 8001034 <ES_WIFI_ReceiveData+0x98>
          {
            DEBUG("AT_RequestReceiveData  failed\n");
 8001022:	491c      	ldr	r1, [pc, #112]	; (8001094 <ES_WIFI_ReceiveData+0xf8>)
 8001024:	481c      	ldr	r0, [pc, #112]	; (8001098 <ES_WIFI_ReceiveData+0xfc>)
 8001026:	f640 02fc 	movw	r2, #2300	; 0x8fc
 800102a:	f002 fd5f 	bl	8003aec <iprintf>
 800102e:	481b      	ldr	r0, [pc, #108]	; (800109c <ES_WIFI_ReceiveData+0x100>)
          }
        }
        else
        {
         DEBUG("setting timeout failed\n");
 8001030:	f002 fde2 	bl	8003bf8 <puts>
      issue15++;
    }
  }
  UNLOCK_WIFI();
  return ret;
}
 8001034:	4620      	mov	r0, r4
 8001036:	b002      	add	sp, #8
 8001038:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
         DEBUG("setting timeout failed\n");
 800103c:	4915      	ldr	r1, [pc, #84]	; (8001094 <ES_WIFI_ReceiveData+0xf8>)
 800103e:	4816      	ldr	r0, [pc, #88]	; (8001098 <ES_WIFI_ReceiveData+0xfc>)
 8001040:	f640 1201 	movw	r2, #2305	; 0x901
 8001044:	f002 fd52 	bl	8003aec <iprintf>
 8001048:	4815      	ldr	r0, [pc, #84]	; (80010a0 <ES_WIFI_ReceiveData+0x104>)
 800104a:	e7f1      	b.n	8001030 <ES_WIFI_ReceiveData+0x94>
        DEBUG("setting requested len failed\n");
 800104c:	4911      	ldr	r1, [pc, #68]	; (8001094 <ES_WIFI_ReceiveData+0xf8>)
 800104e:	4812      	ldr	r0, [pc, #72]	; (8001098 <ES_WIFI_ReceiveData+0xfc>)
 8001050:	f640 1206 	movw	r2, #2310	; 0x906
 8001054:	f002 fd4a 	bl	8003aec <iprintf>
 8001058:	4812      	ldr	r0, [pc, #72]	; (80010a4 <ES_WIFI_ReceiveData+0x108>)
 800105a:	f002 fdcd 	bl	8003bf8 <puts>
        *Receivedlen = 0;
 800105e:	f8a9 a000 	strh.w	sl, [r9]
 8001062:	e7e7      	b.n	8001034 <ES_WIFI_ReceiveData+0x98>
      DEBUG("setting socket for read failed\n");
 8001064:	f640 120c 	movw	r2, #2316	; 0x90c
 8001068:	490a      	ldr	r1, [pc, #40]	; (8001094 <ES_WIFI_ReceiveData+0xf8>)
 800106a:	480b      	ldr	r0, [pc, #44]	; (8001098 <ES_WIFI_ReceiveData+0xfc>)
 800106c:	f002 fd3e 	bl	8003aec <iprintf>
 8001070:	480d      	ldr	r0, [pc, #52]	; (80010a8 <ES_WIFI_ReceiveData+0x10c>)
 8001072:	f002 fdc1 	bl	8003bf8 <puts>
      issue15++;
 8001076:	4a0d      	ldr	r2, [pc, #52]	; (80010ac <ES_WIFI_ReceiveData+0x110>)
 8001078:	6813      	ldr	r3, [r2, #0]
 800107a:	3301      	adds	r3, #1
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e7d9      	b.n	8001034 <ES_WIFI_ReceiveData+0x98>
  ES_WIFI_Status_t ret = ES_WIFI_STATUS_ERROR;
 8001080:	2402      	movs	r4, #2
 8001082:	e7d7      	b.n	8001034 <ES_WIFI_ReceiveData+0x98>
 8001084:	0800555e 	.word	0x0800555e
 8001088:	080057be 	.word	0x080057be
 800108c:	080057c5 	.word	0x080057c5
 8001090:	080057cd 	.word	0x080057cd
 8001094:	080055d2 	.word	0x080055d2
 8001098:	08005651 	.word	0x08005651
 800109c:	080057d1 	.word	0x080057d1
 80010a0:	080057ef 	.word	0x080057ef
 80010a4:	08005806 	.word	0x08005806
 80010a8:	08005823 	.word	0x08005823
 80010ac:	20000298 	.word	0x20000298

080010b0 <SPI_WIFI_DelayUs>:
   * @brief  Delay
  * @param  Delay in us
  * @retval None
  */
void SPI_WIFI_DelayUs(uint32_t n)
{
 80010b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t        loop_per_us = 0;
  static uint32_t cycle_per_loop = 0;

  /* calibration happen on first call for a duration of 1 ms * nbcycle per loop */
  /* 10 cycle for STM32L4 */
  if (cycle_per_loop == 0 ) 
 80010b2:	4c17      	ldr	r4, [pc, #92]	; (8001110 <SPI_WIFI_DelayUs+0x60>)
 80010b4:	4f17      	ldr	r7, [pc, #92]	; (8001114 <SPI_WIFI_DelayUs+0x64>)
  volatile        uint32_t ct = 0;
 80010b6:	2300      	movs	r3, #0
 80010b8:	9301      	str	r3, [sp, #4]
  if (cycle_per_loop == 0 ) 
 80010ba:	6823      	ldr	r3, [r4, #0]
{
 80010bc:	4605      	mov	r5, r0
  if (cycle_per_loop == 0 ) 
 80010be:	b98b      	cbnz	r3, 80010e4 <SPI_WIFI_DelayUs+0x34>
  {
     uint32_t cycle_per_ms = (SystemCoreClock/1000UL);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010c6:	fbb3 f3f2 	udiv	r3, r3, r2
     uint32_t t = 0;
     ct = cycle_per_ms;
 80010ca:	9301      	str	r3, [sp, #4]
     t = HAL_GetTick();
 80010cc:	f000 fbdc 	bl	8001888 <HAL_GetTick>
 80010d0:	4606      	mov	r6, r0
     while(ct) ct--;
 80010d2:	9b01      	ldr	r3, [sp, #4]
 80010d4:	b99b      	cbnz	r3, 80010fe <SPI_WIFI_DelayUs+0x4e>
     cycle_per_loop = HAL_GetTick()-t;
 80010d6:	f000 fbd7 	bl	8001888 <HAL_GetTick>
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80010da:	1b80      	subs	r0, r0, r6
 80010dc:	bf0a      	itet	eq
 80010de:	2301      	moveq	r3, #1
     cycle_per_loop = HAL_GetTick()-t;
 80010e0:	6020      	strne	r0, [r4, #0]
     if (cycle_per_loop == 0) cycle_per_loop = 1;
 80010e2:	6023      	streq	r3, [r4, #0]
  }

  loop_per_us = SystemCoreClock/1000000UL/cycle_per_loop;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <SPI_WIFI_DelayUs+0x68>)
 80010e6:	6838      	ldr	r0, [r7, #0]
 80010e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ec:	6823      	ldr	r3, [r4, #0]
 80010ee:	fbb0 f0f3 	udiv	r0, r0, r3
  ct = n * loop_per_us;
 80010f2:	4368      	muls	r0, r5
 80010f4:	9001      	str	r0, [sp, #4]
  while(ct) ct--;
 80010f6:	9b01      	ldr	r3, [sp, #4]
 80010f8:	b92b      	cbnz	r3, 8001106 <SPI_WIFI_DelayUs+0x56>
  return;
}
 80010fa:	b003      	add	sp, #12
 80010fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
     while(ct) ct--;
 80010fe:	9b01      	ldr	r3, [sp, #4]
 8001100:	3b01      	subs	r3, #1
 8001102:	9301      	str	r3, [sp, #4]
 8001104:	e7e5      	b.n	80010d2 <SPI_WIFI_DelayUs+0x22>
  while(ct) ct--;
 8001106:	9b01      	ldr	r3, [sp, #4]
 8001108:	3b01      	subs	r3, #1
 800110a:	9301      	str	r3, [sp, #4]
 800110c:	e7f3      	b.n	80010f6 <SPI_WIFI_DelayUs+0x46>
 800110e:	bf00      	nop
 8001110:	2000029c 	.word	0x2000029c
 8001114:	20000018 	.word	0x20000018
 8001118:	000f4240 	.word	0x000f4240

0800111c <wait_spi_tx_event>:
{
 800111c:	b570      	push	{r4, r5, r6, lr}
 800111e:	4605      	mov	r5, r0
  int tickstart = HAL_GetTick();
 8001120:	f000 fbb2 	bl	8001888 <HAL_GetTick>
  while (spi_tx_event==1)
 8001124:	4e07      	ldr	r6, [pc, #28]	; (8001144 <wait_spi_tx_event+0x28>)
  int tickstart = HAL_GetTick();
 8001126:	4604      	mov	r4, r0
  while (spi_tx_event==1)
 8001128:	6873      	ldr	r3, [r6, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d001      	beq.n	8001132 <wait_spi_tx_event+0x16>
  return 0;
 800112e:	2000      	movs	r0, #0
}
 8001130:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > timeout)
 8001132:	f000 fba9 	bl	8001888 <HAL_GetTick>
 8001136:	1b00      	subs	r0, r0, r4
 8001138:	42a8      	cmp	r0, r5
 800113a:	d9f5      	bls.n	8001128 <wait_spi_tx_event+0xc>
      return -1;
 800113c:	f04f 30ff 	mov.w	r0, #4294967295
 8001140:	e7f6      	b.n	8001130 <wait_spi_tx_event+0x14>
 8001142:	bf00      	nop
 8001144:	2000029c 	.word	0x2000029c

08001148 <SPI_WIFI_MspInit>:
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001148:	4b3f      	ldr	r3, [pc, #252]	; (8001248 <SPI_WIFI_MspInit+0x100>)
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 800114a:	4840      	ldr	r0, [pc, #256]	; (800124c <SPI_WIFI_MspInit+0x104>)
  __HAL_RCC_SPI3_CLK_ENABLE();
 800114c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 800114e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_RCC_SPI3_CLK_ENABLE();
 8001150:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001154:	659a      	str	r2, [r3, #88]	; 0x58
 8001156:	6d9a      	ldr	r2, [r3, #88]	; 0x58
{
 8001158:	b08b      	sub	sp, #44	; 0x2c
  __HAL_RCC_SPI3_CLK_ENABLE();
 800115a:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 800115e:	9201      	str	r2, [sp, #4]
 8001160:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001162:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001164:	f042 0202 	orr.w	r2, r2, #2
 8001168:	64da      	str	r2, [r3, #76]	; 0x4c
 800116a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800116c:	f002 0202 	and.w	r2, r2, #2
 8001170:	9202      	str	r2, [sp, #8]
 8001172:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001174:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001176:	f042 0204 	orr.w	r2, r2, #4
 800117a:	64da      	str	r2, [r3, #76]	; 0x4c
 800117c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800117e:	f002 0204 	and.w	r2, r2, #4
 8001182:	9203      	str	r2, [sp, #12]
 8001184:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001186:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001188:	f042 0210 	orr.w	r2, r2, #16
 800118c:	64da      	str	r2, [r3, #76]	; 0x4c
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	f003 0310 	and.w	r3, r3, #16
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001194:	2200      	movs	r2, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001196:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 8001198:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 800119c:	2401      	movs	r4, #1
  GPIO_Init.Pull      = GPIO_NOPULL;
 800119e:	2500      	movs	r5, #0
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80011a0:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_13, GPIO_PIN_RESET );
 80011a2:	f000 fcfd 	bl	8001ba0 <HAL_GPIO_WritePin>
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80011a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80011aa:	a905      	add	r1, sp, #20
 80011ac:	4827      	ldr	r0, [pc, #156]	; (800124c <SPI_WIFI_MspInit+0x104>)
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80011ae:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80011b2:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_Init );
 80011b6:	f000 fc0f 	bl	80019d8 <HAL_GPIO_Init>
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80011ba:	4b25      	ldr	r3, [pc, #148]	; (8001250 <SPI_WIFI_MspInit+0x108>)
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80011bc:	4825      	ldr	r0, [pc, #148]	; (8001254 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80011be:	2602      	movs	r6, #2
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80011c0:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_IT_RISING;
 80011c2:	e9cd 6305 	strd	r6, r3, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80011c6:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80011ca:	f000 fc05 	bl	80019d8 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_8;
 80011ce:	f44f 7380 	mov.w	r3, #256	; 0x100
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80011d2:	a905      	add	r1, sp, #20
 80011d4:	481f      	ldr	r0, [pc, #124]	; (8001254 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = 0;
 80011d6:	9509      	str	r5, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80011d8:	e9cd 3405 	strd	r3, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_LOW;
 80011dc:	e9cd 5507 	strd	r5, r5, [sp, #28]
  HAL_GPIO_Init(GPIOE, &GPIO_Init );
 80011e0:	f000 fbfa 	bl	80019d8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin( GPIOE , GPIO_PIN_0, GPIO_PIN_SET );
 80011e4:	4622      	mov	r2, r4
 80011e6:	4621      	mov	r1, r4
 80011e8:	481a      	ldr	r0, [pc, #104]	; (8001254 <SPI_WIFI_MspInit+0x10c>)
 80011ea:	f000 fcd9 	bl	8001ba0 <HAL_GPIO_WritePin>
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80011ee:	a905      	add	r1, sp, #20
 80011f0:	4818      	ldr	r0, [pc, #96]	; (8001254 <SPI_WIFI_MspInit+0x10c>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 80011f2:	2706      	movs	r7, #6
  GPIO_Init.Mode      = GPIO_MODE_OUTPUT_PP;
 80011f4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 80011f8:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOE, &GPIO_Init );
 80011fc:	f000 fbec 	bl	80019d8 <HAL_GPIO_Init>
  GPIO_Init.Pin       =  GPIO_PIN_10;
 8001200:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001204:	a905      	add	r1, sp, #20
 8001206:	4814      	ldr	r0, [pc, #80]	; (8001258 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001208:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 800120a:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800120e:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_Init );
 8001212:	f000 fbe1 	bl	80019d8 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_12;
 8001216:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 800121a:	a905      	add	r1, sp, #20
 800121c:	480e      	ldr	r0, [pc, #56]	; (8001258 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 800121e:	9709      	str	r7, [sp, #36]	; 0x24
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001220:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 8001224:	e9cd 5407 	strd	r5, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC, &GPIO_Init );
 8001228:	f000 fbd6 	bl	80019d8 <HAL_GPIO_Init>
  GPIO_Init.Pin       = GPIO_PIN_11;
 800122c:	f44f 6300 	mov.w	r3, #2048	; 0x800
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001230:	4809      	ldr	r0, [pc, #36]	; (8001258 <SPI_WIFI_MspInit+0x110>)
  GPIO_Init.Alternate = GPIO_AF6_SPI3;
 8001232:	9709      	str	r7, [sp, #36]	; 0x24
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 8001234:	a905      	add	r1, sp, #20
  GPIO_Init.Mode      = GPIO_MODE_AF_PP;
 8001236:	e9cd 3605 	strd	r3, r6, [sp, #20]
  GPIO_Init.Speed     = GPIO_SPEED_FREQ_MEDIUM;
 800123a:	e9cd 4407 	strd	r4, r4, [sp, #28]
  HAL_GPIO_Init( GPIOC,&GPIO_Init );
 800123e:	f000 fbcb 	bl	80019d8 <HAL_GPIO_Init>
}
 8001242:	b00b      	add	sp, #44	; 0x2c
 8001244:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001246:	bf00      	nop
 8001248:	40021000 	.word	0x40021000
 800124c:	48000400 	.word	0x48000400
 8001250:	10110000 	.word	0x10110000
 8001254:	48001000 	.word	0x48001000
 8001258:	48000800 	.word	0x48000800

0800125c <SPI_WIFI_ResetModule>:
{
 800125c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = HAL_GetTick();
 800125e:	f000 fb13 	bl	8001888 <HAL_GetTick>
  WIFI_RESET_MODULE();
 8001262:	2200      	movs	r2, #0
 8001264:	f44f 7180 	mov.w	r1, #256	; 0x100
  uint32_t tickstart = HAL_GetTick();
 8001268:	4605      	mov	r5, r0
  WIFI_RESET_MODULE();
 800126a:	482e      	ldr	r0, [pc, #184]	; (8001324 <SPI_WIFI_ResetModule+0xc8>)
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 800126c:	4f2e      	ldr	r7, [pc, #184]	; (8001328 <SPI_WIFI_ResetModule+0xcc>)
  WIFI_RESET_MODULE();
 800126e:	f000 fc97 	bl	8001ba0 <HAL_GPIO_WritePin>
 8001272:	200a      	movs	r0, #10
 8001274:	f000 fb0e 	bl	8001894 <HAL_Delay>
 8001278:	2201      	movs	r2, #1
 800127a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800127e:	4829      	ldr	r0, [pc, #164]	; (8001324 <SPI_WIFI_ResetModule+0xc8>)
 8001280:	f000 fc8e 	bl	8001ba0 <HAL_GPIO_WritePin>
 8001284:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001288:	f000 fb04 	bl	8001894 <HAL_Delay>
  WIFI_ENABLE_NSS(); 
 800128c:	4825      	ldr	r0, [pc, #148]	; (8001324 <SPI_WIFI_ResetModule+0xc8>)
 800128e:	2200      	movs	r2, #0
 8001290:	2101      	movs	r1, #1
 8001292:	f000 fc85 	bl	8001ba0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 8001296:	200f      	movs	r0, #15
 8001298:	f7ff ff0a 	bl	80010b0 <SPI_WIFI_DelayUs>
  uint8_t count = 0;
 800129c:	2400      	movs	r4, #0
  while (WIFI_IS_CMDDATA_READY())
 800129e:	4821      	ldr	r0, [pc, #132]	; (8001324 <SPI_WIFI_ResetModule+0xc8>)
 80012a0:	2102      	movs	r1, #2
 80012a2:	f000 fc77 	bl	8001b94 <HAL_GPIO_ReadPin>
 80012a6:	2801      	cmp	r0, #1
 80012a8:	4602      	mov	r2, r0
 80012aa:	d020      	beq.n	80012ee <SPI_WIFI_ResetModule+0x92>
  WIFI_DISABLE_NSS();
 80012ac:	2201      	movs	r2, #1
 80012ae:	481d      	ldr	r0, [pc, #116]	; (8001324 <SPI_WIFI_ResetModule+0xc8>)
 80012b0:	4611      	mov	r1, r2
 80012b2:	f000 fc75 	bl	8001ba0 <HAL_GPIO_WritePin>
  if((Prompt[0] != 0x15) ||(Prompt[1] != 0x15) ||(Prompt[2] != '\r')||
 80012b6:	f89d 3000 	ldrb.w	r3, [sp]
 80012ba:	2b15      	cmp	r3, #21
 80012bc:	d12e      	bne.n	800131c <SPI_WIFI_ResetModule+0xc0>
 80012be:	f89d 3001 	ldrb.w	r3, [sp, #1]
 80012c2:	2b15      	cmp	r3, #21
 80012c4:	d12a      	bne.n	800131c <SPI_WIFI_ResetModule+0xc0>
 80012c6:	f89d 3002 	ldrb.w	r3, [sp, #2]
 80012ca:	2b0d      	cmp	r3, #13
 80012cc:	d126      	bne.n	800131c <SPI_WIFI_ResetModule+0xc0>
 80012ce:	f89d 3003 	ldrb.w	r3, [sp, #3]
 80012d2:	2b0a      	cmp	r3, #10
 80012d4:	d122      	bne.n	800131c <SPI_WIFI_ResetModule+0xc0>
       (Prompt[3] != '\n') ||(Prompt[4] != '>') ||(Prompt[5] != ' '))
 80012d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80012da:	2b3e      	cmp	r3, #62	; 0x3e
 80012dc:	d11e      	bne.n	800131c <SPI_WIFI_ResetModule+0xc0>
 80012de:	f89d 0005 	ldrb.w	r0, [sp, #5]
 80012e2:	3820      	subs	r0, #32
 80012e4:	bf18      	it	ne
 80012e6:	f04f 30ff 	movne.w	r0, #4294967295
}
 80012ea:	b003      	add	sp, #12
 80012ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    Status = HAL_SPI_Receive(&hspi , &Prompt[count], 1, 0xFFFF);
 80012ee:	eb0d 0104 	add.w	r1, sp, r4
 80012f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012f6:	4638      	mov	r0, r7
 80012f8:	f001 fba9 	bl	8002a4e <HAL_SPI_Receive>
 80012fc:	4606      	mov	r6, r0
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 80012fe:	f000 fac3 	bl	8001888 <HAL_GetTick>
 8001302:	1b40      	subs	r0, r0, r5
    count += 2;
 8001304:	3402      	adds	r4, #2
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 8001306:	f5b0 3f80 	cmp.w	r0, #65536	; 0x10000
    count += 2;
 800130a:	b2e4      	uxtb	r4, r4
    if(((HAL_GetTick() - tickstart ) > 0xFFFF) || (Status != HAL_OK))
 800130c:	d201      	bcs.n	8001312 <SPI_WIFI_ResetModule+0xb6>
 800130e:	2e00      	cmp	r6, #0
 8001310:	d0c5      	beq.n	800129e <SPI_WIFI_ResetModule+0x42>
      WIFI_DISABLE_NSS();
 8001312:	2201      	movs	r2, #1
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <SPI_WIFI_ResetModule+0xc8>)
 8001316:	4611      	mov	r1, r2
 8001318:	f000 fc42 	bl	8001ba0 <HAL_GPIO_WritePin>
    return -1;
 800131c:	f04f 30ff 	mov.w	r0, #4294967295
 8001320:	e7e3      	b.n	80012ea <SPI_WIFI_ResetModule+0x8e>
 8001322:	bf00      	nop
 8001324:	48001000 	.word	0x48001000
 8001328:	200002bc 	.word	0x200002bc

0800132c <SPI_WIFI_Init>:
{
 800132c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if (mode == ES_WIFI_INIT)
 800132e:	4605      	mov	r5, r0
 8001330:	bb78      	cbnz	r0, 8001392 <SPI_WIFI_Init+0x66>
    hspi.Instance               = SPI3;
 8001332:	4c1c      	ldr	r4, [pc, #112]	; (80013a4 <SPI_WIFI_Init+0x78>)
 8001334:	4b1c      	ldr	r3, [pc, #112]	; (80013a8 <SPI_WIFI_Init+0x7c>)
 8001336:	6023      	str	r3, [r4, #0]
    SPI_WIFI_MspInit(&hspi);
 8001338:	4620      	mov	r0, r4
 800133a:	f7ff ff05 	bl	8001148 <SPI_WIFI_MspInit>
    hspi.Init.Mode              = SPI_MODE_MASTER;
 800133e:	f44f 7382 	mov.w	r3, #260	; 0x104
    hspi.Init.Direction         = SPI_DIRECTION_2LINES;
 8001342:	e9c4 3501 	strd	r3, r5, [r4, #4]
    hspi.Init.DataSize          = SPI_DATASIZE_16BIT;
 8001346:	f44f 6370 	mov.w	r3, #3840	; 0xf00
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 800134a:	f44f 7200 	mov.w	r2, #512	; 0x200
    hspi.Init.CLKPolarity       = SPI_POLARITY_LOW;
 800134e:	e9c4 3503 	strd	r3, r5, [r4, #12]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001352:	4620      	mov	r0, r4
    hspi.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8; /* 80/8= 10MHz (Inventek WIFI module supports up to 20MHz)*/
 8001354:	2310      	movs	r3, #16
 8001356:	e9c4 2306 	strd	r2, r3, [r4, #24]
    hspi.Init.TIMode            = SPI_TIMODE_DISABLE;
 800135a:	e9c4 5508 	strd	r5, r5, [r4, #32]
    hspi.Init.CRCPolynomial     = 0;
 800135e:	e9c4 550a 	strd	r5, r5, [r4, #40]	; 0x28
    hspi.Init.CLKPhase          = SPI_PHASE_1EDGE;
 8001362:	6165      	str	r5, [r4, #20]
    if(HAL_SPI_Init( &hspi ) != HAL_OK)
 8001364:	f001 f925 	bl	80025b2 <HAL_SPI_Init>
 8001368:	4602      	mov	r2, r0
 800136a:	b9b8      	cbnz	r0, 800139c <SPI_WIFI_Init+0x70>
     HAL_NVIC_SetPriority((IRQn_Type)EXTI1_IRQn, SPI_INTERFACE_PRIO, 0x00);
 800136c:	4601      	mov	r1, r0
 800136e:	9001      	str	r0, [sp, #4]
 8001370:	2007      	movs	r0, #7
 8001372:	f000 fab5 	bl	80018e0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)EXTI1_IRQn);
 8001376:	2007      	movs	r0, #7
 8001378:	f000 fae4 	bl	8001944 <HAL_NVIC_EnableIRQ>
     HAL_NVIC_SetPriority((IRQn_Type)SPI3_IRQn, SPI_INTERFACE_PRIO, 0);
 800137c:	9a01      	ldr	r2, [sp, #4]
 800137e:	2033      	movs	r0, #51	; 0x33
 8001380:	4611      	mov	r1, r2
 8001382:	f000 faad 	bl	80018e0 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ((IRQn_Type)SPI3_IRQn);
 8001386:	2033      	movs	r0, #51	; 0x33
 8001388:	f000 fadc 	bl	8001944 <HAL_NVIC_EnableIRQ>
    SPI_WIFI_DelayUs(10);
 800138c:	200a      	movs	r0, #10
 800138e:	f7ff fe8f 	bl	80010b0 <SPI_WIFI_DelayUs>
}
 8001392:	b003      	add	sp, #12
 8001394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
  rc= SPI_WIFI_ResetModule();
 8001398:	f7ff bf60 	b.w	800125c <SPI_WIFI_ResetModule>
}
 800139c:	f04f 30ff 	mov.w	r0, #4294967295
 80013a0:	b003      	add	sp, #12
 80013a2:	bd30      	pop	{r4, r5, pc}
 80013a4:	200002bc 	.word	0x200002bc
 80013a8:	40003c00 	.word	0x40003c00

080013ac <SPI_WIFI_DeInit>:
{
 80013ac:	b508      	push	{r3, lr}
  HAL_SPI_DeInit( &hspi );
 80013ae:	4802      	ldr	r0, [pc, #8]	; (80013b8 <SPI_WIFI_DeInit+0xc>)
 80013b0:	f001 f984 	bl	80026bc <HAL_SPI_DeInit>
}
 80013b4:	2000      	movs	r0, #0
 80013b6:	bd08      	pop	{r3, pc}
 80013b8:	200002bc 	.word	0x200002bc

080013bc <SPI_WIFI_ReceiveData>:
{
 80013bc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013c0:	4690      	mov	r8, r2
  WIFI_DISABLE_NSS();
 80013c2:	2201      	movs	r2, #1
{
 80013c4:	4604      	mov	r4, r0
 80013c6:	460f      	mov	r7, r1
  WIFI_DISABLE_NSS();
 80013c8:	4836      	ldr	r0, [pc, #216]	; (80014a4 <SPI_WIFI_ReceiveData+0xe8>)
  while (cmddata_rdy_rising_event==1)
 80013ca:	4e37      	ldr	r6, [pc, #220]	; (80014a8 <SPI_WIFI_ReceiveData+0xec>)
  WIFI_DISABLE_NSS();
 80013cc:	4611      	mov	r1, r2
 80013ce:	f000 fbe7 	bl	8001ba0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(3);
 80013d2:	2003      	movs	r0, #3
 80013d4:	f7ff fe6c 	bl	80010b0 <SPI_WIFI_DelayUs>
  int tickstart = HAL_GetTick();
 80013d8:	f000 fa56 	bl	8001888 <HAL_GetTick>
 80013dc:	46b1      	mov	r9, r6
 80013de:	4605      	mov	r5, r0
  while (cmddata_rdy_rising_event==1)
 80013e0:	68b3      	ldr	r3, [r6, #8]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d01a      	beq.n	800141c <SPI_WIFI_ReceiveData+0x60>
  WIFI_ENABLE_NSS();
 80013e6:	482f      	ldr	r0, [pc, #188]	; (80014a4 <SPI_WIFI_ReceiveData+0xe8>)
  while (WIFI_IS_CMDDATA_READY())
 80013e8:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 80014a4 <SPI_WIFI_ReceiveData+0xe8>
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 80013ec:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80014ac <SPI_WIFI_ReceiveData+0xf0>
  WIFI_ENABLE_NSS();
 80013f0:	2200      	movs	r2, #0
 80013f2:	2101      	movs	r1, #1
 80013f4:	f000 fbd4 	bl	8001ba0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80013f8:	200f      	movs	r0, #15
 80013fa:	f7ff fe59 	bl	80010b0 <SPI_WIFI_DelayUs>
  while (WIFI_IS_CMDDATA_READY())
 80013fe:	3402      	adds	r4, #2
 8001400:	2500      	movs	r5, #0
 8001402:	2102      	movs	r1, #2
 8001404:	4658      	mov	r0, fp
 8001406:	f000 fbc5 	bl	8001b94 <HAL_GPIO_ReadPin>
 800140a:	2801      	cmp	r0, #1
 800140c:	b22e      	sxth	r6, r5
 800140e:	d00d      	beq.n	800142c <SPI_WIFI_ReceiveData+0x70>
  WIFI_DISABLE_NSS();
 8001410:	2201      	movs	r2, #1
 8001412:	4824      	ldr	r0, [pc, #144]	; (80014a4 <SPI_WIFI_ReceiveData+0xe8>)
 8001414:	4611      	mov	r1, r2
 8001416:	f000 fbc3 	bl	8001ba0 <HAL_GPIO_WritePin>
  return length;
 800141a:	e01a      	b.n	8001452 <SPI_WIFI_ReceiveData+0x96>
    if((HAL_GetTick() - tickstart ) > timeout)
 800141c:	f000 fa34 	bl	8001888 <HAL_GetTick>
 8001420:	1b40      	subs	r0, r0, r5
 8001422:	4580      	cmp	r8, r0
 8001424:	d2dc      	bcs.n	80013e0 <SPI_WIFI_ReceiveData+0x24>
      return ES_WIFI_ERROR_WAITING_DRDY_FALLING;
 8001426:	f06f 0602 	mvn.w	r6, #2
 800142a:	e012      	b.n	8001452 <SPI_WIFI_ReceiveData+0x96>
    if((length < len) || (!len))
 800142c:	42af      	cmp	r7, r5
 800142e:	dc01      	bgt.n	8001434 <SPI_WIFI_ReceiveData+0x78>
 8001430:	2f00      	cmp	r7, #0
 8001432:	d1ed      	bne.n	8001410 <SPI_WIFI_ReceiveData+0x54>
      spi_rx_event=1;
 8001434:	2201      	movs	r2, #1
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 8001436:	a901      	add	r1, sp, #4
 8001438:	4650      	mov	r0, sl
      spi_rx_event=1;
 800143a:	f8c9 200c 	str.w	r2, [r9, #12]
      if (HAL_SPI_Receive_IT(&hspi, tmp, 1) != HAL_OK) {
 800143e:	f001 fcef 	bl	8002e20 <HAL_SPI_Receive_IT>
 8001442:	2201      	movs	r2, #1
 8001444:	b148      	cbz	r0, 800145a <SPI_WIFI_ReceiveData+0x9e>
        WIFI_DISABLE_NSS();
 8001446:	4817      	ldr	r0, [pc, #92]	; (80014a4 <SPI_WIFI_ReceiveData+0xe8>)
 8001448:	4611      	mov	r1, r2
 800144a:	f000 fba9 	bl	8001ba0 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_SPI_FAILED;
 800144e:	f04f 36ff 	mov.w	r6, #4294967295
}
 8001452:	4630      	mov	r0, r6
 8001454:	b003      	add	sp, #12
 8001456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  int tickstart = HAL_GetTick();
 800145a:	f000 fa15 	bl	8001888 <HAL_GetTick>
 800145e:	4606      	mov	r6, r0
  while (spi_rx_event==1)
 8001460:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8001464:	2b01      	cmp	r3, #1
 8001466:	d104      	bne.n	8001472 <SPI_WIFI_ReceiveData+0xb6>
    if((HAL_GetTick() - tickstart ) > timeout)
 8001468:	f000 fa0e 	bl	8001888 <HAL_GetTick>
 800146c:	1b80      	subs	r0, r0, r6
 800146e:	4580      	cmp	r8, r0
 8001470:	d2f6      	bcs.n	8001460 <SPI_WIFI_ReceiveData+0xa4>
      pData[0] = tmp[0];
 8001472:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8001476:	f804 3c02 	strb.w	r3, [r4, #-2]
      pData[1] = tmp[1];
 800147a:	3502      	adds	r5, #2
 800147c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8001480:	f804 3c01 	strb.w	r3, [r4, #-1]
      if (length >= ES_WIFI_DATA_SIZE) {
 8001484:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8001488:	f104 0402 	add.w	r4, r4, #2
 800148c:	d1b9      	bne.n	8001402 <SPI_WIFI_ReceiveData+0x46>
        WIFI_DISABLE_NSS();
 800148e:	2201      	movs	r2, #1
 8001490:	4804      	ldr	r0, [pc, #16]	; (80014a4 <SPI_WIFI_ReceiveData+0xe8>)
 8001492:	4611      	mov	r1, r2
 8001494:	f000 fb84 	bl	8001ba0 <HAL_GPIO_WritePin>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 8001498:	f06f 0603 	mvn.w	r6, #3
        SPI_WIFI_ResetModule();
 800149c:	f7ff fede 	bl	800125c <SPI_WIFI_ResetModule>
        return ES_WIFI_ERROR_STUFFING_FOREVER;
 80014a0:	e7d7      	b.n	8001452 <SPI_WIFI_ReceiveData+0x96>
 80014a2:	bf00      	nop
 80014a4:	48001000 	.word	0x48001000
 80014a8:	2000029c 	.word	0x2000029c
 80014ac:	200002bc 	.word	0x200002bc

080014b0 <SPI_WIFI_SendData>:
{
 80014b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80014b4:	4605      	mov	r5, r0
 80014b6:	460c      	mov	r4, r1
 80014b8:	4617      	mov	r7, r2
  int tickstart = HAL_GetTick();
 80014ba:	f000 f9e5 	bl	8001888 <HAL_GetTick>
  while (WIFI_IS_CMDDATA_READY()==0)
 80014be:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8001558 <SPI_WIFI_SendData+0xa8>
  int tickstart = HAL_GetTick();
 80014c2:	4680      	mov	r8, r0
  while (WIFI_IS_CMDDATA_READY()==0)
 80014c4:	2102      	movs	r1, #2
 80014c6:	4648      	mov	r0, r9
 80014c8:	f000 fb64 	bl	8001b94 <HAL_GPIO_ReadPin>
 80014cc:	2801      	cmp	r0, #1
 80014ce:	4606      	mov	r6, r0
 80014d0:	d11b      	bne.n	800150a <SPI_WIFI_SendData+0x5a>
  cmddata_rdy_rising_event=1;
 80014d2:	f8df 808c 	ldr.w	r8, [pc, #140]	; 8001560 <SPI_WIFI_SendData+0xb0>
  WIFI_ENABLE_NSS();
 80014d6:	4601      	mov	r1, r0
  cmddata_rdy_rising_event=1;
 80014d8:	f8c8 0008 	str.w	r0, [r8, #8]
  WIFI_ENABLE_NSS();
 80014dc:	2200      	movs	r2, #0
 80014de:	481e      	ldr	r0, [pc, #120]	; (8001558 <SPI_WIFI_SendData+0xa8>)
 80014e0:	f000 fb5e 	bl	8001ba0 <HAL_GPIO_WritePin>
  SPI_WIFI_DelayUs(15);
 80014e4:	200f      	movs	r0, #15
 80014e6:	f7ff fde3 	bl	80010b0 <SPI_WIFI_DelayUs>
  if (len > 1)
 80014ea:	2c01      	cmp	r4, #1
 80014ec:	d919      	bls.n	8001522 <SPI_WIFI_SendData+0x72>
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80014ee:	481b      	ldr	r0, [pc, #108]	; (800155c <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 80014f0:	f8c8 6004 	str.w	r6, [r8, #4]
    if( HAL_SPI_Transmit_IT(&hspi, (uint8_t *)pdata , len/2) != HAL_OK)
 80014f4:	0862      	lsrs	r2, r4, #1
 80014f6:	4629      	mov	r1, r5
 80014f8:	f001 fbb8 	bl	8002c6c <HAL_SPI_Transmit_IT>
 80014fc:	b170      	cbz	r0, 800151c <SPI_WIFI_SendData+0x6c>
      WIFI_DISABLE_NSS();
 80014fe:	2201      	movs	r2, #1
 8001500:	4815      	ldr	r0, [pc, #84]	; (8001558 <SPI_WIFI_SendData+0xa8>)
 8001502:	4611      	mov	r1, r2
 8001504:	f000 fb4c 	bl	8001ba0 <HAL_GPIO_WritePin>
      return ES_WIFI_ERROR_SPI_FAILED;
 8001508:	e005      	b.n	8001516 <SPI_WIFI_SendData+0x66>
    if((HAL_GetTick() - tickstart ) > timeout)
 800150a:	f000 f9bd 	bl	8001888 <HAL_GetTick>
 800150e:	eba0 0008 	sub.w	r0, r0, r8
 8001512:	4287      	cmp	r7, r0
 8001514:	d2d6      	bcs.n	80014c4 <SPI_WIFI_SendData+0x14>
    return ES_WIFI_ERROR_SPI_FAILED;
 8001516:	f04f 30ff 	mov.w	r0, #4294967295
 800151a:	e019      	b.n	8001550 <SPI_WIFI_SendData+0xa0>
    wait_spi_tx_event(timeout);
 800151c:	4638      	mov	r0, r7
 800151e:	f7ff fdfd 	bl	800111c <wait_spi_tx_event>
  if ( len & 1)
 8001522:	07e3      	lsls	r3, r4, #31
 8001524:	d513      	bpl.n	800154e <SPI_WIFI_SendData+0x9e>
    Padding[0] = pdata[len-1];
 8001526:	4425      	add	r5, r4
    spi_tx_event=1;
 8001528:	2201      	movs	r2, #1
    Padding[0] = pdata[len-1];
 800152a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800152e:	f88d 3004 	strb.w	r3, [sp, #4]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001532:	480a      	ldr	r0, [pc, #40]	; (800155c <SPI_WIFI_SendData+0xac>)
    spi_tx_event=1;
 8001534:	f8c8 2004 	str.w	r2, [r8, #4]
    Padding[1] = '\n';
 8001538:	230a      	movs	r3, #10
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 800153a:	a901      	add	r1, sp, #4
    Padding[1] = '\n';
 800153c:	f88d 3005 	strb.w	r3, [sp, #5]
    if( HAL_SPI_Transmit_IT(&hspi, Padding, 1) != HAL_OK)
 8001540:	f001 fb94 	bl	8002c6c <HAL_SPI_Transmit_IT>
 8001544:	2800      	cmp	r0, #0
 8001546:	d1da      	bne.n	80014fe <SPI_WIFI_SendData+0x4e>
    wait_spi_tx_event(timeout);
 8001548:	4638      	mov	r0, r7
 800154a:	f7ff fde7 	bl	800111c <wait_spi_tx_event>
  return len;
 800154e:	b220      	sxth	r0, r4
}
 8001550:	b003      	add	sp, #12
 8001552:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001556:	bf00      	nop
 8001558:	48001000 	.word	0x48001000
 800155c:	200002bc 	.word	0x200002bc
 8001560:	2000029c 	.word	0x2000029c

08001564 <SPI_WIFI_Delay>:
  HAL_Delay(Delay);
 8001564:	f000 b996 	b.w	8001894 <HAL_Delay>

08001568 <HAL_SPI_RxCpltCallback>:
  * @retval None
  */

void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_rx_event)
 8001568:	4b02      	ldr	r3, [pc, #8]	; (8001574 <HAL_SPI_RxCpltCallback+0xc>)
 800156a:	68da      	ldr	r2, [r3, #12]
 800156c:	b10a      	cbz	r2, 8001572 <HAL_SPI_RxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_rx_sem);
    spi_rx_event = 0;
 800156e:	2200      	movs	r2, #0
 8001570:	60da      	str	r2, [r3, #12]
  }
}
 8001572:	4770      	bx	lr
 8001574:	2000029c 	.word	0x2000029c

08001578 <HAL_SPI_TxCpltCallback>:
  *               the configuration information for SPI module.
  * @retval None
  */
void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
  if (spi_tx_event)
 8001578:	4b02      	ldr	r3, [pc, #8]	; (8001584 <HAL_SPI_TxCpltCallback+0xc>)
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	b10a      	cbz	r2, 8001582 <HAL_SPI_TxCpltCallback+0xa>
  {
    SEM_SIGNAL(spi_tx_sem);
    spi_tx_event = 0;
 800157e:	2200      	movs	r2, #0
 8001580:	605a      	str	r2, [r3, #4]
  }
}
 8001582:	4770      	bx	lr
 8001584:	2000029c 	.word	0x2000029c

08001588 <SPI_WIFI_ISR>:
  * @param  None
  * @retval None
  */
void    SPI_WIFI_ISR(void)
{
   if (cmddata_rdy_rising_event==1)  
 8001588:	4b03      	ldr	r3, [pc, #12]	; (8001598 <SPI_WIFI_ISR+0x10>)
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	2a01      	cmp	r2, #1
   {
     SEM_SIGNAL(cmddata_rdy_rising_sem);
     cmddata_rdy_rising_event = 0;
 800158e:	bf04      	itt	eq
 8001590:	2200      	moveq	r2, #0
 8001592:	609a      	streq	r2, [r3, #8]
   }
}
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	2000029c 	.word	0x2000029c

0800159c <WIFI_Init>:
  * @brief  Initialize the WIFI core
  * @param  None
  * @retval Operation status
  */
WIFI_Status_t WIFI_Init(void)
{
 800159c:	b507      	push	{r0, r1, r2, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_RegisterBusIO(&EsWifiObj,
 800159e:	4b0b      	ldr	r3, [pc, #44]	; (80015cc <WIFI_Init+0x30>)
 80015a0:	9301      	str	r3, [sp, #4]
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <WIFI_Init+0x34>)
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <WIFI_Init+0x38>)
 80015a8:	4b0b      	ldr	r3, [pc, #44]	; (80015d8 <WIFI_Init+0x3c>)
 80015aa:	490c      	ldr	r1, [pc, #48]	; (80015dc <WIFI_Init+0x40>)
 80015ac:	480c      	ldr	r0, [pc, #48]	; (80015e0 <WIFI_Init+0x44>)
 80015ae:	f7ff faf3 	bl	8000b98 <ES_WIFI_RegisterBusIO>
 80015b2:	b940      	cbnz	r0, 80015c6 <WIFI_Init+0x2a>
                           SPI_WIFI_DeInit,
                           SPI_WIFI_Delay,
                           SPI_WIFI_SendData,
                           SPI_WIFI_ReceiveData) == ES_WIFI_STATUS_OK)
  {
    if(ES_WIFI_Init(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80015b4:	480a      	ldr	r0, [pc, #40]	; (80015e0 <WIFI_Init+0x44>)
 80015b6:	f7ff fa8d 	bl	8000ad4 <ES_WIFI_Init>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80015ba:	3800      	subs	r0, #0
 80015bc:	bf18      	it	ne
 80015be:	2001      	movne	r0, #1
    {
      ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 80015c0:	b003      	add	sp, #12
 80015c2:	f85d fb04 	ldr.w	pc, [sp], #4
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80015c6:	2001      	movs	r0, #1
 80015c8:	e7fa      	b.n	80015c0 <WIFI_Init+0x24>
 80015ca:	bf00      	nop
 80015cc:	080013bd 	.word	0x080013bd
 80015d0:	080014b1 	.word	0x080014b1
 80015d4:	080013ad 	.word	0x080013ad
 80015d8:	08001565 	.word	0x08001565
 80015dc:	0800132d 	.word	0x0800132d
 80015e0:	20000320 	.word	0x20000320

080015e4 <WIFI_Connect>:
  */
WIFI_Status_t WIFI_Connect(
                             const char* SSID,
                             const char* Password,
                             WIFI_Ecn_t ecn)
{
 80015e4:	b508      	push	{r3, lr}
 80015e6:	4613      	mov	r3, r2
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_Connect(&EsWifiObj, SSID, Password, (ES_WIFI_SecurityType_t) ecn) == ES_WIFI_STATUS_OK)
 80015e8:	460a      	mov	r2, r1
 80015ea:	4601      	mov	r1, r0
 80015ec:	4806      	ldr	r0, [pc, #24]	; (8001608 <WIFI_Connect+0x24>)
 80015ee:	f7ff fae5 	bl	8000bbc <ES_WIFI_Connect>
 80015f2:	b930      	cbnz	r0, 8001602 <WIFI_Connect+0x1e>
  {
    if(ES_WIFI_GetNetworkSettings(&EsWifiObj) == ES_WIFI_STATUS_OK)
 80015f4:	4804      	ldr	r0, [pc, #16]	; (8001608 <WIFI_Connect+0x24>)
 80015f6:	f7ff fb3d 	bl	8000c74 <ES_WIFI_GetNetworkSettings>
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 80015fa:	3800      	subs	r0, #0
 80015fc:	bf18      	it	ne
 80015fe:	2001      	movne	r0, #1
    {
       ret = WIFI_STATUS_OK;
    }
  }
  return ret;
}
 8001600:	bd08      	pop	{r3, pc}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 8001602:	2001      	movs	r0, #1
 8001604:	e7fc      	b.n	8001600 <WIFI_Connect+0x1c>
 8001606:	bf00      	nop
 8001608:	20000320 	.word	0x20000320

0800160c <WIFI_GetMAC_Address>:
/**
  * @brief  This function retrieves the WiFi interface's MAC address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetMAC_Address(uint8_t  *mac)
{
 800160c:	4601      	mov	r1, r0
 800160e:	b508      	push	{r3, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if(ES_WIFI_GetMACAddress(&EsWifiObj, mac) == ES_WIFI_STATUS_OK)
 8001610:	4803      	ldr	r0, [pc, #12]	; (8001620 <WIFI_GetMAC_Address+0x14>)
 8001612:	f7ff fba3 	bl	8000d5c <ES_WIFI_GetMACAddress>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001616:	3800      	subs	r0, #0
 8001618:	bf18      	it	ne
 800161a:	2001      	movne	r0, #1
 800161c:	bd08      	pop	{r3, pc}
 800161e:	bf00      	nop
 8001620:	20000320 	.word	0x20000320

08001624 <WIFI_GetIP_Address>:
/**
  * @brief  This function retrieves the WiFi interface's IP address.
  * @retval Operation Status.
  */
WIFI_Status_t WIFI_GetIP_Address (uint8_t  *ipaddr)
{
 8001624:	b538      	push	{r3, r4, r5, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 8001626:	4d06      	ldr	r5, [pc, #24]	; (8001640 <WIFI_GetIP_Address+0x1c>)
{
 8001628:	4604      	mov	r4, r0
  if (ES_WIFI_IsConnected(&EsWifiObj) == 1)
 800162a:	4628      	mov	r0, r5
 800162c:	f7ff fb06 	bl	8000c3c <ES_WIFI_IsConnected>
 8001630:	2801      	cmp	r0, #1
  {
    memcpy(ipaddr, EsWifiObj.NetSettings.IP_Addr, 4);
 8001632:	bf03      	ittte	eq
 8001634:	f8d5 30d5 	ldreq.w	r3, [r5, #213]	; 0xd5
 8001638:	6023      	streq	r3, [r4, #0]
    ret = WIFI_STATUS_OK;
 800163a:	2000      	moveq	r0, #0
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
 800163c:	2001      	movne	r0, #1
  }
  return ret;
}
 800163e:	bd38      	pop	{r3, r4, r5, pc}
 8001640:	20000320 	.word	0x20000320

08001644 <WIFI_OpenClientConnection>:
  * @param  port : Remote port
  * @param  local_port : Local port
  * @retval Operation status
  */
WIFI_Status_t WIFI_OpenClientConnection(uint32_t socket, WIFI_Protocol_t type, const char *name, uint8_t *ipaddr, uint16_t port, uint16_t local_port)
{
 8001644:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;
  ES_WIFI_Conn_t conn;
  
  conn.Number = socket;
  conn.RemotePort = port;
 8001646:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800164a:	f8ad 2006 	strh.w	r2, [sp, #6]
  conn.LocalPort = local_port;
 800164e:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8001652:	f8ad 2008 	strh.w	r2, [sp, #8]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001656:	3900      	subs	r1, #0
  conn.RemoteIP[0] = ipaddr[0];
 8001658:	781a      	ldrb	r2, [r3, #0]
 800165a:	f88d 200a 	strb.w	r2, [sp, #10]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 800165e:	bf18      	it	ne
 8001660:	2101      	movne	r1, #1
  conn.RemoteIP[1] = ipaddr[1];
 8001662:	785a      	ldrb	r2, [r3, #1]
  conn.Number = socket;
 8001664:	f88d 0005 	strb.w	r0, [sp, #5]
  conn.Type = (type == WIFI_TCP_PROTOCOL)? ES_WIFI_TCP_CONNECTION : ES_WIFI_UDP_CONNECTION;
 8001668:	f88d 1004 	strb.w	r1, [sp, #4]
  conn.RemoteIP[1] = ipaddr[1];
 800166c:	f88d 200b 	strb.w	r2, [sp, #11]
  conn.RemoteIP[2] = ipaddr[2];
  conn.RemoteIP[3] = ipaddr[3];
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001670:	a901      	add	r1, sp, #4
  conn.RemoteIP[2] = ipaddr[2];
 8001672:	789a      	ldrb	r2, [r3, #2]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001674:	4806      	ldr	r0, [pc, #24]	; (8001690 <WIFI_OpenClientConnection+0x4c>)
  conn.RemoteIP[3] = ipaddr[3];
 8001676:	78db      	ldrb	r3, [r3, #3]
  conn.RemoteIP[2] = ipaddr[2];
 8001678:	f88d 200c 	strb.w	r2, [sp, #12]
  conn.RemoteIP[3] = ipaddr[3];
 800167c:	f88d 300d 	strb.w	r3, [sp, #13]
  if(ES_WIFI_StartClientConnection(&EsWifiObj, &conn)== ES_WIFI_STATUS_OK)
 8001680:	f7ff fb8a 	bl	8000d98 <ES_WIFI_StartClientConnection>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 8001684:	3800      	subs	r0, #0
 8001686:	bf18      	it	ne
 8001688:	2001      	movne	r0, #1
 800168a:	b007      	add	sp, #28
 800168c:	f85d fb04 	ldr.w	pc, [sp], #4
 8001690:	20000320 	.word	0x20000320

08001694 <WIFI_SendData>:
  * @param  SentDatalen : (OUT) length actually sent
  * @param  Timeout : Socket write timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_SendData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *SentDatalen, uint32_t Timeout)
{
 8001694:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

    if(ES_WIFI_SendData(&EsWifiObj, socket, pdata, Reqlen, SentDatalen, Timeout) == ES_WIFI_STATUS_OK)
 8001696:	9c04      	ldr	r4, [sp, #16]
 8001698:	e9cd 3400 	strd	r3, r4, [sp]
 800169c:	4613      	mov	r3, r2
 800169e:	460a      	mov	r2, r1
 80016a0:	4601      	mov	r1, r0
 80016a2:	4804      	ldr	r0, [pc, #16]	; (80016b4 <WIFI_SendData+0x20>)
 80016a4:	f7ff fbf8 	bl	8000e98 <ES_WIFI_SendData>
    {
      ret = WIFI_STATUS_OK;
    }

  return ret;
}
 80016a8:	3800      	subs	r0, #0
 80016aa:	bf18      	it	ne
 80016ac:	2001      	movne	r0, #1
 80016ae:	b002      	add	sp, #8
 80016b0:	bd10      	pop	{r4, pc}
 80016b2:	bf00      	nop
 80016b4:	20000320 	.word	0x20000320

080016b8 <WIFI_ReceiveData>:
  * @param  RcvDatalen : (OUT) length of the data actually received
  * @param  Timeout : Socket read timeout (ms)
  * @retval Operation status
  */
WIFI_Status_t WIFI_ReceiveData(uint8_t socket, uint8_t *pdata, uint16_t Reqlen, uint16_t *RcvDatalen, uint32_t Timeout)
{
 80016b8:	b513      	push	{r0, r1, r4, lr}
  WIFI_Status_t ret = WIFI_STATUS_ERROR;

  if(ES_WIFI_ReceiveData(&EsWifiObj, socket, pdata, Reqlen, RcvDatalen, Timeout) == ES_WIFI_STATUS_OK)
 80016ba:	9c04      	ldr	r4, [sp, #16]
 80016bc:	e9cd 3400 	strd	r3, r4, [sp]
 80016c0:	4613      	mov	r3, r2
 80016c2:	460a      	mov	r2, r1
 80016c4:	4601      	mov	r1, r0
 80016c6:	4804      	ldr	r0, [pc, #16]	; (80016d8 <WIFI_ReceiveData+0x20>)
 80016c8:	f7ff fc68 	bl	8000f9c <ES_WIFI_ReceiveData>
  {
    ret = WIFI_STATUS_OK;
  }
  return ret;
}
 80016cc:	3800      	subs	r0, #0
 80016ce:	bf18      	it	ne
 80016d0:	2001      	movne	r0, #1
 80016d2:	b002      	add	sp, #8
 80016d4:	bd10      	pop	{r4, pc}
 80016d6:	bf00      	nop
 80016d8:	20000320 	.word	0x20000320

080016dc <BSP_LED_Init>:
  * @param  Led  LED to be initialized. 
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 80016dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  GPIO_InitTypeDef  gpio_init_structure;
  
  LEDx_GPIO_CLK_ENABLE(Led);
 80016de:	b948      	cbnz	r0, 80016f4 <BSP_LED_Init+0x18>
 80016e0:	4b0d      	ldr	r3, [pc, #52]	; (8001718 <BSP_LED_Init+0x3c>)
 80016e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80016e4:	f042 0202 	orr.w	r2, r2, #2
 80016e8:	64da      	str	r2, [r3, #76]	; 0x4c
 80016ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	9300      	str	r3, [sp, #0]
 80016f2:	9b00      	ldr	r3, [sp, #0]
  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = GPIO_PIN[Led];
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80016f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016f8:	2301      	movs	r3, #1
 80016fa:	e9cd 2301 	strd	r2, r3, [sp, #4]
  gpio_init_structure.Pull  = GPIO_NOPULL;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fe:	2100      	movs	r1, #0
 8001700:	2302      	movs	r3, #2
 8001702:	e9cd 1303 	strd	r1, r3, [sp, #12]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &gpio_init_structure);
 8001706:	4b05      	ldr	r3, [pc, #20]	; (800171c <BSP_LED_Init+0x40>)
 8001708:	a901      	add	r1, sp, #4
 800170a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 800170e:	f000 f963 	bl	80019d8 <HAL_GPIO_Init>
}
 8001712:	b007      	add	sp, #28
 8001714:	f85d fb04 	ldr.w	pc, [sp], #4
 8001718:	40021000 	.word	0x40021000
 800171c:	20000004 	.word	0x20000004

08001720 <BSP_LED_On>:
  *              This parameter can be one of the following values:
  *                @arg  LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET);
 8001720:	4b03      	ldr	r3, [pc, #12]	; (8001730 <BSP_LED_On+0x10>)
 8001722:	2201      	movs	r2, #1
 8001724:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001728:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800172c:	f000 ba38 	b.w	8001ba0 <HAL_GPIO_WritePin>
 8001730:	20000004 	.word	0x20000004

08001734 <BSP_COM_Init>:
  *                @arg  COM1 
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains the
  *                configuration information for the specified USART peripheral.
  */
void BSP_COM_Init(COM_TypeDef COM, UART_HandleTypeDef *huart)
{
 8001734:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001736:	460d      	mov	r5, r1
 8001738:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable GPIO clock */
  DISCOVERY_COMx_TX_GPIO_CLK_ENABLE(COM);
 800173a:	b9d8      	cbnz	r0, 8001774 <BSP_COM_Init+0x40>
 800173c:	4b1d      	ldr	r3, [pc, #116]	; (80017b4 <BSP_COM_Init+0x80>)
 800173e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001740:	f042 0202 	orr.w	r2, r2, #2
 8001744:	64da      	str	r2, [r3, #76]	; 0x4c
 8001746:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001748:	f002 0202 	and.w	r2, r2, #2
 800174c:	9200      	str	r2, [sp, #0]
 800174e:	9a00      	ldr	r2, [sp, #0]
  DISCOVERY_COMx_RX_GPIO_CLK_ENABLE(COM);
 8001750:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001752:	f042 0202 	orr.w	r2, r2, #2
 8001756:	64da      	str	r2, [r3, #76]	; 0x4c
 8001758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800175a:	f002 0202 	and.w	r2, r2, #2
 800175e:	9201      	str	r2, [sp, #4]
 8001760:	9a01      	ldr	r2, [sp, #4]

  /* Enable USART clock */
  DISCOVERY_COMx_CLK_ENABLE(COM);
 8001762:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001764:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001768:	661a      	str	r2, [r3, #96]	; 0x60
 800176a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800176c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001770:	9302      	str	r3, [sp, #8]
 8001772:	9b02      	ldr	r3, [sp, #8]
  gpio_init_structure.Pin = COM_TX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
  gpio_init_structure.Pull = GPIO_NOPULL;
  gpio_init_structure.Alternate = COM_TX_AF[COM];
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001774:	4c10      	ldr	r4, [pc, #64]	; (80017b8 <BSP_COM_Init+0x84>)
 8001776:	eb04 0480 	add.w	r4, r4, r0, lsl #2
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800177a:	2602      	movs	r6, #2
 800177c:	2340      	movs	r3, #64	; 0x40
 800177e:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001782:	68a0      	ldr	r0, [r4, #8]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001784:	9606      	str	r6, [sp, #24]
  gpio_init_structure.Pull = GPIO_NOPULL;
 8001786:	2300      	movs	r3, #0
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 8001788:	2707      	movs	r7, #7
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 800178a:	a903      	add	r1, sp, #12
  gpio_init_structure.Pull = GPIO_NOPULL;
 800178c:	9305      	str	r3, [sp, #20]
  gpio_init_structure.Alternate = COM_TX_AF[COM];
 800178e:	9707      	str	r7, [sp, #28]
  HAL_GPIO_Init(COM_TX_PORT[COM], &gpio_init_structure);
 8001790:	f000 f922 	bl	80019d8 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM_RX_PIN[COM];
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
  gpio_init_structure.Alternate = COM_RX_AF[COM];
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 8001794:	68e0      	ldr	r0, [r4, #12]
  gpio_init_structure.Alternate = COM_RX_AF[COM];
 8001796:	9707      	str	r7, [sp, #28]
  gpio_init_structure.Pin = COM_RX_PIN[COM];
 8001798:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 800179a:	a903      	add	r1, sp, #12
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800179c:	e9cd 3603 	strd	r3, r6, [sp, #12]
  HAL_GPIO_Init(COM_RX_PORT[COM], &gpio_init_structure);
 80017a0:	f000 f91a 	bl	80019d8 <HAL_GPIO_Init>

  /* USART configuration */
  huart->Instance = COM_USART[COM];
 80017a4:	6923      	ldr	r3, [r4, #16]
 80017a6:	602b      	str	r3, [r5, #0]
  HAL_UART_Init(huart);
 80017a8:	4628      	mov	r0, r5
 80017aa:	f002 f8bc 	bl	8003926 <HAL_UART_Init>
}
 80017ae:	b009      	add	sp, #36	; 0x24
 80017b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000
 80017b8:	20000004 	.word	0x20000004

080017bc <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017bc:	490f      	ldr	r1, [pc, #60]	; (80017fc <SystemInit+0x40>)
 80017be:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80017c2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	; (8001800 <SystemInit+0x44>)
 80017cc:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80017ce:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 80017d0:	f042 0201 	orr.w	r2, r2, #1
 80017d4:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 80017d6:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 80017de:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 80017e2:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000;
 80017e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80017f0:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80017f2:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80017f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80017f8:	608b      	str	r3, [r1, #8]
#endif
}
 80017fa:	4770      	bx	lr
 80017fc:	e000ed00 	.word	0xe000ed00
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_MspInit>:
__weak void HAL_MspInit(void)
{
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 8001804:	4770      	bx	lr
	...

08001808 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001808:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800180a:	4e0f      	ldr	r6, [pc, #60]	; (8001848 <HAL_InitTick+0x40>)
{
 800180c:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq != 0U)
 800180e:	7830      	ldrb	r0, [r6, #0]
 8001810:	b908      	cbnz	r0, 8001816 <HAL_InitTick+0xe>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 8001812:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 8001814:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001816:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_InitTick+0x44>)
 8001818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800181c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001820:	6810      	ldr	r0, [r2, #0]
 8001822:	fbb0 f0f3 	udiv	r0, r0, r3
 8001826:	f000 f89b 	bl	8001960 <HAL_SYSTICK_Config>
 800182a:	4604      	mov	r4, r0
 800182c:	2800      	cmp	r0, #0
 800182e:	d1f0      	bne.n	8001812 <HAL_InitTick+0xa>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001830:	2d0f      	cmp	r5, #15
 8001832:	d8ee      	bhi.n	8001812 <HAL_InitTick+0xa>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001834:	4602      	mov	r2, r0
 8001836:	4629      	mov	r1, r5
 8001838:	f04f 30ff 	mov.w	r0, #4294967295
 800183c:	f000 f850 	bl	80018e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001840:	6075      	str	r5, [r6, #4]
 8001842:	4620      	mov	r0, r4
 8001844:	e7e6      	b.n	8001814 <HAL_InitTick+0xc>
 8001846:	bf00      	nop
 8001848:	2000001c 	.word	0x2000001c
 800184c:	20000018 	.word	0x20000018

08001850 <HAL_Init>:
{
 8001850:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001852:	2003      	movs	r0, #3
 8001854:	f000 f832 	bl	80018bc <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001858:	200f      	movs	r0, #15
 800185a:	f7ff ffd5 	bl	8001808 <HAL_InitTick>
 800185e:	4604      	mov	r4, r0
 8001860:	b918      	cbnz	r0, 800186a <HAL_Init+0x1a>
    HAL_MspInit();
 8001862:	f7ff ffcf 	bl	8001804 <HAL_MspInit>
}
 8001866:	4620      	mov	r0, r4
 8001868:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 800186a:	2401      	movs	r4, #1
 800186c:	e7fb      	b.n	8001866 <HAL_Init+0x16>
	...

08001870 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8001870:	4a03      	ldr	r2, [pc, #12]	; (8001880 <HAL_IncTick+0x10>)
 8001872:	4b04      	ldr	r3, [pc, #16]	; (8001884 <HAL_IncTick+0x14>)
 8001874:	6811      	ldr	r1, [r2, #0]
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	440b      	add	r3, r1
 800187a:	6013      	str	r3, [r2, #0]
}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000cec 	.word	0x20000cec
 8001884:	2000001c 	.word	0x2000001c

08001888 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001888:	4b01      	ldr	r3, [pc, #4]	; (8001890 <HAL_GetTick+0x8>)
 800188a:	6818      	ldr	r0, [r3, #0]
}
 800188c:	4770      	bx	lr
 800188e:	bf00      	nop
 8001890:	20000cec 	.word	0x20000cec

08001894 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001894:	b538      	push	{r3, r4, r5, lr}
 8001896:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001898:	f7ff fff6 	bl	8001888 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800189c:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)uwTickFreq;
 800189e:	bf1c      	itt	ne
 80018a0:	4b05      	ldrne	r3, [pc, #20]	; (80018b8 <HAL_Delay+0x24>)
 80018a2:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 80018a4:	4605      	mov	r5, r0
    wait += (uint32_t)uwTickFreq;
 80018a6:	bf18      	it	ne
 80018a8:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018aa:	f7ff ffed 	bl	8001888 <HAL_GetTick>
 80018ae:	1b43      	subs	r3, r0, r5
 80018b0:	42a3      	cmp	r3, r4
 80018b2:	d3fa      	bcc.n	80018aa <HAL_Delay+0x16>
  {
  }
}
 80018b4:	bd38      	pop	{r3, r4, r5, pc}
 80018b6:	bf00      	nop
 80018b8:	2000001c 	.word	0x2000001c

080018bc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018bc:	4907      	ldr	r1, [pc, #28]	; (80018dc <HAL_NVIC_SetPriorityGrouping+0x20>)
 80018be:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c4:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018c6:	0412      	lsls	r2, r2, #16
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018cc:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018d0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80018d8:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e0:	4b16      	ldr	r3, [pc, #88]	; (800193c <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018e2:	b530      	push	{r4, r5, lr}
 80018e4:	68dc      	ldr	r4, [r3, #12]
 80018e6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018ea:	f1c4 0507 	rsb	r5, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ee:	1d23      	adds	r3, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018f0:	2d04      	cmp	r5, #4
 80018f2:	bf28      	it	cs
 80018f4:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018f6:	2b06      	cmp	r3, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f8:	f04f 33ff 	mov.w	r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018fc:	bf8c      	ite	hi
 80018fe:	3c03      	subhi	r4, #3
 8001900:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001902:	fa03 f505 	lsl.w	r5, r3, r5
 8001906:	ea21 0105 	bic.w	r1, r1, r5
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800190a:	40a3      	lsls	r3, r4
 800190c:	ea22 0203 	bic.w	r2, r2, r3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001910:	40a1      	lsls	r1, r4
  if ((int32_t)(IRQn) >= 0)
 8001912:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001914:	ea41 0302 	orr.w	r3, r1, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001918:	bfac      	ite	ge
 800191a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800191e:	4a08      	ldrlt	r2, [pc, #32]	; (8001940 <HAL_NVIC_SetPriority+0x60>)
 8001920:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001924:	bfb8      	it	lt
 8001926:	f000 000f 	andlt.w	r0, r0, #15
 800192a:	b2db      	uxtb	r3, r3
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192c:	bfaa      	itet	ge
 800192e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001932:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001938:	bd30      	pop	{r4, r5, pc}
 800193a:	bf00      	nop
 800193c:	e000ed00 	.word	0xe000ed00
 8001940:	e000ed14 	.word	0xe000ed14

08001944 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001944:	2800      	cmp	r0, #0
 8001946:	db08      	blt.n	800195a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001948:	2301      	movs	r3, #1
 800194a:	0942      	lsrs	r2, r0, #5
 800194c:	f000 001f 	and.w	r0, r0, #31
 8001950:	fa03 f000 	lsl.w	r0, r3, r0
 8001954:	4b01      	ldr	r3, [pc, #4]	; (800195c <HAL_NVIC_EnableIRQ+0x18>)
 8001956:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800195a:	4770      	bx	lr
 800195c:	e000e100 	.word	0xe000e100

08001960 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	3801      	subs	r0, #1
 8001962:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8001966:	d20a      	bcs.n	800197e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196e:	21f0      	movs	r1, #240	; 0xf0
 8001970:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001974:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001976:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001978:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800197a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800197c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800197e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	e000e010 	.word	0xe000e010
 8001988:	e000ed00 	.word	0xe000ed00

0800198c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800198c:	b510      	push	{r4, lr}
  HAL_StatusTypeDef status = HAL_OK;

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800198e:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 8001992:	2a02      	cmp	r2, #2
 8001994:	d003      	beq.n	800199e <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001996:	2204      	movs	r2, #4
 8001998:	63c2      	str	r2, [r0, #60]	; 0x3c

    status = HAL_ERROR;
 800199a:	2001      	movs	r0, #1
    {
      hdma->XferAbortCallback(hdma);
    }
  }
  return status;
}
 800199c:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800199e:	6802      	ldr	r2, [r0, #0]
    if(hdma->XferAbortCallback != NULL)
 80019a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019a2:	6811      	ldr	r1, [r2, #0]
 80019a4:	f021 010e 	bic.w	r1, r1, #14
 80019a8:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80019aa:	6811      	ldr	r1, [r2, #0]
 80019ac:	f021 0101 	bic.w	r1, r1, #1
 80019b0:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019b2:	e9d0 4210 	ldrd	r4, r2, [r0, #64]	; 0x40
 80019b6:	2101      	movs	r1, #1
 80019b8:	f002 021c 	and.w	r2, r2, #28
 80019bc:	fa01 f202 	lsl.w	r2, r1, r2
 80019c0:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80019c2:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80019c4:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80019c8:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80019cc:	b113      	cbz	r3, 80019d4 <HAL_DMA_Abort_IT+0x48>
      hdma->XferAbortCallback(hdma);
 80019ce:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80019d0:	4620      	mov	r0, r4
 80019d2:	e7e3      	b.n	800199c <HAL_DMA_Abort_IT+0x10>
 80019d4:	4618      	mov	r0, r3
 80019d6:	e7e1      	b.n	800199c <HAL_DMA_Abort_IT+0x10>

080019d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019dc:	f8df 91b0 	ldr.w	r9, [pc, #432]	; 8001b90 <HAL_GPIO_Init+0x1b8>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80019e0:	4d69      	ldr	r5, [pc, #420]	; (8001b88 <HAL_GPIO_Init+0x1b0>)
  uint32_t position = 0x00u;
 80019e2:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e4:	680a      	ldr	r2, [r1, #0]
 80019e6:	fa32 f403 	lsrs.w	r4, r2, r3
 80019ea:	d102      	bne.n	80019f2 <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 80019ec:	b003      	add	sp, #12
 80019ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019f2:	f04f 0a01 	mov.w	sl, #1
 80019f6:	fa0a fa03 	lsl.w	sl, sl, r3
    if (iocurrent != 0x00u)
 80019fa:	ea1a 0202 	ands.w	r2, sl, r2
 80019fe:	f000 80b4 	beq.w	8001b6a <HAL_GPIO_Init+0x192>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a02:	684c      	ldr	r4, [r1, #4]
 8001a04:	f024 0e10 	bic.w	lr, r4, #16
 8001a08:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001a0c:	2603      	movs	r6, #3
 8001a0e:	f10e 37ff 	add.w	r7, lr, #4294967295
 8001a12:	fa06 f608 	lsl.w	r6, r6, r8
 8001a16:	2f01      	cmp	r7, #1
 8001a18:	ea6f 0606 	mvn.w	r6, r6
 8001a1c:	d811      	bhi.n	8001a42 <HAL_GPIO_Init+0x6a>
        temp = GPIOx->OSPEEDR;
 8001a1e:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a20:	ea07 0c06 	and.w	ip, r7, r6
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a24:	68cf      	ldr	r7, [r1, #12]
 8001a26:	fa07 f708 	lsl.w	r7, r7, r8
 8001a2a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OSPEEDR = temp;
 8001a2e:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001a30:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a32:	ea27 0c0a 	bic.w	ip, r7, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001a36:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8001a3a:	409f      	lsls	r7, r3
 8001a3c:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->OTYPER = temp;
 8001a40:	6047      	str	r7, [r0, #4]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a42:	f004 0c03 	and.w	ip, r4, #3
 8001a46:	f1bc 0f03 	cmp.w	ip, #3
 8001a4a:	d108      	bne.n	8001a5e <HAL_GPIO_Init+0x86>
        temp = GPIOx->ASCR;
 8001a4c:	6ac7      	ldr	r7, [r0, #44]	; 0x2c
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a4e:	ea27 0a0a 	bic.w	sl, r7, sl
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8001a52:	f3c4 07c0 	ubfx	r7, r4, #3, #1
 8001a56:	409f      	lsls	r7, r3
 8001a58:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->ASCR = temp;
 8001a5c:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8001a5e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001a60:	ea07 0a06 	and.w	sl, r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a64:	688f      	ldr	r7, [r1, #8]
 8001a66:	fa07 f708 	lsl.w	r7, r7, r8
 8001a6a:	ea47 070a 	orr.w	r7, r7, sl
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a6e:	f1be 0f02 	cmp.w	lr, #2
      GPIOx->PUPDR = temp;
 8001a72:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a74:	d116      	bne.n	8001aa4 <HAL_GPIO_Init+0xcc>
        temp = GPIOx->AFR[position >> 3u];
 8001a76:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001a7a:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a7e:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3u];
 8001a82:	f8da 7020 	ldr.w	r7, [sl, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a86:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001a8a:	f04f 0e0f 	mov.w	lr, #15
 8001a8e:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001a92:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a96:	690f      	ldr	r7, [r1, #16]
 8001a98:	fa07 f70b 	lsl.w	r7, r7, fp
 8001a9c:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3u] = temp;
 8001aa0:	f8ca 7020 	str.w	r7, [sl, #32]
      temp = GPIOx->MODER;
 8001aa4:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aa6:	fa0c fc08 	lsl.w	ip, ip, r8
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001aaa:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001aac:	ea4c 0606 	orr.w	r6, ip, r6
      GPIOx->MODER = temp;
 8001ab0:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ab2:	00e6      	lsls	r6, r4, #3
 8001ab4:	d559      	bpl.n	8001b6a <HAL_GPIO_Init+0x192>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ab6:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001aba:	f046 0601 	orr.w	r6, r6, #1
 8001abe:	f8c9 6060 	str.w	r6, [r9, #96]	; 0x60
 8001ac2:	f8d9 6060 	ldr.w	r6, [r9, #96]	; 0x60
 8001ac6:	f023 0703 	bic.w	r7, r3, #3
 8001aca:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001ace:	f006 0601 	and.w	r6, r6, #1
 8001ad2:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8001ad6:	9601      	str	r6, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ad8:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001adc:	9e01      	ldr	r6, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 8001ade:	68be      	ldr	r6, [r7, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001ae0:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8001ae4:	f04f 0c0f 	mov.w	ip, #15
 8001ae8:	fa0c fc0e 	lsl.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aec:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001af0:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001af4:	d03b      	beq.n	8001b6e <HAL_GPIO_Init+0x196>
 8001af6:	4e25      	ldr	r6, [pc, #148]	; (8001b8c <HAL_GPIO_Init+0x1b4>)
 8001af8:	42b0      	cmp	r0, r6
 8001afa:	d03a      	beq.n	8001b72 <HAL_GPIO_Init+0x19a>
 8001afc:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b00:	42b0      	cmp	r0, r6
 8001b02:	d038      	beq.n	8001b76 <HAL_GPIO_Init+0x19e>
 8001b04:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b08:	42b0      	cmp	r0, r6
 8001b0a:	d036      	beq.n	8001b7a <HAL_GPIO_Init+0x1a2>
 8001b0c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b10:	42b0      	cmp	r0, r6
 8001b12:	d034      	beq.n	8001b7e <HAL_GPIO_Init+0x1a6>
 8001b14:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b18:	42b0      	cmp	r0, r6
 8001b1a:	d032      	beq.n	8001b82 <HAL_GPIO_Init+0x1aa>
 8001b1c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8001b20:	42b0      	cmp	r0, r6
 8001b22:	bf0c      	ite	eq
 8001b24:	2606      	moveq	r6, #6
 8001b26:	2607      	movne	r6, #7
 8001b28:	fa06 f60e 	lsl.w	r6, r6, lr
 8001b2c:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001b30:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8001b32:	682e      	ldr	r6, [r5, #0]
        temp &= ~(iocurrent);
 8001b34:	43d7      	mvns	r7, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b36:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~(iocurrent);
 8001b3a:	bf0c      	ite	eq
 8001b3c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b3e:	4316      	orrne	r6, r2
        EXTI->IMR1 = temp;
 8001b40:	602e      	str	r6, [r5, #0]
        temp = EXTI->EMR1;
 8001b42:	686e      	ldr	r6, [r5, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~(iocurrent);
 8001b48:	bf0c      	ite	eq
 8001b4a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b4c:	4316      	orrne	r6, r2
        EXTI->EMR1 = temp;
 8001b4e:	606e      	str	r6, [r5, #4]
        temp = EXTI->RTSR1;
 8001b50:	68ae      	ldr	r6, [r5, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b52:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~(iocurrent);
 8001b56:	bf0c      	ite	eq
 8001b58:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8001b5a:	4316      	orrne	r6, r2
        EXTI->RTSR1 = temp;
 8001b5c:	60ae      	str	r6, [r5, #8]
        temp = EXTI->FTSR1;
 8001b5e:	68ee      	ldr	r6, [r5, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b60:	02a4      	lsls	r4, r4, #10
        temp &= ~(iocurrent);
 8001b62:	bf54      	ite	pl
 8001b64:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8001b66:	4316      	orrmi	r6, r2
        EXTI->FTSR1 = temp;
 8001b68:	60ee      	str	r6, [r5, #12]
    position++;
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	e73a      	b.n	80019e4 <HAL_GPIO_Init+0xc>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b6e:	2600      	movs	r6, #0
 8001b70:	e7da      	b.n	8001b28 <HAL_GPIO_Init+0x150>
 8001b72:	2601      	movs	r6, #1
 8001b74:	e7d8      	b.n	8001b28 <HAL_GPIO_Init+0x150>
 8001b76:	2602      	movs	r6, #2
 8001b78:	e7d6      	b.n	8001b28 <HAL_GPIO_Init+0x150>
 8001b7a:	2603      	movs	r6, #3
 8001b7c:	e7d4      	b.n	8001b28 <HAL_GPIO_Init+0x150>
 8001b7e:	2604      	movs	r6, #4
 8001b80:	e7d2      	b.n	8001b28 <HAL_GPIO_Init+0x150>
 8001b82:	2605      	movs	r6, #5
 8001b84:	e7d0      	b.n	8001b28 <HAL_GPIO_Init+0x150>
 8001b86:	bf00      	nop
 8001b88:	40010400 	.word	0x40010400
 8001b8c:	48000400 	.word	0x48000400
 8001b90:	40021000 	.word	0x40021000

08001b94 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001b94:	6903      	ldr	r3, [r0, #16]
 8001b96:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001b98:	bf14      	ite	ne
 8001b9a:	2001      	movne	r0, #1
 8001b9c:	2000      	moveq	r0, #0
 8001b9e:	4770      	bx	lr

08001ba0 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ba0:	b10a      	cbz	r2, 8001ba6 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ba2:	6181      	str	r1, [r0, #24]
 8001ba4:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ba6:	6281      	str	r1, [r0, #40]	; 0x28
  }
}
 8001ba8:	4770      	bx	lr
	...

08001bac <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bac:	4a04      	ldr	r2, [pc, #16]	; (8001bc0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 8001bae:	6951      	ldr	r1, [r2, #20]
 8001bb0:	4201      	tst	r1, r0
{
 8001bb2:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001bb4:	d002      	beq.n	8001bbc <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001bb6:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001bb8:	f7fe fe34 	bl	8000824 <HAL_GPIO_EXTI_Callback>
  }
}
 8001bbc:	bd08      	pop	{r3, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40010400 	.word	0x40010400

08001bc4 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001bc4:	4b02      	ldr	r3, [pc, #8]	; (8001bd0 <HAL_PWREx_GetVoltageRange+0xc>)
 8001bc6:	6818      	ldr	r0, [r3, #0]
#endif
}
 8001bc8:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	40007000 	.word	0x40007000

08001bd4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001bd4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bd6:	4d1e      	ldr	r5, [pc, #120]	; (8001c50 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001bd8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001bda:	00da      	lsls	r2, r3, #3
{
 8001bdc:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bde:	d518      	bpl.n	8001c12 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001be0:	f7ff fff0 	bl	8001bc4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001be4:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001be8:	d123      	bne.n	8001c32 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001bea:	2c80      	cmp	r4, #128	; 0x80
 8001bec:	d929      	bls.n	8001c42 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001bee:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001bf0:	bf8c      	ite	hi
 8001bf2:	2402      	movhi	r4, #2
 8001bf4:	2401      	movls	r4, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001bf6:	4917      	ldr	r1, [pc, #92]	; (8001c54 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001bf8:	680a      	ldr	r2, [r1, #0]
 8001bfa:	f022 0207 	bic.w	r2, r2, #7
 8001bfe:	4322      	orrs	r2, r4
 8001c00:	600a      	str	r2, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c02:	6808      	ldr	r0, [r1, #0]
 8001c04:	f000 0007 	and.w	r0, r0, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001c08:	1b00      	subs	r0, r0, r4
 8001c0a:	bf18      	it	ne
 8001c0c:	2001      	movne	r0, #1
 8001c0e:	b003      	add	sp, #12
 8001c10:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c12:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c18:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c1a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	9301      	str	r3, [sp, #4]
 8001c22:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 8001c24:	f7ff ffce 	bl	8001bc4 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c28:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001c2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c2e:	65ab      	str	r3, [r5, #88]	; 0x58
 8001c30:	e7d8      	b.n	8001be4 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 8001c32:	2c80      	cmp	r4, #128	; 0x80
 8001c34:	d807      	bhi.n	8001c46 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 8001c36:	d008      	beq.n	8001c4a <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 8001c38:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 8001c3c:	425c      	negs	r4, r3
 8001c3e:	415c      	adcs	r4, r3
 8001c40:	e7d9      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c42:	2400      	movs	r4, #0
 8001c44:	e7d7      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c46:	2403      	movs	r4, #3
 8001c48:	e7d5      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c4a:	2402      	movs	r4, #2
 8001c4c:	e7d3      	b.n	8001bf6 <RCC_SetFlashLatencyFromMSIRange+0x22>
 8001c4e:	bf00      	nop
 8001c50:	40021000 	.word	0x40021000
 8001c54:	40022000 	.word	0x40022000

08001c58 <HAL_RCC_GetSysClockFreq>:
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c58:	4b22      	ldr	r3, [pc, #136]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0x8c>)
 8001c5a:	689a      	ldr	r2, [r3, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5c:	68d9      	ldr	r1, [r3, #12]
  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c5e:	f012 020c 	ands.w	r2, r2, #12
 8001c62:	d005      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x18>
 8001c64:	2a0c      	cmp	r2, #12
 8001c66:	d115      	bne.n	8001c94 <HAL_RCC_GetSysClockFreq+0x3c>
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c68:	f001 0103 	and.w	r1, r1, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c6c:	2901      	cmp	r1, #1
 8001c6e:	d118      	bne.n	8001ca2 <HAL_RCC_GetSysClockFreq+0x4a>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c70:	6819      	ldr	r1, [r3, #0]
    msirange = MSIRangeTable[msirange];
 8001c72:	481d      	ldr	r0, [pc, #116]	; (8001ce8 <HAL_RCC_GetSysClockFreq+0x90>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c74:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c76:	bf55      	itete	pl
 8001c78:	f8d3 1094 	ldrpl.w	r1, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c7c:	6819      	ldrmi	r1, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c7e:	f3c1 2103 	ubfxpl	r1, r1, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c82:	f3c1 1103 	ubfxmi	r1, r1, #4, #4
    msirange = MSIRangeTable[msirange];
 8001c86:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c8a:	b34a      	cbz	r2, 8001ce0 <HAL_RCC_GetSysClockFreq+0x88>
  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c8c:	2a0c      	cmp	r2, #12
 8001c8e:	d009      	beq.n	8001ca4 <HAL_RCC_GetSysClockFreq+0x4c>
 8001c90:	2000      	movs	r0, #0
  return sysclockfreq;
 8001c92:	4770      	bx	lr
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c94:	2a04      	cmp	r2, #4
 8001c96:	d022      	beq.n	8001cde <HAL_RCC_GetSysClockFreq+0x86>
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c98:	2a08      	cmp	r2, #8
 8001c9a:	4814      	ldr	r0, [pc, #80]	; (8001cec <HAL_RCC_GetSysClockFreq+0x94>)
 8001c9c:	bf18      	it	ne
 8001c9e:	2000      	movne	r0, #0
 8001ca0:	4770      	bx	lr
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ca2:	2000      	movs	r0, #0
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ca4:	68da      	ldr	r2, [r3, #12]
 8001ca6:	f002 0203 	and.w	r2, r2, #3
    switch (pllsource)
 8001caa:	2a02      	cmp	r2, #2
 8001cac:	d015      	beq.n	8001cda <HAL_RCC_GetSysClockFreq+0x82>
 8001cae:	490f      	ldr	r1, [pc, #60]	; (8001cec <HAL_RCC_GetSysClockFreq+0x94>)
 8001cb0:	2a03      	cmp	r2, #3
 8001cb2:	bf08      	it	eq
 8001cb4:	4608      	moveq	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cb6:	68da      	ldr	r2, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cb8:	68d9      	ldr	r1, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	f3c3 6341 	ubfx	r3, r3, #25, #2
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cc0:	f3c1 2106 	ubfx	r1, r1, #8, #7
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001cc4:	f3c2 1202 	ubfx	r2, r2, #4, #3
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cc8:	3301      	adds	r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cca:	4348      	muls	r0, r1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ccc:	3201      	adds	r2, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001cce:	005b      	lsls	r3, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001cd0:	fbb0 f0f2 	udiv	r0, r0, r2
    sysclockfreq = pllvco / pllr;
 8001cd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8001cd8:	4770      	bx	lr
      pllvco = HSI_VALUE;
 8001cda:	4805      	ldr	r0, [pc, #20]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cdc:	e7eb      	b.n	8001cb6 <HAL_RCC_GetSysClockFreq+0x5e>
    sysclockfreq = HSI_VALUE;
 8001cde:	4804      	ldr	r0, [pc, #16]	; (8001cf0 <HAL_RCC_GetSysClockFreq+0x98>)
}
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	08005048 	.word	0x08005048
 8001cec:	007a1200 	.word	0x007a1200
 8001cf0:	00f42400 	.word	0x00f42400

08001cf4 <HAL_RCC_OscConfig>:
{
 8001cf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8001cf8:	4605      	mov	r5, r0
 8001cfa:	b918      	cbnz	r0, 8001d04 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
 8001cfc:	2001      	movs	r0, #1
}
 8001cfe:	b003      	add	sp, #12
 8001d00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d04:	4ca7      	ldr	r4, [pc, #668]	; (8001fa4 <HAL_RCC_OscConfig+0x2b0>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d06:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d08:	68a6      	ldr	r6, [r4, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d0a:	68e7      	ldr	r7, [r4, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d0c:	06d8      	lsls	r0, r3, #27
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d0e:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d12:	f007 0703 	and.w	r7, r7, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001d16:	d53d      	bpl.n	8001d94 <HAL_RCC_OscConfig+0xa0>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d18:	b11e      	cbz	r6, 8001d22 <HAL_RCC_OscConfig+0x2e>
 8001d1a:	2e0c      	cmp	r6, #12
 8001d1c:	d166      	bne.n	8001dec <HAL_RCC_OscConfig+0xf8>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001d1e:	2f01      	cmp	r7, #1
 8001d20:	d164      	bne.n	8001dec <HAL_RCC_OscConfig+0xf8>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d22:	6823      	ldr	r3, [r4, #0]
 8001d24:	0799      	lsls	r1, r3, #30
 8001d26:	d502      	bpl.n	8001d2e <HAL_RCC_OscConfig+0x3a>
 8001d28:	69ab      	ldr	r3, [r5, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0e6      	beq.n	8001cfc <HAL_RCC_OscConfig+0x8>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001d2e:	6823      	ldr	r3, [r4, #0]
 8001d30:	6a28      	ldr	r0, [r5, #32]
 8001d32:	071a      	lsls	r2, r3, #28
 8001d34:	bf56      	itet	pl
 8001d36:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 8001d3a:	6823      	ldrmi	r3, [r4, #0]
 8001d3c:	091b      	lsrpl	r3, r3, #4
 8001d3e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d42:	4298      	cmp	r0, r3
 8001d44:	d93b      	bls.n	8001dbe <HAL_RCC_OscConfig+0xca>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d46:	f7ff ff45 	bl	8001bd4 <RCC_SetFlashLatencyFromMSIRange>
 8001d4a:	2800      	cmp	r0, #0
 8001d4c:	d1d6      	bne.n	8001cfc <HAL_RCC_OscConfig+0x8>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d4e:	6823      	ldr	r3, [r4, #0]
 8001d50:	f043 0308 	orr.w	r3, r3, #8
 8001d54:	6023      	str	r3, [r4, #0]
 8001d56:	6823      	ldr	r3, [r4, #0]
 8001d58:	6a2a      	ldr	r2, [r5, #32]
 8001d5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d62:	6863      	ldr	r3, [r4, #4]
 8001d64:	69ea      	ldr	r2, [r5, #28]
 8001d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001d6a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001d6e:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d70:	f7ff ff72 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8001d74:	68a3      	ldr	r3, [r4, #8]
 8001d76:	4a8c      	ldr	r2, [pc, #560]	; (8001fa8 <HAL_RCC_OscConfig+0x2b4>)
 8001d78:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001d7c:	5cd3      	ldrb	r3, [r2, r3]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	40d8      	lsrs	r0, r3
 8001d84:	4b89      	ldr	r3, [pc, #548]	; (8001fac <HAL_RCC_OscConfig+0x2b8>)
 8001d86:	6018      	str	r0, [r3, #0]
        status = HAL_InitTick(uwTickPrio);
 8001d88:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_RCC_OscConfig+0x2bc>)
 8001d8a:	6818      	ldr	r0, [r3, #0]
 8001d8c:	f7ff fd3c 	bl	8001808 <HAL_InitTick>
        if(status != HAL_OK)
 8001d90:	2800      	cmp	r0, #0
 8001d92:	d1b4      	bne.n	8001cfe <HAL_RCC_OscConfig+0xa>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d94:	682b      	ldr	r3, [r5, #0]
 8001d96:	07d9      	lsls	r1, r3, #31
 8001d98:	d45f      	bmi.n	8001e5a <HAL_RCC_OscConfig+0x166>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d9a:	682b      	ldr	r3, [r5, #0]
 8001d9c:	079a      	lsls	r2, r3, #30
 8001d9e:	f100 809e 	bmi.w	8001ede <HAL_RCC_OscConfig+0x1ea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001da2:	682b      	ldr	r3, [r5, #0]
 8001da4:	0719      	lsls	r1, r3, #28
 8001da6:	f100 80d2 	bmi.w	8001f4e <HAL_RCC_OscConfig+0x25a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001daa:	682b      	ldr	r3, [r5, #0]
 8001dac:	075a      	lsls	r2, r3, #29
 8001dae:	f100 8101 	bmi.w	8001fb4 <HAL_RCC_OscConfig+0x2c0>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001db2:	6aab      	ldr	r3, [r5, #40]	; 0x28
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	f040 816a 	bne.w	800208e <HAL_RCC_OscConfig+0x39a>
  return HAL_OK;
 8001dba:	2000      	movs	r0, #0
 8001dbc:	e79f      	b.n	8001cfe <HAL_RCC_OscConfig+0xa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dbe:	6823      	ldr	r3, [r4, #0]
 8001dc0:	f043 0308 	orr.w	r3, r3, #8
 8001dc4:	6023      	str	r3, [r4, #0]
 8001dc6:	6823      	ldr	r3, [r4, #0]
 8001dc8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001dcc:	4303      	orrs	r3, r0
 8001dce:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd0:	6863      	ldr	r3, [r4, #4]
 8001dd2:	69ea      	ldr	r2, [r5, #28]
 8001dd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001dd8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001ddc:	6063      	str	r3, [r4, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dde:	2e00      	cmp	r6, #0
 8001de0:	d1c6      	bne.n	8001d70 <HAL_RCC_OscConfig+0x7c>
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001de2:	f7ff fef7 	bl	8001bd4 <RCC_SetFlashLatencyFromMSIRange>
 8001de6:	2800      	cmp	r0, #0
 8001de8:	d0c2      	beq.n	8001d70 <HAL_RCC_OscConfig+0x7c>
 8001dea:	e787      	b.n	8001cfc <HAL_RCC_OscConfig+0x8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001dec:	69ab      	ldr	r3, [r5, #24]
 8001dee:	b31b      	cbz	r3, 8001e38 <HAL_RCC_OscConfig+0x144>
        __HAL_RCC_MSI_ENABLE();
 8001df0:	6823      	ldr	r3, [r4, #0]
 8001df2:	f043 0301 	orr.w	r3, r3, #1
 8001df6:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001df8:	f7ff fd46 	bl	8001888 <HAL_GetTick>
 8001dfc:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	079b      	lsls	r3, r3, #30
 8001e02:	d511      	bpl.n	8001e28 <HAL_RCC_OscConfig+0x134>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001e04:	6823      	ldr	r3, [r4, #0]
 8001e06:	f043 0308 	orr.w	r3, r3, #8
 8001e0a:	6023      	str	r3, [r4, #0]
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	6a2a      	ldr	r2, [r5, #32]
 8001e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001e14:	4313      	orrs	r3, r2
 8001e16:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001e18:	6863      	ldr	r3, [r4, #4]
 8001e1a:	69ea      	ldr	r2, [r5, #28]
 8001e1c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e20:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001e24:	6063      	str	r3, [r4, #4]
 8001e26:	e7b5      	b.n	8001d94 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e28:	f7ff fd2e 	bl	8001888 <HAL_GetTick>
 8001e2c:	eba0 0008 	sub.w	r0, r0, r8
 8001e30:	2802      	cmp	r0, #2
 8001e32:	d9e4      	bls.n	8001dfe <HAL_RCC_OscConfig+0x10a>
            return HAL_TIMEOUT;
 8001e34:	2003      	movs	r0, #3
 8001e36:	e762      	b.n	8001cfe <HAL_RCC_OscConfig+0xa>
        __HAL_RCC_MSI_DISABLE();
 8001e38:	6823      	ldr	r3, [r4, #0]
 8001e3a:	f023 0301 	bic.w	r3, r3, #1
 8001e3e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e40:	f7ff fd22 	bl	8001888 <HAL_GetTick>
 8001e44:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e46:	6823      	ldr	r3, [r4, #0]
 8001e48:	0798      	lsls	r0, r3, #30
 8001e4a:	d5a3      	bpl.n	8001d94 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fd1c 	bl	8001888 <HAL_GetTick>
 8001e50:	eba0 0008 	sub.w	r0, r0, r8
 8001e54:	2802      	cmp	r0, #2
 8001e56:	d9f6      	bls.n	8001e46 <HAL_RCC_OscConfig+0x152>
 8001e58:	e7ec      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e5a:	2e08      	cmp	r6, #8
 8001e5c:	d003      	beq.n	8001e66 <HAL_RCC_OscConfig+0x172>
 8001e5e:	2e0c      	cmp	r6, #12
 8001e60:	d108      	bne.n	8001e74 <HAL_RCC_OscConfig+0x180>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e62:	2f03      	cmp	r7, #3
 8001e64:	d106      	bne.n	8001e74 <HAL_RCC_OscConfig+0x180>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e66:	6823      	ldr	r3, [r4, #0]
 8001e68:	039b      	lsls	r3, r3, #14
 8001e6a:	d596      	bpl.n	8001d9a <HAL_RCC_OscConfig+0xa6>
 8001e6c:	686b      	ldr	r3, [r5, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d193      	bne.n	8001d9a <HAL_RCC_OscConfig+0xa6>
 8001e72:	e743      	b.n	8001cfc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e74:	686b      	ldr	r3, [r5, #4]
 8001e76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e7a:	d110      	bne.n	8001e9e <HAL_RCC_OscConfig+0x1aa>
 8001e7c:	6823      	ldr	r3, [r4, #0]
 8001e7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e82:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001e84:	f7ff fd00 	bl	8001888 <HAL_GetTick>
 8001e88:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	0398      	lsls	r0, r3, #14
 8001e8e:	d484      	bmi.n	8001d9a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e90:	f7ff fcfa 	bl	8001888 <HAL_GetTick>
 8001e94:	eba0 0008 	sub.w	r0, r0, r8
 8001e98:	2864      	cmp	r0, #100	; 0x64
 8001e9a:	d9f6      	bls.n	8001e8a <HAL_RCC_OscConfig+0x196>
 8001e9c:	e7ca      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ea2:	d104      	bne.n	8001eae <HAL_RCC_OscConfig+0x1ba>
 8001ea4:	6823      	ldr	r3, [r4, #0]
 8001ea6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eaa:	6023      	str	r3, [r4, #0]
 8001eac:	e7e6      	b.n	8001e7c <HAL_RCC_OscConfig+0x188>
 8001eae:	6822      	ldr	r2, [r4, #0]
 8001eb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eb4:	6022      	str	r2, [r4, #0]
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001ebc:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d1e0      	bne.n	8001e84 <HAL_RCC_OscConfig+0x190>
        tickstart = HAL_GetTick();
 8001ec2:	f7ff fce1 	bl	8001888 <HAL_GetTick>
 8001ec6:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec8:	6823      	ldr	r3, [r4, #0]
 8001eca:	0399      	lsls	r1, r3, #14
 8001ecc:	f57f af65 	bpl.w	8001d9a <HAL_RCC_OscConfig+0xa6>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed0:	f7ff fcda 	bl	8001888 <HAL_GetTick>
 8001ed4:	eba0 0008 	sub.w	r0, r0, r8
 8001ed8:	2864      	cmp	r0, #100	; 0x64
 8001eda:	d9f5      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x1d4>
 8001edc:	e7aa      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ede:	2e04      	cmp	r6, #4
 8001ee0:	d003      	beq.n	8001eea <HAL_RCC_OscConfig+0x1f6>
 8001ee2:	2e0c      	cmp	r6, #12
 8001ee4:	d110      	bne.n	8001f08 <HAL_RCC_OscConfig+0x214>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001ee6:	2f02      	cmp	r7, #2
 8001ee8:	d10e      	bne.n	8001f08 <HAL_RCC_OscConfig+0x214>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001eea:	6823      	ldr	r3, [r4, #0]
 8001eec:	055a      	lsls	r2, r3, #21
 8001eee:	d503      	bpl.n	8001ef8 <HAL_RCC_OscConfig+0x204>
 8001ef0:	68eb      	ldr	r3, [r5, #12]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f43f af02 	beq.w	8001cfc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef8:	6863      	ldr	r3, [r4, #4]
 8001efa:	692a      	ldr	r2, [r5, #16]
 8001efc:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8001f00:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8001f04:	6063      	str	r3, [r4, #4]
 8001f06:	e74c      	b.n	8001da2 <HAL_RCC_OscConfig+0xae>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f08:	68eb      	ldr	r3, [r5, #12]
 8001f0a:	b17b      	cbz	r3, 8001f2c <HAL_RCC_OscConfig+0x238>
        __HAL_RCC_HSI_ENABLE();
 8001f0c:	6823      	ldr	r3, [r4, #0]
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f14:	f7ff fcb8 	bl	8001888 <HAL_GetTick>
 8001f18:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f1a:	6823      	ldr	r3, [r4, #0]
 8001f1c:	055b      	lsls	r3, r3, #21
 8001f1e:	d4eb      	bmi.n	8001ef8 <HAL_RCC_OscConfig+0x204>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f20:	f7ff fcb2 	bl	8001888 <HAL_GetTick>
 8001f24:	1bc0      	subs	r0, r0, r7
 8001f26:	2802      	cmp	r0, #2
 8001f28:	d9f7      	bls.n	8001f1a <HAL_RCC_OscConfig+0x226>
 8001f2a:	e783      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
        __HAL_RCC_HSI_DISABLE();
 8001f2c:	6823      	ldr	r3, [r4, #0]
 8001f2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f32:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001f34:	f7ff fca8 	bl	8001888 <HAL_GetTick>
 8001f38:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f3a:	6823      	ldr	r3, [r4, #0]
 8001f3c:	0558      	lsls	r0, r3, #21
 8001f3e:	f57f af30 	bpl.w	8001da2 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f42:	f7ff fca1 	bl	8001888 <HAL_GetTick>
 8001f46:	1bc0      	subs	r0, r0, r7
 8001f48:	2802      	cmp	r0, #2
 8001f4a:	d9f6      	bls.n	8001f3a <HAL_RCC_OscConfig+0x246>
 8001f4c:	e772      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f4e:	696b      	ldr	r3, [r5, #20]
 8001f50:	b19b      	cbz	r3, 8001f7a <HAL_RCC_OscConfig+0x286>
      __HAL_RCC_LSI_ENABLE();
 8001f52:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f56:	f043 0301 	orr.w	r3, r3, #1
 8001f5a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f5e:	f7ff fc93 	bl	8001888 <HAL_GetTick>
 8001f62:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f64:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f68:	079b      	lsls	r3, r3, #30
 8001f6a:	f53f af1e 	bmi.w	8001daa <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6e:	f7ff fc8b 	bl	8001888 <HAL_GetTick>
 8001f72:	1bc0      	subs	r0, r0, r7
 8001f74:	2802      	cmp	r0, #2
 8001f76:	d9f5      	bls.n	8001f64 <HAL_RCC_OscConfig+0x270>
 8001f78:	e75c      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
      __HAL_RCC_LSI_DISABLE();
 8001f7a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001f86:	f7ff fc7f 	bl	8001888 <HAL_GetTick>
 8001f8a:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f8c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001f90:	0798      	lsls	r0, r3, #30
 8001f92:	f57f af0a 	bpl.w	8001daa <HAL_RCC_OscConfig+0xb6>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f96:	f7ff fc77 	bl	8001888 <HAL_GetTick>
 8001f9a:	1bc0      	subs	r0, r0, r7
 8001f9c:	2802      	cmp	r0, #2
 8001f9e:	d9f5      	bls.n	8001f8c <HAL_RCC_OscConfig+0x298>
 8001fa0:	e748      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
 8001fa2:	bf00      	nop
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	08005078 	.word	0x08005078
 8001fac:	20000018 	.word	0x20000018
 8001fb0:	20000020 	.word	0x20000020
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fb6:	00d9      	lsls	r1, r3, #3
 8001fb8:	d429      	bmi.n	800200e <HAL_RCC_OscConfig+0x31a>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fba:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	65a3      	str	r3, [r4, #88]	; 0x58
 8001fc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	9301      	str	r3, [sp, #4]
 8001fca:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001fcc:	f04f 0801 	mov.w	r8, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fd0:	4f89      	ldr	r7, [pc, #548]	; (80021f8 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	05da      	lsls	r2, r3, #23
 8001fd6:	d51d      	bpl.n	8002014 <HAL_RCC_OscConfig+0x320>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fd8:	68ab      	ldr	r3, [r5, #8]
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d12b      	bne.n	8002036 <HAL_RCC_OscConfig+0x342>
 8001fde:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001fe2:	f043 0301 	orr.w	r3, r3, #1
 8001fe6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 8001fea:	f7ff fc4d 	bl	8001888 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fee:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001ff2:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff4:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8001ff8:	0798      	lsls	r0, r3, #30
 8001ffa:	d542      	bpl.n	8002082 <HAL_RCC_OscConfig+0x38e>
    if(pwrclkchanged == SET)
 8001ffc:	f1b8 0f00 	cmp.w	r8, #0
 8002000:	f43f aed7 	beq.w	8001db2 <HAL_RCC_OscConfig+0xbe>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002004:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8002006:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200a:	65a3      	str	r3, [r4, #88]	; 0x58
 800200c:	e6d1      	b.n	8001db2 <HAL_RCC_OscConfig+0xbe>
    FlagStatus       pwrclkchanged = RESET;
 800200e:	f04f 0800 	mov.w	r8, #0
 8002012:	e7dd      	b.n	8001fd0 <HAL_RCC_OscConfig+0x2dc>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800201a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800201c:	f7ff fc34 	bl	8001888 <HAL_GetTick>
 8002020:	4681      	mov	r9, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	05db      	lsls	r3, r3, #23
 8002026:	d4d7      	bmi.n	8001fd8 <HAL_RCC_OscConfig+0x2e4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002028:	f7ff fc2e 	bl	8001888 <HAL_GetTick>
 800202c:	eba0 0009 	sub.w	r0, r0, r9
 8002030:	2802      	cmp	r0, #2
 8002032:	d9f6      	bls.n	8002022 <HAL_RCC_OscConfig+0x32e>
 8002034:	e6fe      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002036:	2b05      	cmp	r3, #5
 8002038:	d106      	bne.n	8002048 <HAL_RCC_OscConfig+0x354>
 800203a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800203e:	f043 0304 	orr.w	r3, r3, #4
 8002042:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 8002046:	e7ca      	b.n	8001fde <HAL_RCC_OscConfig+0x2ea>
 8002048:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 800204c:	f022 0201 	bic.w	r2, r2, #1
 8002050:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 8002054:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8002058:	f022 0204 	bic.w	r2, r2, #4
 800205c:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1c2      	bne.n	8001fea <HAL_RCC_OscConfig+0x2f6>
      tickstart = HAL_GetTick();
 8002064:	f7ff fc10 	bl	8001888 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002068:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800206c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800206e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 8002072:	0799      	lsls	r1, r3, #30
 8002074:	d5c2      	bpl.n	8001ffc <HAL_RCC_OscConfig+0x308>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002076:	f7ff fc07 	bl	8001888 <HAL_GetTick>
 800207a:	1bc0      	subs	r0, r0, r7
 800207c:	4548      	cmp	r0, r9
 800207e:	d9f6      	bls.n	800206e <HAL_RCC_OscConfig+0x37a>
 8002080:	e6d8      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002082:	f7ff fc01 	bl	8001888 <HAL_GetTick>
 8002086:	1bc0      	subs	r0, r0, r7
 8002088:	4548      	cmp	r0, r9
 800208a:	d9b3      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x300>
 800208c:	e6d2      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800208e:	2b02      	cmp	r3, #2
 8002090:	f040 808f 	bne.w	80021b2 <HAL_RCC_OscConfig+0x4be>
      pll_config = RCC->PLLCFGR;
 8002094:	68e3      	ldr	r3, [r4, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002096:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 8002098:	f003 0103 	and.w	r1, r3, #3
 800209c:	4291      	cmp	r1, r2
 800209e:	d124      	bne.n	80020ea <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020a0:	6b29      	ldr	r1, [r5, #48]	; 0x30
 80020a2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80020a6:	3901      	subs	r1, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020a8:	ebb2 1f01 	cmp.w	r2, r1, lsl #4
 80020ac:	d11d      	bne.n	80020ea <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020ae:	6b69      	ldr	r1, [r5, #52]	; 0x34
 80020b0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80020b4:	ebb2 2f01 	cmp.w	r2, r1, lsl #8
 80020b8:	d117      	bne.n	80020ea <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020ba:	6baa      	ldr	r2, [r5, #56]	; 0x38
 80020bc:	3a07      	subs	r2, #7
 80020be:	f403 3100 	and.w	r1, r3, #131072	; 0x20000
 80020c2:	bf18      	it	ne
 80020c4:	2201      	movne	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80020c6:	4291      	cmp	r1, r2
 80020c8:	d10f      	bne.n	80020ea <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020ca:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80020cc:	0852      	lsrs	r2, r2, #1
 80020ce:	f403 01c0 	and.w	r1, r3, #6291456	; 0x600000
 80020d2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80020d4:	ebb1 5f42 	cmp.w	r1, r2, lsl #21
 80020d8:	d107      	bne.n	80020ea <HAL_RCC_OscConfig+0x3f6>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80020da:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80020dc:	0852      	lsrs	r2, r2, #1
 80020de:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80020e2:	3a01      	subs	r2, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80020e4:	ebb3 6f42 	cmp.w	r3, r2, lsl #25
 80020e8:	d04a      	beq.n	8002180 <HAL_RCC_OscConfig+0x48c>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80020ea:	2e0c      	cmp	r6, #12
 80020ec:	f43f ae06 	beq.w	8001cfc <HAL_RCC_OscConfig+0x8>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80020f0:	6823      	ldr	r3, [r4, #0]
 80020f2:	015a      	lsls	r2, r3, #5
 80020f4:	f53f ae02 	bmi.w	8001cfc <HAL_RCC_OscConfig+0x8>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80020f8:	6823      	ldr	r3, [r4, #0]
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	f53f adfe 	bmi.w	8001cfc <HAL_RCC_OscConfig+0x8>
            __HAL_RCC_PLL_DISABLE();
 8002100:	6823      	ldr	r3, [r4, #0]
 8002102:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002106:	6023      	str	r3, [r4, #0]
            tickstart = HAL_GetTick();
 8002108:	f7ff fbbe 	bl	8001888 <HAL_GetTick>
 800210c:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800210e:	6823      	ldr	r3, [r4, #0]
 8002110:	019f      	lsls	r7, r3, #6
 8002112:	d42f      	bmi.n	8002174 <HAL_RCC_OscConfig+0x480>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002114:	68e2      	ldr	r2, [r4, #12]
 8002116:	4b39      	ldr	r3, [pc, #228]	; (80021fc <HAL_RCC_OscConfig+0x508>)
 8002118:	4013      	ands	r3, r2
 800211a:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 800211c:	4313      	orrs	r3, r2
 800211e:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8002120:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002124:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 8002126:	3a01      	subs	r2, #1
 8002128:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800212c:	6baa      	ldr	r2, [r5, #56]	; 0x38
 800212e:	0912      	lsrs	r2, r2, #4
 8002130:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8002134:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 8002136:	0852      	lsrs	r2, r2, #1
 8002138:	3a01      	subs	r2, #1
 800213a:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 800213e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8002140:	0852      	lsrs	r2, r2, #1
 8002142:	3a01      	subs	r2, #1
 8002144:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 8002148:	60e3      	str	r3, [r4, #12]
            __HAL_RCC_PLL_ENABLE();
 800214a:	6823      	ldr	r3, [r4, #0]
 800214c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002150:	6023      	str	r3, [r4, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002152:	68e3      	ldr	r3, [r4, #12]
 8002154:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002158:	60e3      	str	r3, [r4, #12]
            tickstart = HAL_GetTick();
 800215a:	f7ff fb95 	bl	8001888 <HAL_GetTick>
 800215e:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	0198      	lsls	r0, r3, #6
 8002164:	f53f ae29 	bmi.w	8001dba <HAL_RCC_OscConfig+0xc6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002168:	f7ff fb8e 	bl	8001888 <HAL_GetTick>
 800216c:	1b40      	subs	r0, r0, r5
 800216e:	2802      	cmp	r0, #2
 8002170:	d9f6      	bls.n	8002160 <HAL_RCC_OscConfig+0x46c>
 8002172:	e65f      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002174:	f7ff fb88 	bl	8001888 <HAL_GetTick>
 8002178:	1b80      	subs	r0, r0, r6
 800217a:	2802      	cmp	r0, #2
 800217c:	d9c7      	bls.n	800210e <HAL_RCC_OscConfig+0x41a>
 800217e:	e659      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002180:	6823      	ldr	r3, [r4, #0]
 8002182:	0199      	lsls	r1, r3, #6
 8002184:	f53f ae19 	bmi.w	8001dba <HAL_RCC_OscConfig+0xc6>
          __HAL_RCC_PLL_ENABLE();
 8002188:	6823      	ldr	r3, [r4, #0]
 800218a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800218e:	6023      	str	r3, [r4, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002190:	68e3      	ldr	r3, [r4, #12]
 8002192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002196:	60e3      	str	r3, [r4, #12]
          tickstart = HAL_GetTick();
 8002198:	f7ff fb76 	bl	8001888 <HAL_GetTick>
 800219c:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800219e:	6823      	ldr	r3, [r4, #0]
 80021a0:	019a      	lsls	r2, r3, #6
 80021a2:	f53f ae0a 	bmi.w	8001dba <HAL_RCC_OscConfig+0xc6>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a6:	f7ff fb6f 	bl	8001888 <HAL_GetTick>
 80021aa:	1b40      	subs	r0, r0, r5
 80021ac:	2802      	cmp	r0, #2
 80021ae:	d9f6      	bls.n	800219e <HAL_RCC_OscConfig+0x4aa>
 80021b0:	e640      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80021b2:	2e0c      	cmp	r6, #12
 80021b4:	f43f ada2 	beq.w	8001cfc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_PLL_DISABLE();
 80021b8:	6823      	ldr	r3, [r4, #0]
 80021ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021be:	6023      	str	r3, [r4, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80021c0:	6823      	ldr	r3, [r4, #0]
 80021c2:	f013 5f20 	tst.w	r3, #671088640	; 0x28000000
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80021c6:	bf02      	ittt	eq
 80021c8:	68e3      	ldreq	r3, [r4, #12]
 80021ca:	f023 0303 	biceq.w	r3, r3, #3
 80021ce:	60e3      	streq	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80021d0:	68e3      	ldr	r3, [r4, #12]
 80021d2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80021d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021da:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80021dc:	f7ff fb54 	bl	8001888 <HAL_GetTick>
 80021e0:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021e2:	6823      	ldr	r3, [r4, #0]
 80021e4:	019b      	lsls	r3, r3, #6
 80021e6:	f57f ade8 	bpl.w	8001dba <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ea:	f7ff fb4d 	bl	8001888 <HAL_GetTick>
 80021ee:	1b40      	subs	r0, r0, r5
 80021f0:	2802      	cmp	r0, #2
 80021f2:	d9f6      	bls.n	80021e2 <HAL_RCC_OscConfig+0x4ee>
 80021f4:	e61e      	b.n	8001e34 <HAL_RCC_OscConfig+0x140>
 80021f6:	bf00      	nop
 80021f8:	40007000 	.word	0x40007000
 80021fc:	f99d808c 	.word	0xf99d808c

08002200 <HAL_RCC_ClockConfig>:
{
 8002200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002204:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002206:	4604      	mov	r4, r0
 8002208:	b910      	cbnz	r0, 8002210 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800220a:	2001      	movs	r0, #1
}
 800220c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002210:	4a40      	ldr	r2, [pc, #256]	; (8002314 <HAL_RCC_ClockConfig+0x114>)
 8002212:	6813      	ldr	r3, [r2, #0]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	428b      	cmp	r3, r1
 800221a:	d32a      	bcc.n	8002272 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800221c:	6823      	ldr	r3, [r4, #0]
 800221e:	07d9      	lsls	r1, r3, #31
 8002220:	d432      	bmi.n	8002288 <HAL_RCC_ClockConfig+0x88>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002222:	6821      	ldr	r1, [r4, #0]
 8002224:	078a      	lsls	r2, r1, #30
 8002226:	d45b      	bmi.n	80022e0 <HAL_RCC_ClockConfig+0xe0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002228:	4a3a      	ldr	r2, [pc, #232]	; (8002314 <HAL_RCC_ClockConfig+0x114>)
 800222a:	6813      	ldr	r3, [r2, #0]
 800222c:	f003 0307 	and.w	r3, r3, #7
 8002230:	42ab      	cmp	r3, r5
 8002232:	d85d      	bhi.n	80022f0 <HAL_RCC_ClockConfig+0xf0>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002234:	f011 0f04 	tst.w	r1, #4
 8002238:	4d37      	ldr	r5, [pc, #220]	; (8002318 <HAL_RCC_ClockConfig+0x118>)
 800223a:	d164      	bne.n	8002306 <HAL_RCC_ClockConfig+0x106>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	070b      	lsls	r3, r1, #28
 800223e:	d506      	bpl.n	800224e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002240:	68ab      	ldr	r3, [r5, #8]
 8002242:	6922      	ldr	r2, [r4, #16]
 8002244:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002248:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800224c:	60ab      	str	r3, [r5, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800224e:	f7ff fd03 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
 8002252:	68ab      	ldr	r3, [r5, #8]
 8002254:	4a31      	ldr	r2, [pc, #196]	; (800231c <HAL_RCC_ClockConfig+0x11c>)
 8002256:	f3c3 1303 	ubfx	r3, r3, #4, #4
}
 800225a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800225e:	5cd3      	ldrb	r3, [r2, r3]
 8002260:	f003 031f 	and.w	r3, r3, #31
 8002264:	40d8      	lsrs	r0, r3
 8002266:	4b2e      	ldr	r3, [pc, #184]	; (8002320 <HAL_RCC_ClockConfig+0x120>)
 8002268:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 800226a:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <HAL_RCC_ClockConfig+0x124>)
 800226c:	6818      	ldr	r0, [r3, #0]
 800226e:	f7ff bacb 	b.w	8001808 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002272:	6813      	ldr	r3, [r2, #0]
 8002274:	f023 0307 	bic.w	r3, r3, #7
 8002278:	430b      	orrs	r3, r1
 800227a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800227c:	6813      	ldr	r3, [r2, #0]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	428b      	cmp	r3, r1
 8002284:	d1c1      	bne.n	800220a <HAL_RCC_ClockConfig+0xa>
 8002286:	e7c9      	b.n	800221c <HAL_RCC_ClockConfig+0x1c>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002288:	6862      	ldr	r2, [r4, #4]
 800228a:	4e23      	ldr	r6, [pc, #140]	; (8002318 <HAL_RCC_ClockConfig+0x118>)
 800228c:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002290:	d11a      	bne.n	80022c8 <HAL_RCC_ClockConfig+0xc8>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002292:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002296:	d0b8      	beq.n	800220a <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002298:	68b3      	ldr	r3, [r6, #8]
 800229a:	f023 0303 	bic.w	r3, r3, #3
 800229e:	4313      	orrs	r3, r2
 80022a0:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80022a2:	f7ff faf1 	bl	8001888 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a6:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80022aa:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ac:	68b3      	ldr	r3, [r6, #8]
 80022ae:	6862      	ldr	r2, [r4, #4]
 80022b0:	f003 030c 	and.w	r3, r3, #12
 80022b4:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80022b8:	d0b3      	beq.n	8002222 <HAL_RCC_ClockConfig+0x22>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022ba:	f7ff fae5 	bl	8001888 <HAL_GetTick>
 80022be:	1bc0      	subs	r0, r0, r7
 80022c0:	4540      	cmp	r0, r8
 80022c2:	d9f3      	bls.n	80022ac <HAL_RCC_ClockConfig+0xac>
        return HAL_TIMEOUT;
 80022c4:	2003      	movs	r0, #3
 80022c6:	e7a1      	b.n	800220c <HAL_RCC_ClockConfig+0xc>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022c8:	2a02      	cmp	r2, #2
 80022ca:	d102      	bne.n	80022d2 <HAL_RCC_ClockConfig+0xd2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022cc:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 80022d0:	e7e1      	b.n	8002296 <HAL_RCC_ClockConfig+0x96>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80022d2:	b912      	cbnz	r2, 80022da <HAL_RCC_ClockConfig+0xda>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022d4:	f013 0f02 	tst.w	r3, #2
 80022d8:	e7dd      	b.n	8002296 <HAL_RCC_ClockConfig+0x96>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80022da:	f413 6f80 	tst.w	r3, #1024	; 0x400
 80022de:	e7da      	b.n	8002296 <HAL_RCC_ClockConfig+0x96>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022e0:	4a0d      	ldr	r2, [pc, #52]	; (8002318 <HAL_RCC_ClockConfig+0x118>)
 80022e2:	68a0      	ldr	r0, [r4, #8]
 80022e4:	6893      	ldr	r3, [r2, #8]
 80022e6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022ea:	4303      	orrs	r3, r0
 80022ec:	6093      	str	r3, [r2, #8]
 80022ee:	e79b      	b.n	8002228 <HAL_RCC_ClockConfig+0x28>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022f0:	6813      	ldr	r3, [r2, #0]
 80022f2:	f023 0307 	bic.w	r3, r3, #7
 80022f6:	432b      	orrs	r3, r5
 80022f8:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80022fa:	6813      	ldr	r3, [r2, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	42ab      	cmp	r3, r5
 8002302:	d182      	bne.n	800220a <HAL_RCC_ClockConfig+0xa>
 8002304:	e796      	b.n	8002234 <HAL_RCC_ClockConfig+0x34>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002306:	68ab      	ldr	r3, [r5, #8]
 8002308:	68e2      	ldr	r2, [r4, #12]
 800230a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800230e:	4313      	orrs	r3, r2
 8002310:	60ab      	str	r3, [r5, #8]
 8002312:	e793      	b.n	800223c <HAL_RCC_ClockConfig+0x3c>
 8002314:	40022000 	.word	0x40022000
 8002318:	40021000 	.word	0x40021000
 800231c:	08005078 	.word	0x08005078
 8002320:	20000018 	.word	0x20000018
 8002324:	20000020 	.word	0x20000020

08002328 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002328:	4b05      	ldr	r3, [pc, #20]	; (8002340 <HAL_RCC_GetPCLK1Freq+0x18>)
 800232a:	4a06      	ldr	r2, [pc, #24]	; (8002344 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002332:	5cd3      	ldrb	r3, [r2, r3]
 8002334:	4a04      	ldr	r2, [pc, #16]	; (8002348 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002336:	6810      	ldr	r0, [r2, #0]
 8002338:	f003 031f 	and.w	r3, r3, #31
}
 800233c:	40d8      	lsrs	r0, r3
 800233e:	4770      	bx	lr
 8002340:	40021000 	.word	0x40021000
 8002344:	08005088 	.word	0x08005088
 8002348:	20000018 	.word	0x20000018

0800234c <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800234c:	4b05      	ldr	r3, [pc, #20]	; (8002364 <HAL_RCC_GetPCLK2Freq+0x18>)
 800234e:	4a06      	ldr	r2, [pc, #24]	; (8002368 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002356:	5cd3      	ldrb	r3, [r2, r3]
 8002358:	4a04      	ldr	r2, [pc, #16]	; (800236c <HAL_RCC_GetPCLK2Freq+0x20>)
 800235a:	6810      	ldr	r0, [r2, #0]
 800235c:	f003 031f 	and.w	r3, r3, #31
}
 8002360:	40d8      	lsrs	r0, r3
 8002362:	4770      	bx	lr
 8002364:	40021000 	.word	0x40021000
 8002368:	08005088 	.word	0x08005088
 800236c:	20000018 	.word	0x20000018

08002370 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002370:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002374:	4699      	mov	r9, r3
 8002376:	4688      	mov	r8, r1
 8002378:	4617      	mov	r7, r2
 800237a:	4604      	mov	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800237c:	f7ff fa84 	bl	8001888 <HAL_GetTick>
 8002380:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002382:	444b      	add	r3, r9
 8002384:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002386:	f7ff fa7f 	bl	8001888 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800238a:	4b28      	ldr	r3, [pc, #160]	; (800242c <SPI_WaitFifoStateUntilTimeout+0xbc>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	2623      	movs	r6, #35	; 0x23
 8002390:	435e      	muls	r6, r3
 8002392:	0d36      	lsrs	r6, r6, #20
 8002394:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8002396:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002398:	9601      	str	r6, [sp, #4]

  while ((hspi->Instance->SR & Fifo) != State)
 800239a:	6822      	ldr	r2, [r4, #0]
 800239c:	6893      	ldr	r3, [r2, #8]
 800239e:	ea03 0308 	and.w	r3, r3, r8
 80023a2:	42bb      	cmp	r3, r7
 80023a4:	d101      	bne.n	80023aa <SPI_WaitFifoStateUntilTimeout+0x3a>
      }      
      count--;
    }
  }

  return HAL_OK;
 80023a6:	2000      	movs	r0, #0
 80023a8:	e034      	b.n	8002414 <SPI_WaitFifoStateUntilTimeout+0xa4>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80023aa:	f5b8 6fc0 	cmp.w	r8, #1536	; 0x600
 80023ae:	d101      	bne.n	80023b4 <SPI_WaitFifoStateUntilTimeout+0x44>
 80023b0:	b907      	cbnz	r7, 80023b4 <SPI_WaitFifoStateUntilTimeout+0x44>
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 80023b2:	7b13      	ldrb	r3, [r2, #12]
    if (Timeout != HAL_MAX_DELAY)
 80023b4:	f1b9 3fff 	cmp.w	r9, #4294967295
 80023b8:	d0f0      	beq.n	800239c <SPI_WaitFifoStateUntilTimeout+0x2c>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80023ba:	f7ff fa65 	bl	8001888 <HAL_GetTick>
 80023be:	eba0 000a 	sub.w	r0, r0, sl
 80023c2:	4285      	cmp	r5, r0
 80023c4:	d829      	bhi.n	800241a <SPI_WaitFifoStateUntilTimeout+0xaa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	685a      	ldr	r2, [r3, #4]
 80023ca:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80023ce:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023d0:	6862      	ldr	r2, [r4, #4]
 80023d2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80023d6:	d10a      	bne.n	80023ee <SPI_WaitFifoStateUntilTimeout+0x7e>
 80023d8:	68a2      	ldr	r2, [r4, #8]
 80023da:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80023de:	d002      	beq.n	80023e6 <SPI_WaitFifoStateUntilTimeout+0x76>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80023e0:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80023e4:	d103      	bne.n	80023ee <SPI_WaitFifoStateUntilTimeout+0x7e>
          __HAL_SPI_DISABLE(hspi);
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80023ec:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80023ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80023f0:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80023f4:	d107      	bne.n	8002406 <SPI_WaitFifoStateUntilTimeout+0x96>
          SPI_RESET_CRC(hspi);
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002404:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002406:	2301      	movs	r3, #1
 8002408:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800240c:	2300      	movs	r3, #0
 800240e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
        return HAL_TIMEOUT;
 8002412:	2003      	movs	r0, #3
}
 8002414:	b002      	add	sp, #8
 8002416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 800241a:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 800241c:	2b00      	cmp	r3, #0
      count--;
 800241e:	9b01      	ldr	r3, [sp, #4]
 8002420:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 8002424:	bf08      	it	eq
 8002426:	2500      	moveq	r5, #0
      count--;
 8002428:	9301      	str	r3, [sp, #4]
 800242a:	e7b6      	b.n	800239a <SPI_WaitFifoStateUntilTimeout+0x2a>
 800242c:	20000018 	.word	0x20000018

08002430 <SPI_WaitFlagStateUntilTimeout>:
{
 8002430:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8002434:	461f      	mov	r7, r3
 8002436:	4689      	mov	r9, r1
 8002438:	4690      	mov	r8, r2
 800243a:	4604      	mov	r4, r0
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800243c:	f7ff fa24 	bl	8001888 <HAL_GetTick>
 8002440:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002442:	443b      	add	r3, r7
 8002444:	1a1d      	subs	r5, r3, r0
  tmp_tickstart = HAL_GetTick();
 8002446:	f7ff fa1f 	bl	8001888 <HAL_GetTick>
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800244a:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <SPI_WaitFlagStateUntilTimeout+0xb4>)
 800244c:	681e      	ldr	r6, [r3, #0]
 800244e:	f3c6 36cb 	ubfx	r6, r6, #15, #12
 8002452:	436e      	muls	r6, r5
  tmp_tickstart = HAL_GetTick();
 8002454:	4682      	mov	sl, r0
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002456:	9601      	str	r6, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002458:	6822      	ldr	r2, [r4, #0]
 800245a:	6893      	ldr	r3, [r2, #8]
 800245c:	ea39 0303 	bics.w	r3, r9, r3
 8002460:	bf0c      	ite	eq
 8002462:	2301      	moveq	r3, #1
 8002464:	2300      	movne	r3, #0
 8002466:	4543      	cmp	r3, r8
 8002468:	d101      	bne.n	800246e <SPI_WaitFlagStateUntilTimeout+0x3e>
  return HAL_OK;
 800246a:	2000      	movs	r0, #0
 800246c:	e02e      	b.n	80024cc <SPI_WaitFlagStateUntilTimeout+0x9c>
    if (Timeout != HAL_MAX_DELAY)
 800246e:	1c7b      	adds	r3, r7, #1
 8002470:	d0f3      	beq.n	800245a <SPI_WaitFlagStateUntilTimeout+0x2a>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002472:	f7ff fa09 	bl	8001888 <HAL_GetTick>
 8002476:	eba0 000a 	sub.w	r0, r0, sl
 800247a:	42a8      	cmp	r0, r5
 800247c:	d329      	bcc.n	80024d2 <SPI_WaitFlagStateUntilTimeout+0xa2>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800247e:	6823      	ldr	r3, [r4, #0]
 8002480:	685a      	ldr	r2, [r3, #4]
 8002482:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002486:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002488:	6862      	ldr	r2, [r4, #4]
 800248a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 800248e:	d10a      	bne.n	80024a6 <SPI_WaitFlagStateUntilTimeout+0x76>
 8002490:	68a2      	ldr	r2, [r4, #8]
 8002492:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002496:	d002      	beq.n	800249e <SPI_WaitFlagStateUntilTimeout+0x6e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002498:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 800249c:	d103      	bne.n	80024a6 <SPI_WaitFlagStateUntilTimeout+0x76>
          __HAL_SPI_DISABLE(hspi);
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80024a4:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024a6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80024a8:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80024ac:	d107      	bne.n	80024be <SPI_WaitFlagStateUntilTimeout+0x8e>
          SPI_RESET_CRC(hspi);
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024bc:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 80024be:	2301      	movs	r3, #1
 80024c0:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 80024c4:	2300      	movs	r3, #0
 80024c6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
 80024ca:	2003      	movs	r0, #3
}
 80024cc:	b002      	add	sp, #8
 80024ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if(count == 0U)
 80024d2:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 80024d4:	2b00      	cmp	r3, #0
      count--;
 80024d6:	9b01      	ldr	r3, [sp, #4]
 80024d8:	f103 33ff 	add.w	r3, r3, #4294967295
        tmp_timeout = 0U;
 80024dc:	bf08      	it	eq
 80024de:	2500      	moveq	r5, #0
      count--;
 80024e0:	9301      	str	r3, [sp, #4]
 80024e2:	e7b9      	b.n	8002458 <SPI_WaitFlagStateUntilTimeout+0x28>
 80024e4:	20000018 	.word	0x20000018

080024e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80024e8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80024ea:	4616      	mov	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024ec:	6842      	ldr	r2, [r0, #4]
 80024ee:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 80024f2:	4604      	mov	r4, r0
 80024f4:	460b      	mov	r3, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f6:	d10b      	bne.n	8002510 <SPI_EndRxTransaction+0x28>
 80024f8:	6882      	ldr	r2, [r0, #8]
 80024fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80024fe:	d002      	beq.n	8002506 <SPI_EndRxTransaction+0x1e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002500:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002504:	d104      	bne.n	8002510 <SPI_EndRxTransaction+0x28>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002506:	6821      	ldr	r1, [r4, #0]
 8002508:	680a      	ldr	r2, [r1, #0]
 800250a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800250e:	600a      	str	r2, [r1, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002510:	9600      	str	r6, [sp, #0]
 8002512:	2200      	movs	r2, #0
 8002514:	2180      	movs	r1, #128	; 0x80
 8002516:	4620      	mov	r0, r4
 8002518:	9303      	str	r3, [sp, #12]
 800251a:	f7ff ff89 	bl	8002430 <SPI_WaitFlagStateUntilTimeout>
 800251e:	9b03      	ldr	r3, [sp, #12]
 8002520:	4605      	mov	r5, r0
 8002522:	b128      	cbz	r0, 8002530 <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002524:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002526:	f043 0320 	orr.w	r3, r3, #32
 800252a:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800252c:	2503      	movs	r5, #3
 800252e:	e013      	b.n	8002558 <SPI_EndRxTransaction+0x70>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002530:	6862      	ldr	r2, [r4, #4]
 8002532:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002536:	d10f      	bne.n	8002558 <SPI_EndRxTransaction+0x70>
 8002538:	68a2      	ldr	r2, [r4, #8]
 800253a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800253e:	d002      	beq.n	8002546 <SPI_EndRxTransaction+0x5e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002540:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002544:	d108      	bne.n	8002558 <SPI_EndRxTransaction+0x70>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002546:	9600      	str	r6, [sp, #0]
 8002548:	2200      	movs	r2, #0
 800254a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800254e:	4620      	mov	r0, r4
 8002550:	f7ff ff0e 	bl	8002370 <SPI_WaitFifoStateUntilTimeout>
 8002554:	2800      	cmp	r0, #0
 8002556:	d1e5      	bne.n	8002524 <SPI_EndRxTransaction+0x3c>
}
 8002558:	4628      	mov	r0, r5
 800255a:	b004      	add	sp, #16
 800255c:	bd70      	pop	{r4, r5, r6, pc}

0800255e <SPI_EndRxTxTransaction>:
{
 800255e:	b530      	push	{r4, r5, lr}
 8002560:	b085      	sub	sp, #20
 8002562:	460b      	mov	r3, r1
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002564:	9200      	str	r2, [sp, #0]
 8002566:	9103      	str	r1, [sp, #12]
{
 8002568:	4615      	mov	r5, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800256a:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800256e:	2200      	movs	r2, #0
{
 8002570:	4604      	mov	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002572:	f7ff fefd 	bl	8002370 <SPI_WaitFifoStateUntilTimeout>
 8002576:	9b03      	ldr	r3, [sp, #12]
 8002578:	4602      	mov	r2, r0
 800257a:	b128      	cbz	r0, 8002588 <SPI_EndRxTxTransaction+0x2a>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800257c:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800257e:	f043 0320 	orr.w	r3, r3, #32
 8002582:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8002584:	2003      	movs	r0, #3
 8002586:	e011      	b.n	80025ac <SPI_EndRxTxTransaction+0x4e>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002588:	9500      	str	r5, [sp, #0]
 800258a:	2180      	movs	r1, #128	; 0x80
 800258c:	4620      	mov	r0, r4
 800258e:	9303      	str	r3, [sp, #12]
 8002590:	f7ff ff4e 	bl	8002430 <SPI_WaitFlagStateUntilTimeout>
 8002594:	9b03      	ldr	r3, [sp, #12]
 8002596:	4602      	mov	r2, r0
 8002598:	2800      	cmp	r0, #0
 800259a:	d1ef      	bne.n	800257c <SPI_EndRxTxTransaction+0x1e>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800259c:	9500      	str	r5, [sp, #0]
 800259e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80025a2:	4620      	mov	r0, r4
 80025a4:	f7ff fee4 	bl	8002370 <SPI_WaitFifoStateUntilTimeout>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d1e7      	bne.n	800257c <SPI_EndRxTxTransaction+0x1e>
  }

  return HAL_OK;
}
 80025ac:	b005      	add	sp, #20
 80025ae:	bd30      	pop	{r4, r5, pc}

080025b0 <HAL_SPI_MspInit>:
}
 80025b0:	4770      	bx	lr

080025b2 <HAL_SPI_Init>:
{
 80025b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hspi == NULL)
 80025b4:	4604      	mov	r4, r0
 80025b6:	2800      	cmp	r0, #0
 80025b8:	d079      	beq.n	80026ae <HAL_SPI_Init+0xfc>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80025ba:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d14f      	bne.n	8002660 <HAL_SPI_Init+0xae>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025c0:	6842      	ldr	r2, [r0, #4]
 80025c2:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80025c6:	d000      	beq.n	80025ca <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80025c8:	61c3      	str	r3, [r0, #28]
  if (hspi->State == HAL_SPI_STATE_RESET)
 80025ca:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 80025ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80025d2:	b923      	cbnz	r3, 80025de <HAL_SPI_Init+0x2c>
    hspi->Lock = HAL_UNLOCKED;
 80025d4:	f884 205c 	strb.w	r2, [r4, #92]	; 0x5c
    HAL_SPI_MspInit(hspi);
 80025d8:	4620      	mov	r0, r4
 80025da:	f7ff ffe9 	bl	80025b0 <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 80025de:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025e0:	68e1      	ldr	r1, [r4, #12]
  hspi->State = HAL_SPI_STATE_BUSY;
 80025e2:	2302      	movs	r3, #2
 80025e4:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80025e8:	6813      	ldr	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
  __HAL_SPI_DISABLE(hspi);
 80025ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80025f2:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	d85b      	bhi.n	80026b2 <HAL_SPI_Init+0x100>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80025fa:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80025fe:	d000      	beq.n	8002602 <HAL_SPI_Init+0x50>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002600:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002602:	6863      	ldr	r3, [r4, #4]
 8002604:	68a7      	ldr	r7, [r4, #8]
 8002606:	69a0      	ldr	r0, [r4, #24]
 8002608:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800260a:	f407 4704 	and.w	r7, r7, #33792	; 0x8400
 800260e:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002612:	433b      	orrs	r3, r7
 8002614:	6927      	ldr	r7, [r4, #16]
 8002616:	f007 0702 	and.w	r7, r7, #2
 800261a:	433b      	orrs	r3, r7
 800261c:	6967      	ldr	r7, [r4, #20]
 800261e:	f007 0701 	and.w	r7, r7, #1
 8002622:	433b      	orrs	r3, r7
 8002624:	f400 7700 	and.w	r7, r0, #512	; 0x200
 8002628:	433b      	orrs	r3, r7
 800262a:	69e7      	ldr	r7, [r4, #28]
 800262c:	f007 0738 	and.w	r7, r7, #56	; 0x38
 8002630:	433b      	orrs	r3, r7
 8002632:	6a27      	ldr	r7, [r4, #32]
 8002634:	f007 0780 	and.w	r7, r7, #128	; 0x80
 8002638:	433b      	orrs	r3, r7
 800263a:	f406 5700 	and.w	r7, r6, #8192	; 0x2000
 800263e:	433b      	orrs	r3, r7
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002640:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002644:	6013      	str	r3, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002646:	d111      	bne.n	800266c <HAL_SPI_Init+0xba>
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002648:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800264a:	bb6b      	cbnz	r3, 80026a8 <HAL_SPI_Init+0xf6>
      if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800264c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002650:	d90a      	bls.n	8002668 <HAL_SPI_Init+0xb6>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002652:	2302      	movs	r3, #2
 8002654:	6323      	str	r3, [r4, #48]	; 0x30
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCL);
 8002656:	6813      	ldr	r3, [r2, #0]
 8002658:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	e005      	b.n	800266c <HAL_SPI_Init+0xba>
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002660:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002662:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002666:	e7b0      	b.n	80025ca <HAL_SPI_Init+0x18>
        hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002668:	2301      	movs	r3, #1
 800266a:	6323      	str	r3, [r4, #48]	; 0x30
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800266c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800266e:	6b67      	ldr	r7, [r4, #52]	; 0x34
 8002670:	f003 0310 	and.w	r3, r3, #16
 8002674:	f007 0708 	and.w	r7, r7, #8
 8002678:	433b      	orrs	r3, r7
 800267a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
 800267e:	0c00      	lsrs	r0, r0, #16
 8002680:	4319      	orrs	r1, r3
 8002682:	f000 0004 	and.w	r0, r0, #4
 8002686:	4301      	orrs	r1, r0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002688:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800268c:	bf08      	it	eq
 800268e:	8da3      	ldrheq	r3, [r4, #44]	; 0x2c
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002690:	ea45 0501 	orr.w	r5, r5, r1
 8002694:	6055      	str	r5, [r2, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002696:	f04f 0000 	mov.w	r0, #0
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800269a:	bf08      	it	eq
 800269c:	6113      	streq	r3, [r2, #16]
  hspi->State     = HAL_SPI_STATE_READY;
 800269e:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026a0:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80026a2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
}
 80026a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 80026a8:	2b02      	cmp	r3, #2
 80026aa:	d1df      	bne.n	800266c <HAL_SPI_Init+0xba>
 80026ac:	e7d3      	b.n	8002656 <HAL_SPI_Init+0xa4>
    return HAL_ERROR;
 80026ae:	2001      	movs	r0, #1
 80026b0:	e7f9      	b.n	80026a6 <HAL_SPI_Init+0xf4>
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80026b2:	461d      	mov	r5, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80026b4:	f5b1 6f70 	cmp.w	r1, #3840	; 0xf00
 80026b8:	e7a1      	b.n	80025fe <HAL_SPI_Init+0x4c>

080026ba <HAL_SPI_MspDeInit>:
 80026ba:	4770      	bx	lr

080026bc <HAL_SPI_DeInit>:
{
 80026bc:	b510      	push	{r4, lr}
  if (hspi == NULL)
 80026be:	4604      	mov	r4, r0
 80026c0:	b180      	cbz	r0, 80026e4 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 80026c2:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 80026c4:	2302      	movs	r3, #2
 80026c6:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
  __HAL_SPI_DISABLE(hspi);
 80026ca:	6813      	ldr	r3, [r2, #0]
 80026cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026d0:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 80026d2:	f7ff fff2 	bl	80026ba <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80026d6:	2000      	movs	r0, #0
 80026d8:	6620      	str	r0, [r4, #96]	; 0x60
  __HAL_UNLOCK(hspi);
 80026da:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
  hspi->State = HAL_SPI_STATE_RESET;
 80026de:	f884 005d 	strb.w	r0, [r4, #93]	; 0x5d
}
 80026e2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80026e4:	2001      	movs	r0, #1
 80026e6:	e7fc      	b.n	80026e2 <HAL_SPI_DeInit+0x26>

080026e8 <HAL_SPI_TransmitReceive>:
{
 80026e8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80026ec:	4699      	mov	r9, r3
  __HAL_LOCK(hspi);
 80026ee:	f890 305c 	ldrb.w	r3, [r0, #92]	; 0x5c
{
 80026f2:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80026f4:	2b01      	cmp	r3, #1
{
 80026f6:	4604      	mov	r4, r0
 80026f8:	460e      	mov	r6, r1
 80026fa:	4692      	mov	sl, r2
  __HAL_LOCK(hspi);
 80026fc:	f000 81a5 	beq.w	8002a4a <HAL_SPI_TransmitReceive+0x362>
 8002700:	2301      	movs	r3, #1
 8002702:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002706:	f7ff f8bf 	bl	8001888 <HAL_GetTick>
  tmp_state           = hspi->State;
 800270a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 800270e:	e9d4 5200 	ldrd	r5, r2, [r4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002712:	2b01      	cmp	r3, #1
  spi_cr1             = READ_REG(hspi->Instance->CR1);
 8002714:	6829      	ldr	r1, [r5, #0]
  tickstart = HAL_GetTick();
 8002716:	4680      	mov	r8, r0
  tmp_state           = hspi->State;
 8002718:	fa5f fc83 	uxtb.w	ip, r3
  spi_cr2             = READ_REG(hspi->Instance->CR2);
 800271c:	6868      	ldr	r0, [r5, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800271e:	d00b      	beq.n	8002738 <HAL_SPI_TransmitReceive+0x50>
 8002720:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002724:	f040 818f 	bne.w	8002a46 <HAL_SPI_TransmitReceive+0x35e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002728:	68a3      	ldr	r3, [r4, #8]
 800272a:	2b00      	cmp	r3, #0
 800272c:	f040 818b 	bne.w	8002a46 <HAL_SPI_TransmitReceive+0x35e>
 8002730:	f1bc 0f04 	cmp.w	ip, #4
 8002734:	f040 8187 	bne.w	8002a46 <HAL_SPI_TransmitReceive+0x35e>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002738:	2e00      	cmp	r6, #0
 800273a:	f000 8170 	beq.w	8002a1e <HAL_SPI_TransmitReceive+0x336>
 800273e:	f1ba 0f00 	cmp.w	sl, #0
 8002742:	f000 816c 	beq.w	8002a1e <HAL_SPI_TransmitReceive+0x336>
 8002746:	f1b9 0f00 	cmp.w	r9, #0
 800274a:	f000 8168 	beq.w	8002a1e <HAL_SPI_TransmitReceive+0x336>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800274e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002752:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002756:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002758:	bf1c      	itt	ne
 800275a:	2305      	movne	r3, #5
 800275c:	f884 305d 	strbne.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002760:	2300      	movs	r3, #0
 8002762:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8002764:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002768:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  hspi->RxXferCount = Size;
 800276a:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800276e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8002772:	f8a4 9044 	strh.w	r9, [r4, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002776:	63a6      	str	r6, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002778:	f8a4 903e 	strh.w	r9, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800277c:	f8a4 903c 	strh.w	r9, [r4, #60]	; 0x3c
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002780:	d107      	bne.n	8002792 <HAL_SPI_TransmitReceive+0xaa>
    SPI_RESET_CRC(hspi);
 8002782:	682b      	ldr	r3, [r5, #0]
 8002784:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002788:	602b      	str	r3, [r5, #0]
 800278a:	682b      	ldr	r3, [r5, #0]
 800278c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002790:	602b      	str	r3, [r5, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002792:	f8d4 c00c 	ldr.w	ip, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002796:	686b      	ldr	r3, [r5, #4]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002798:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 800279c:	d802      	bhi.n	80027a4 <HAL_SPI_TransmitReceive+0xbc>
 800279e:	f1b9 0f01 	cmp.w	r9, #1
 80027a2:	d93a      	bls.n	800281a <HAL_SPI_TransmitReceive+0x132>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027a4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80027a8:	606b      	str	r3, [r5, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80027aa:	682b      	ldr	r3, [r5, #0]
 80027ac:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 80027ae:	bf5e      	ittt	pl
 80027b0:	682b      	ldrpl	r3, [r5, #0]
 80027b2:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 80027b6:	602b      	strpl	r3, [r5, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027b8:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 80027bc:	d97f      	bls.n	80028be <HAL_SPI_TransmitReceive+0x1d6>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80027be:	b112      	cbz	r2, 80027c6 <HAL_SPI_TransmitReceive+0xde>
 80027c0:	f1b9 0f01 	cmp.w	r9, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_SPI_TransmitReceive+0xee>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80027c6:	f836 3b02 	ldrh.w	r3, [r6], #2
 80027ca:	60eb      	str	r3, [r5, #12]
      hspi->TxXferCount--;
 80027cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80027ce:	63a6      	str	r6, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b29b      	uxth	r3, r3
 80027d4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80027d6:	f04f 0901 	mov.w	r9, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80027da:	f001 0604 	and.w	r6, r1, #4
 80027de:	f000 0508 	and.w	r5, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80027e2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80027e4:	b29b      	uxth	r3, r3
 80027e6:	b9db      	cbnz	r3, 8002820 <HAL_SPI_TransmitReceive+0x138>
 80027e8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80027ec:	b29b      	uxth	r3, r3
 80027ee:	b9bb      	cbnz	r3, 8002820 <HAL_SPI_TransmitReceive+0x138>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027f0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80027f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027f6:	f040 80fb 	bne.w	80029f0 <HAL_SPI_TransmitReceive+0x308>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 80027fa:	2201      	movs	r2, #1
 80027fc:	f8cd 8000 	str.w	r8, [sp]
 8002800:	463b      	mov	r3, r7
 8002802:	4611      	mov	r1, r2
 8002804:	4620      	mov	r0, r4
 8002806:	f7ff fe13 	bl	8002430 <SPI_WaitFlagStateUntilTimeout>
 800280a:	2800      	cmp	r0, #0
 800280c:	f000 80ea 	beq.w	80029e4 <HAL_SPI_TransmitReceive+0x2fc>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002810:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002812:	f043 0302 	orr.w	r3, r3, #2
 8002816:	6623      	str	r3, [r4, #96]	; 0x60
 8002818:	e02a      	b.n	8002870 <HAL_SPI_TransmitReceive+0x188>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800281a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800281e:	e7c3      	b.n	80027a8 <HAL_SPI_TransmitReceive+0xc0>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002820:	6823      	ldr	r3, [r4, #0]
 8002822:	689a      	ldr	r2, [r3, #8]
 8002824:	0790      	lsls	r0, r2, #30
 8002826:	d507      	bpl.n	8002838 <HAL_SPI_TransmitReceive+0x150>
 8002828:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800282a:	b292      	uxth	r2, r2
 800282c:	b122      	cbz	r2, 8002838 <HAL_SPI_TransmitReceive+0x150>
 800282e:	f1b9 0f00 	cmp.w	r9, #0
 8002832:	d128      	bne.n	8002886 <HAL_SPI_TransmitReceive+0x19e>
        txallowed = 0U;
 8002834:	f04f 0900 	mov.w	r9, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002838:	6899      	ldr	r1, [r3, #8]
 800283a:	f011 0101 	ands.w	r1, r1, #1
 800283e:	d00f      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x178>
 8002840:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002844:	b292      	uxth	r2, r2
 8002846:	b15a      	cbz	r2, 8002860 <HAL_SPI_TransmitReceive+0x178>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002848:	68da      	ldr	r2, [r3, #12]
 800284a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800284c:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002850:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002852:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002856:	3b01      	subs	r3, #1
 8002858:	b29b      	uxth	r3, r3
 800285a:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
        txallowed = 1U;
 800285e:	4689      	mov	r9, r1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002860:	f7ff f812 	bl	8001888 <HAL_GetTick>
 8002864:	eba0 0008 	sub.w	r0, r0, r8
 8002868:	42b8      	cmp	r0, r7
 800286a:	d3ba      	bcc.n	80027e2 <HAL_SPI_TransmitReceive+0xfa>
 800286c:	1c79      	adds	r1, r7, #1
 800286e:	d0b8      	beq.n	80027e2 <HAL_SPI_TransmitReceive+0xfa>
          errorcode = HAL_TIMEOUT;
 8002870:	2503      	movs	r5, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002872:	2301      	movs	r3, #1
 8002874:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002878:	2300      	movs	r3, #0
 800287a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 800287e:	4628      	mov	r0, r5
 8002880:	b002      	add	sp, #8
 8002882:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002886:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8002888:	f832 1b02 	ldrh.w	r1, [r2], #2
 800288c:	60d9      	str	r1, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800288e:	63a2      	str	r2, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002890:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002892:	3a01      	subs	r2, #1
 8002894:	b292      	uxth	r2, r2
 8002896:	87e2      	strh	r2, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002898:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800289a:	b292      	uxth	r2, r2
 800289c:	2a00      	cmp	r2, #0
 800289e:	d1c9      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x14c>
 80028a0:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80028a2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80028a6:	d1c5      	bne.n	8002834 <HAL_SPI_TransmitReceive+0x14c>
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80028a8:	b926      	cbnz	r6, 80028b4 <HAL_SPI_TransmitReceive+0x1cc>
 80028aa:	b11d      	cbz	r5, 80028b4 <HAL_SPI_TransmitReceive+0x1cc>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028b2:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80028b4:	681a      	ldr	r2, [r3, #0]
 80028b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	e7ba      	b.n	8002834 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80028be:	b112      	cbz	r2, 80028c6 <HAL_SPI_TransmitReceive+0x1de>
 80028c0:	f1b9 0f01 	cmp.w	r9, #1
 80028c4:	d10b      	bne.n	80028de <HAL_SPI_TransmitReceive+0x1f6>
      if (hspi->TxXferCount > 1U)
 80028c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028c8:	b29b      	uxth	r3, r3
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d94b      	bls.n	8002966 <HAL_SPI_TransmitReceive+0x27e>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80028ce:	f836 3b02 	ldrh.w	r3, [r6], #2
 80028d2:	60eb      	str	r3, [r5, #12]
        hspi->TxXferCount -= 2U;
 80028d4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80028d6:	63a6      	str	r6, [r4, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80028d8:	3b02      	subs	r3, #2
        hspi->TxXferCount--;
 80028da:	b29b      	uxth	r3, r3
 80028dc:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80028de:	2501      	movs	r5, #1
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80028e0:	f001 0604 	and.w	r6, r1, #4
 80028e4:	f000 0908 	and.w	r9, r0, #8
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80028e8:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80028ea:	b29b      	uxth	r3, r3
 80028ec:	b92b      	cbnz	r3, 80028fa <HAL_SPI_TransmitReceive+0x212>
 80028ee:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	f43f af7b 	beq.w	80027f0 <HAL_SPI_TransmitReceive+0x108>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80028fa:	6821      	ldr	r1, [r4, #0]
 80028fc:	688b      	ldr	r3, [r1, #8]
 80028fe:	079a      	lsls	r2, r3, #30
 8002900:	d505      	bpl.n	800290e <HAL_SPI_TransmitReceive+0x226>
 8002902:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002904:	b29b      	uxth	r3, r3
 8002906:	b113      	cbz	r3, 800290e <HAL_SPI_TransmitReceive+0x226>
 8002908:	2d00      	cmp	r5, #0
 800290a:	d134      	bne.n	8002976 <HAL_SPI_TransmitReceive+0x28e>
        txallowed = 0U;
 800290c:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800290e:	6821      	ldr	r1, [r4, #0]
 8002910:	688b      	ldr	r3, [r1, #8]
 8002912:	f013 0301 	ands.w	r3, r3, #1
 8002916:	d01d      	beq.n	8002954 <HAL_SPI_TransmitReceive+0x26c>
 8002918:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 800291c:	b292      	uxth	r2, r2
 800291e:	b1ca      	cbz	r2, 8002954 <HAL_SPI_TransmitReceive+0x26c>
        if (hspi->RxXferCount > 1U)
 8002920:	f8b4 0046 	ldrh.w	r0, [r4, #70]	; 0x46
 8002924:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002926:	b280      	uxth	r0, r0
 8002928:	2801      	cmp	r0, #1
 800292a:	d94f      	bls.n	80029cc <HAL_SPI_TransmitReceive+0x2e4>
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800292c:	68c8      	ldr	r0, [r1, #12]
 800292e:	f822 0b02 	strh.w	r0, [r2], #2
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002932:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002934:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002938:	3a02      	subs	r2, #2
 800293a:	b292      	uxth	r2, r2
 800293c:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002940:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 8002944:	b292      	uxth	r2, r2
 8002946:	2a01      	cmp	r2, #1
 8002948:	d803      	bhi.n	8002952 <HAL_SPI_TransmitReceive+0x26a>
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800294a:	684a      	ldr	r2, [r1, #4]
 800294c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002950:	604a      	str	r2, [r1, #4]
        txallowed = 1U;
 8002952:	461d      	mov	r5, r3
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002954:	f7fe ff98 	bl	8001888 <HAL_GetTick>
 8002958:	eba0 0008 	sub.w	r0, r0, r8
 800295c:	42b8      	cmp	r0, r7
 800295e:	d3c3      	bcc.n	80028e8 <HAL_SPI_TransmitReceive+0x200>
 8002960:	1c7b      	adds	r3, r7, #1
 8002962:	d0c1      	beq.n	80028e8 <HAL_SPI_TransmitReceive+0x200>
 8002964:	e784      	b.n	8002870 <HAL_SPI_TransmitReceive+0x188>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002966:	7833      	ldrb	r3, [r6, #0]
 8002968:	732b      	strb	r3, [r5, #12]
        hspi->pTxBuffPtr++;
 800296a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800296c:	3301      	adds	r3, #1
 800296e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8002970:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002972:	3b01      	subs	r3, #1
 8002974:	e7b1      	b.n	80028da <HAL_SPI_TransmitReceive+0x1f2>
        if (hspi->TxXferCount > 1U)
 8002976:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 8002978:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800297a:	b292      	uxth	r2, r2
 800297c:	2a01      	cmp	r2, #1
 800297e:	d91d      	bls.n	80029bc <HAL_SPI_TransmitReceive+0x2d4>
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002980:	f833 2b02 	ldrh.w	r2, [r3], #2
 8002984:	60ca      	str	r2, [r1, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002986:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002988:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800298a:	3b02      	subs	r3, #2
          hspi->TxXferCount--;
 800298c:	b29b      	uxth	r3, r3
 800298e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        if ((hspi->TxXferCount == 0U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 8002990:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8002992:	b29b      	uxth	r3, r3
 8002994:	2b00      	cmp	r3, #0
 8002996:	d1b9      	bne.n	800290c <HAL_SPI_TransmitReceive+0x224>
 8002998:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800299a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800299e:	d1b5      	bne.n	800290c <HAL_SPI_TransmitReceive+0x224>
 80029a0:	6823      	ldr	r3, [r4, #0]
          if ((READ_BIT(spi_cr1, SPI_CR1_MSTR) == 0U) && (READ_BIT(spi_cr2, SPI_CR2_NSSP) == SPI_CR2_NSSP))
 80029a2:	b936      	cbnz	r6, 80029b2 <HAL_SPI_TransmitReceive+0x2ca>
 80029a4:	f1b9 0f00 	cmp.w	r9, #0
 80029a8:	d003      	beq.n	80029b2 <HAL_SPI_TransmitReceive+0x2ca>
            SET_BIT(hspi->Instance->CR1, SPI_CR1_SSM);
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80029b0:	601a      	str	r2, [r3, #0]
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80029b8:	601a      	str	r2, [r3, #0]
 80029ba:	e7a7      	b.n	800290c <HAL_SPI_TransmitReceive+0x224>
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80029bc:	781b      	ldrb	r3, [r3, #0]
 80029be:	730b      	strb	r3, [r1, #12]
          hspi->pTxBuffPtr++;
 80029c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80029c2:	3301      	adds	r3, #1
 80029c4:	63a3      	str	r3, [r4, #56]	; 0x38
          hspi->TxXferCount--;
 80029c6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80029c8:	3b01      	subs	r3, #1
 80029ca:	e7df      	b.n	800298c <HAL_SPI_TransmitReceive+0x2a4>
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80029cc:	7b09      	ldrb	r1, [r1, #12]
 80029ce:	7011      	strb	r1, [r2, #0]
          hspi->pRxBuffPtr++;
 80029d0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80029d2:	3201      	adds	r2, #1
 80029d4:	6422      	str	r2, [r4, #64]	; 0x40
          hspi->RxXferCount--;
 80029d6:	f8b4 2046 	ldrh.w	r2, [r4, #70]	; 0x46
 80029da:	3a01      	subs	r2, #1
 80029dc:	b292      	uxth	r2, r2
 80029de:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
 80029e2:	e7b6      	b.n	8002952 <HAL_SPI_TransmitReceive+0x26a>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80029e4:	68e2      	ldr	r2, [r4, #12]
 80029e6:	6823      	ldr	r3, [r4, #0]
 80029e8:	f5b2 6f70 	cmp.w	r2, #3840	; 0xf00
 80029ec:	d119      	bne.n	8002a22 <HAL_SPI_TransmitReceive+0x33a>
      READ_REG(hspi->Instance->DR);
 80029ee:	68db      	ldr	r3, [r3, #12]
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 80029f0:	6822      	ldr	r2, [r4, #0]
 80029f2:	6895      	ldr	r5, [r2, #8]
 80029f4:	f015 0510 	ands.w	r5, r5, #16
 80029f8:	d007      	beq.n	8002a0a <HAL_SPI_TransmitReceive+0x322>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 80029fa:	6e23      	ldr	r3, [r4, #96]	; 0x60
 80029fc:	f043 0302 	orr.w	r3, r3, #2
 8002a00:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002a02:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002a06:	6093      	str	r3, [r2, #8]
    errorcode = HAL_ERROR;
 8002a08:	2501      	movs	r5, #1
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a0a:	4642      	mov	r2, r8
 8002a0c:	4639      	mov	r1, r7
 8002a0e:	4620      	mov	r0, r4
 8002a10:	f7ff fda5 	bl	800255e <SPI_EndRxTxTransaction>
 8002a14:	2800      	cmp	r0, #0
 8002a16:	f43f af2c 	beq.w	8002872 <HAL_SPI_TransmitReceive+0x18a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a1a:	2320      	movs	r3, #32
 8002a1c:	6623      	str	r3, [r4, #96]	; 0x60
    errorcode = HAL_ERROR;
 8002a1e:	2501      	movs	r5, #1
 8002a20:	e727      	b.n	8002872 <HAL_SPI_TransmitReceive+0x18a>
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8002a22:	7b1b      	ldrb	r3, [r3, #12]
      if (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT)
 8002a24:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d1e2      	bne.n	80029f0 <HAL_SPI_TransmitReceive+0x308>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f8cd 8000 	str.w	r8, [sp]
 8002a30:	463b      	mov	r3, r7
 8002a32:	4611      	mov	r1, r2
 8002a34:	4620      	mov	r0, r4
 8002a36:	f7ff fcfb 	bl	8002430 <SPI_WaitFlagStateUntilTimeout>
 8002a3a:	2800      	cmp	r0, #0
 8002a3c:	f47f aee8 	bne.w	8002810 <HAL_SPI_TransmitReceive+0x128>
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8002a40:	6823      	ldr	r3, [r4, #0]
 8002a42:	7b1b      	ldrb	r3, [r3, #12]
 8002a44:	e7d4      	b.n	80029f0 <HAL_SPI_TransmitReceive+0x308>
    errorcode = HAL_BUSY;
 8002a46:	2502      	movs	r5, #2
 8002a48:	e713      	b.n	8002872 <HAL_SPI_TransmitReceive+0x18a>
  __HAL_LOCK(hspi);
 8002a4a:	2502      	movs	r5, #2
 8002a4c:	e717      	b.n	800287e <HAL_SPI_TransmitReceive+0x196>

08002a4e <HAL_SPI_Receive>:
{
 8002a4e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002a52:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a54:	6843      	ldr	r3, [r0, #4]
 8002a56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	4688      	mov	r8, r1
 8002a5e:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002a60:	d10c      	bne.n	8002a7c <HAL_SPI_Receive+0x2e>
 8002a62:	6883      	ldr	r3, [r0, #8]
 8002a64:	b953      	cbnz	r3, 8002a7c <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002a66:	2304      	movs	r3, #4
 8002a68:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002a6c:	4613      	mov	r3, r2
 8002a6e:	9500      	str	r5, [sp, #0]
 8002a70:	460a      	mov	r2, r1
 8002a72:	f7ff fe39 	bl	80026e8 <HAL_SPI_TransmitReceive>
}
 8002a76:	b002      	add	sp, #8
 8002a78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8002a7c:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	f000 80f1 	beq.w	8002c68 <HAL_SPI_Receive+0x21a>
 8002a86:	2301      	movs	r3, #1
 8002a88:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  tickstart = HAL_GetTick();
 8002a8c:	f7fe fefc 	bl	8001888 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a90:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002a94:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8002a96:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8002a98:	b2d8      	uxtb	r0, r3
 8002a9a:	f040 80e3 	bne.w	8002c64 <HAL_SPI_Receive+0x216>
  if ((pData == NULL) || (Size == 0U))
 8002a9e:	f1b8 0f00 	cmp.w	r8, #0
 8002aa2:	f000 809f 	beq.w	8002be4 <HAL_SPI_Receive+0x196>
 8002aa6:	2f00      	cmp	r7, #0
 8002aa8:	f000 809c 	beq.w	8002be4 <HAL_SPI_Receive+0x196>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002aac:	2304      	movs	r3, #4
 8002aae:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->TxISR       = NULL;
 8002ab6:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
  hspi->RxXferCount = Size;
 8002aba:	f8a4 7046 	strh.w	r7, [r4, #70]	; 0x46
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002abe:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002ac0:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002ac2:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ac4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002ac6:	6822      	ldr	r2, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002ac8:	f8c4 8040 	str.w	r8, [r4, #64]	; 0x40
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002acc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
  hspi->RxXferSize  = Size;
 8002ad0:	f8a4 7044 	strh.w	r7, [r4, #68]	; 0x44
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002ad4:	d10d      	bne.n	8002af2 <HAL_SPI_Receive+0xa4>
    SPI_RESET_CRC(hspi);
 8002ad6:	6813      	ldr	r3, [r2, #0]
 8002ad8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	6813      	ldr	r3, [r2, #0]
 8002ae0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002ae4:	6013      	str	r3, [r2, #0]
    hspi->RxXferCount--;
 8002ae6:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002aea:	3b01      	subs	r3, #1
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af2:	68e1      	ldr	r1, [r4, #12]
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002af4:	6853      	ldr	r3, [r2, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002af6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002afa:	bf8c      	ite	hi
 8002afc:	f423 5380 	bichi.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002b00:	f443 5380 	orrls.w	r3, r3, #4096	; 0x1000
 8002b04:	6053      	str	r3, [r2, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b06:	68a3      	ldr	r3, [r4, #8]
 8002b08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b0c:	d107      	bne.n	8002b1e <HAL_SPI_Receive+0xd0>
    __HAL_SPI_DISABLE(hspi);
 8002b0e:	6813      	ldr	r3, [r2, #0]
 8002b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b14:	6013      	str	r3, [r2, #0]
    SPI_1LINE_RX(hspi);
 8002b16:	6813      	ldr	r3, [r2, #0]
 8002b18:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b1c:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b1e:	6813      	ldr	r3, [r2, #0]
 8002b20:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8002b22:	bf5e      	ittt	pl
 8002b24:	6813      	ldrpl	r3, [r2, #0]
 8002b26:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8002b2a:	6013      	strpl	r3, [r2, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002b2c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002b30:	d923      	bls.n	8002b7a <HAL_SPI_Receive+0x12c>
    while (hspi->RxXferCount > 0U)
 8002b32:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002b36:	b29b      	uxth	r3, r3
 8002b38:	b323      	cbz	r3, 8002b84 <HAL_SPI_Receive+0x136>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b3a:	6823      	ldr	r3, [r4, #0]
 8002b3c:	689a      	ldr	r2, [r3, #8]
 8002b3e:	07d1      	lsls	r1, r2, #31
 8002b40:	d557      	bpl.n	8002bf2 <HAL_SPI_Receive+0x1a4>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b46:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002b4a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002b4c:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002b50:	3b01      	subs	r3, #1
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
 8002b58:	e7eb      	b.n	8002b32 <HAL_SPI_Receive+0xe4>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002b5a:	6823      	ldr	r3, [r4, #0]
 8002b5c:	689a      	ldr	r2, [r3, #8]
 8002b5e:	07d7      	lsls	r7, r2, #31
 8002b60:	d538      	bpl.n	8002bd4 <HAL_SPI_Receive+0x186>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002b62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002b64:	7b1b      	ldrb	r3, [r3, #12]
 8002b66:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002b68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8002b6e:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002b72:	3b01      	subs	r3, #1
 8002b74:	b29b      	uxth	r3, r3
 8002b76:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
    while (hspi->RxXferCount > 0U)
 8002b7a:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
 8002b7e:	b29b      	uxth	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d1ea      	bne.n	8002b5a <HAL_SPI_Receive+0x10c>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002b84:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b8a:	d140      	bne.n	8002c0e <HAL_SPI_Receive+0x1c0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002b8c:	6822      	ldr	r2, [r4, #0]
 8002b8e:	6813      	ldr	r3, [r2, #0]
 8002b90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b94:	6013      	str	r3, [r2, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002b96:	2201      	movs	r2, #1
 8002b98:	9600      	str	r6, [sp, #0]
 8002b9a:	462b      	mov	r3, r5
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	f7ff fc46 	bl	8002430 <SPI_WaitFlagStateUntilTimeout>
 8002ba4:	b9e8      	cbnz	r0, 8002be2 <HAL_SPI_Receive+0x194>
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002ba6:	68e1      	ldr	r1, [r4, #12]
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bac:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb0:	bf8b      	itete	hi
 8002bb2:	68d2      	ldrhi	r2, [r2, #12]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bb4:	7b12      	ldrbls	r2, [r2, #12]
      *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002bb6:	801a      	strhhi	r2, [r3, #0]
      (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002bb8:	701a      	strbls	r2, [r3, #0]
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	9600      	str	r6, [sp, #0]
 8002bbe:	462b      	mov	r3, r5
 8002bc0:	4611      	mov	r1, r2
 8002bc2:	4620      	mov	r0, r4
 8002bc4:	f7ff fc34 	bl	8002430 <SPI_WaitFlagStateUntilTimeout>
 8002bc8:	b1d8      	cbz	r0, 8002c02 <HAL_SPI_Receive+0x1b4>
          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002bca:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002bcc:	f043 0302 	orr.w	r3, r3, #2
 8002bd0:	6623      	str	r3, [r4, #96]	; 0x60
 8002bd2:	e006      	b.n	8002be2 <HAL_SPI_Receive+0x194>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bd4:	f7fe fe58 	bl	8001888 <HAL_GetTick>
 8002bd8:	1b80      	subs	r0, r0, r6
 8002bda:	42a8      	cmp	r0, r5
 8002bdc:	d3cd      	bcc.n	8002b7a <HAL_SPI_Receive+0x12c>
 8002bde:	1c68      	adds	r0, r5, #1
 8002be0:	d0cb      	beq.n	8002b7a <HAL_SPI_Receive+0x12c>
          errorcode = HAL_TIMEOUT;
 8002be2:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8002be4:	2301      	movs	r3, #1
 8002be6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8002bea:	2300      	movs	r3, #0
 8002bec:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  return errorcode;
 8002bf0:	e741      	b.n	8002a76 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002bf2:	f7fe fe49 	bl	8001888 <HAL_GetTick>
 8002bf6:	1b80      	subs	r0, r0, r6
 8002bf8:	42a8      	cmp	r0, r5
 8002bfa:	d39a      	bcc.n	8002b32 <HAL_SPI_Receive+0xe4>
 8002bfc:	1c6a      	adds	r2, r5, #1
 8002bfe:	d098      	beq.n	8002b32 <HAL_SPI_Receive+0xe4>
 8002c00:	e7ef      	b.n	8002be2 <HAL_SPI_Receive+0x194>
    if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002c02:	68e3      	ldr	r3, [r4, #12]
 8002c04:	6822      	ldr	r2, [r4, #0]
 8002c06:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002c0a:	d118      	bne.n	8002c3e <HAL_SPI_Receive+0x1f0>
      READ_REG(hspi->Instance->DR);
 8002c0c:	68d3      	ldr	r3, [r2, #12]
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002c0e:	4632      	mov	r2, r6
 8002c10:	4629      	mov	r1, r5
 8002c12:	4620      	mov	r0, r4
 8002c14:	f7ff fc68 	bl	80024e8 <SPI_EndRxTransaction>
 8002c18:	b108      	cbz	r0, 8002c1e <HAL_SPI_Receive+0x1d0>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002c1a:	2320      	movs	r3, #32
 8002c1c:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR))
 8002c1e:	6822      	ldr	r2, [r4, #0]
 8002c20:	6893      	ldr	r3, [r2, #8]
 8002c22:	06db      	lsls	r3, r3, #27
 8002c24:	d506      	bpl.n	8002c34 <HAL_SPI_Receive+0x1e6>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8002c26:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002c28:	f043 0302 	orr.w	r3, r3, #2
 8002c2c:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8002c2e:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8002c32:	6093      	str	r3, [r2, #8]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002c34:	6e20      	ldr	r0, [r4, #96]	; 0x60
    errorcode = HAL_BUSY;
 8002c36:	3800      	subs	r0, #0
 8002c38:	bf18      	it	ne
 8002c3a:	2001      	movne	r0, #1
error :
 8002c3c:	e7d2      	b.n	8002be4 <HAL_SPI_Receive+0x196>
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002c3e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
      READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8002c42:	7b12      	ldrb	r2, [r2, #12]
      if ((hspi->Init.DataSize == SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002c44:	d1e3      	bne.n	8002c0e <HAL_SPI_Receive+0x1c0>
 8002c46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d1e0      	bne.n	8002c0e <HAL_SPI_Receive+0x1c0>
        if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, SET, Timeout, tickstart) != HAL_OK)
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	9600      	str	r6, [sp, #0]
 8002c50:	462b      	mov	r3, r5
 8002c52:	4611      	mov	r1, r2
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff fbeb 	bl	8002430 <SPI_WaitFlagStateUntilTimeout>
 8002c5a:	2800      	cmp	r0, #0
 8002c5c:	d1b5      	bne.n	8002bca <HAL_SPI_Receive+0x17c>
        READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8002c5e:	6823      	ldr	r3, [r4, #0]
 8002c60:	7b1b      	ldrb	r3, [r3, #12]
 8002c62:	e7d4      	b.n	8002c0e <HAL_SPI_Receive+0x1c0>
    errorcode = HAL_BUSY;
 8002c64:	2002      	movs	r0, #2
 8002c66:	e7bd      	b.n	8002be4 <HAL_SPI_Receive+0x196>
  __HAL_LOCK(hspi);
 8002c68:	2002      	movs	r0, #2
 8002c6a:	e704      	b.n	8002a76 <HAL_SPI_Receive+0x28>

08002c6c <HAL_SPI_Transmit_IT>:
{
 8002c6c:	4603      	mov	r3, r0
  __HAL_LOCK(hspi);
 8002c6e:	f890 005c 	ldrb.w	r0, [r0, #92]	; 0x5c
 8002c72:	2801      	cmp	r0, #1
 8002c74:	d04d      	beq.n	8002d12 <HAL_SPI_Transmit_IT+0xa6>
 8002c76:	2001      	movs	r0, #1
 8002c78:	f883 005c 	strb.w	r0, [r3, #92]	; 0x5c
  if ((pData == NULL) || (Size == 0U))
 8002c7c:	2900      	cmp	r1, #0
 8002c7e:	d040      	beq.n	8002d02 <HAL_SPI_Transmit_IT+0x96>
 8002c80:	2a00      	cmp	r2, #0
 8002c82:	d03e      	beq.n	8002d02 <HAL_SPI_Transmit_IT+0x96>
  if (hspi->State != HAL_SPI_STATE_READY)
 8002c84:	f893 005d 	ldrb.w	r0, [r3, #93]	; 0x5d
 8002c88:	2801      	cmp	r0, #1
 8002c8a:	d13e      	bne.n	8002d0a <HAL_SPI_Transmit_IT+0x9e>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c8c:	2003      	movs	r0, #3
 8002c8e:	f883 005d 	strb.w	r0, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c92:	2000      	movs	r0, #0
 8002c94:	6618      	str	r0, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c96:	6399      	str	r1, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002c98:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->TxISR = SPI_TxISR_8BIT;
 8002c9a:	491f      	ldr	r1, [pc, #124]	; (8002d18 <HAL_SPI_Transmit_IT+0xac>)
  hspi->TxXferSize  = Size;
 8002c9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002c9e:	6418      	str	r0, [r3, #64]	; 0x40
    hspi->TxISR = SPI_TxISR_8BIT;
 8002ca0:	4a1e      	ldr	r2, [pc, #120]	; (8002d1c <HAL_SPI_Transmit_IT+0xb0>)
  hspi->RxXferSize  = 0U;
 8002ca2:	f8a3 0044 	strh.w	r0, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8002ca6:	f8a3 0046 	strh.w	r0, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 8002caa:	64d8      	str	r0, [r3, #76]	; 0x4c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cac:	68d8      	ldr	r0, [r3, #12]
    hspi->TxISR = SPI_TxISR_8BIT;
 8002cae:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
 8002cb2:	bf98      	it	ls
 8002cb4:	460a      	movls	r2, r1
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002cb6:	6899      	ldr	r1, [r3, #8]
 8002cb8:	651a      	str	r2, [r3, #80]	; 0x50
 8002cba:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	d107      	bne.n	8002cd2 <HAL_SPI_Transmit_IT+0x66>
    __HAL_SPI_DISABLE(hspi);
 8002cc2:	6811      	ldr	r1, [r2, #0]
 8002cc4:	f021 0140 	bic.w	r1, r1, #64	; 0x40
 8002cc8:	6011      	str	r1, [r2, #0]
    SPI_1LINE_TX(hspi);
 8002cca:	6811      	ldr	r1, [r2, #0]
 8002ccc:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002cd0:	6011      	str	r1, [r2, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002cd2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002cd4:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 8002cd8:	d107      	bne.n	8002cea <HAL_SPI_Transmit_IT+0x7e>
    SPI_RESET_CRC(hspi);
 8002cda:	6811      	ldr	r1, [r2, #0]
 8002cdc:	f421 5100 	bic.w	r1, r1, #8192	; 0x2000
 8002ce0:	6011      	str	r1, [r2, #0]
 8002ce2:	6811      	ldr	r1, [r2, #0]
 8002ce4:	f441 5100 	orr.w	r1, r1, #8192	; 0x2000
 8002ce8:	6011      	str	r1, [r2, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002cea:	6851      	ldr	r1, [r2, #4]
 8002cec:	f041 01a0 	orr.w	r1, r1, #160	; 0xa0
 8002cf0:	6051      	str	r1, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cf2:	6810      	ldr	r0, [r2, #0]
 8002cf4:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002cf8:	d109      	bne.n	8002d0e <HAL_SPI_Transmit_IT+0xa2>
    __HAL_SPI_ENABLE(hspi);
 8002cfa:	6811      	ldr	r1, [r2, #0]
 8002cfc:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002d00:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8002d02:	2200      	movs	r2, #0
 8002d04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8002d08:	4770      	bx	lr
    errorcode = HAL_BUSY;
 8002d0a:	2002      	movs	r0, #2
 8002d0c:	e7f9      	b.n	8002d02 <HAL_SPI_Transmit_IT+0x96>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002d0e:	2000      	movs	r0, #0
 8002d10:	e7f7      	b.n	8002d02 <HAL_SPI_Transmit_IT+0x96>
  __HAL_LOCK(hspi);
 8002d12:	2002      	movs	r0, #2
}
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	08002f73 	.word	0x08002f73
 8002d1c:	08002fa7 	.word	0x08002fa7

08002d20 <HAL_SPI_TransmitReceive_IT>:
{
 8002d20:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hspi);
 8002d22:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
 8002d26:	2c01      	cmp	r4, #1
 8002d28:	d070      	beq.n	8002e0c <HAL_SPI_TransmitReceive_IT+0xec>
 8002d2a:	2401      	movs	r4, #1
 8002d2c:	f880 405c 	strb.w	r4, [r0, #92]	; 0x5c
  tmp_state           = hspi->State;
 8002d30:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d34:	2c01      	cmp	r4, #1
  tmp_state           = hspi->State;
 8002d36:	b2e5      	uxtb	r5, r4
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002d38:	d008      	beq.n	8002d4c <HAL_SPI_TransmitReceive_IT+0x2c>
 8002d3a:	6844      	ldr	r4, [r0, #4]
 8002d3c:	f5b4 7f82 	cmp.w	r4, #260	; 0x104
 8002d40:	d15e      	bne.n	8002e00 <HAL_SPI_TransmitReceive_IT+0xe0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002d42:	6884      	ldr	r4, [r0, #8]
 8002d44:	2c00      	cmp	r4, #0
 8002d46:	d15b      	bne.n	8002e00 <HAL_SPI_TransmitReceive_IT+0xe0>
 8002d48:	2d04      	cmp	r5, #4
 8002d4a:	d159      	bne.n	8002e00 <HAL_SPI_TransmitReceive_IT+0xe0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002d4c:	2900      	cmp	r1, #0
 8002d4e:	d059      	beq.n	8002e04 <HAL_SPI_TransmitReceive_IT+0xe4>
 8002d50:	2a00      	cmp	r2, #0
 8002d52:	d057      	beq.n	8002e04 <HAL_SPI_TransmitReceive_IT+0xe4>
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d055      	beq.n	8002e04 <HAL_SPI_TransmitReceive_IT+0xe4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d58:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002d5c:	6381      	str	r1, [r0, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002d5e:	2c04      	cmp	r4, #4
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d60:	68c1      	ldr	r1, [r0, #12]
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002d62:	6402      	str	r2, [r0, #64]	; 0x40
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002d64:	bf1c      	itt	ne
 8002d66:	2405      	movne	r4, #5
 8002d68:	f880 405d 	strbne.w	r4, [r0, #93]	; 0x5d
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d6c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002d70:	bf8b      	itete	hi
 8002d72:	4a27      	ldrhi	r2, [pc, #156]	; (8002e10 <HAL_SPI_TransmitReceive_IT+0xf0>)
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002d74:	4a27      	ldrls	r2, [pc, #156]	; (8002e14 <HAL_SPI_TransmitReceive_IT+0xf4>)
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8002d76:	64c2      	strhi	r2, [r0, #76]	; 0x4c
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8002d78:	64c2      	strls	r2, [r0, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8002d7a:	bf8c      	ite	hi
 8002d7c:	4a26      	ldrhi	r2, [pc, #152]	; (8002e18 <HAL_SPI_TransmitReceive_IT+0xf8>)
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8002d7e:	4a27      	ldrls	r2, [pc, #156]	; (8002e1c <HAL_SPI_TransmitReceive_IT+0xfc>)
 8002d80:	6502      	str	r2, [r0, #80]	; 0x50
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d82:	6a82      	ldr	r2, [r0, #40]	; 0x28
  hspi->TxXferSize  = Size;
 8002d84:	8783      	strh	r3, [r0, #60]	; 0x3c
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d86:	2400      	movs	r4, #0
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d88:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002d8c:	6604      	str	r4, [r0, #96]	; 0x60
  hspi->TxXferCount = Size;
 8002d8e:	6802      	ldr	r2, [r0, #0]
 8002d90:	87c3      	strh	r3, [r0, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002d92:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002d96:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002d9a:	d12a      	bne.n	8002df2 <HAL_SPI_TransmitReceive_IT+0xd2>
    hspi->CRCSize = 1U;
 8002d9c:	2401      	movs	r4, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002d9e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8002da2:	6484      	str	r4, [r0, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002da4:	d803      	bhi.n	8002dae <HAL_SPI_TransmitReceive_IT+0x8e>
 8002da6:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002da8:	2c02      	cmp	r4, #2
      hspi->CRCSize = 2U;
 8002daa:	bf08      	it	eq
 8002dac:	6484      	streq	r4, [r0, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8002dae:	6814      	ldr	r4, [r2, #0]
 8002db0:	f424 5400 	bic.w	r4, r4, #8192	; 0x2000
 8002db4:	6014      	str	r4, [r2, #0]
 8002db6:	6814      	ldr	r4, [r2, #0]
 8002db8:	f444 5400 	orr.w	r4, r4, #8192	; 0x2000
 8002dbc:	6014      	str	r4, [r2, #0]
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8002dbe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8002dc2:	d801      	bhi.n	8002dc8 <HAL_SPI_TransmitReceive_IT+0xa8>
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d917      	bls.n	8002df8 <HAL_SPI_TransmitReceive_IT+0xd8>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dc8:	6853      	ldr	r3, [r2, #4]
 8002dca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002dce:	6053      	str	r3, [r2, #4]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002dd0:	6853      	ldr	r3, [r2, #4]
 8002dd2:	f043 03e0 	orr.w	r3, r3, #224	; 0xe0
 8002dd6:	6053      	str	r3, [r2, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002dd8:	6813      	ldr	r3, [r2, #0]
 8002dda:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002dde:	d113      	bne.n	8002e08 <HAL_SPI_TransmitReceive_IT+0xe8>
    __HAL_SPI_ENABLE(hspi);
 8002de0:	6811      	ldr	r1, [r2, #0]
 8002de2:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8002de6:	6011      	str	r1, [r2, #0]
  __HAL_UNLOCK(hspi);
 8002de8:	2200      	movs	r2, #0
 8002dea:	f880 205c 	strb.w	r2, [r0, #92]	; 0x5c
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	bd30      	pop	{r4, r5, pc}
    hspi->CRCSize = 0U;
 8002df2:	2400      	movs	r4, #0
 8002df4:	6484      	str	r4, [r0, #72]	; 0x48
 8002df6:	e7e2      	b.n	8002dbe <HAL_SPI_TransmitReceive_IT+0x9e>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002df8:	6853      	ldr	r3, [r2, #4]
 8002dfa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002dfe:	e7e6      	b.n	8002dce <HAL_SPI_TransmitReceive_IT+0xae>
    errorcode = HAL_BUSY;
 8002e00:	2302      	movs	r3, #2
 8002e02:	e7f1      	b.n	8002de8 <HAL_SPI_TransmitReceive_IT+0xc8>
    errorcode = HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e7ef      	b.n	8002de8 <HAL_SPI_TransmitReceive_IT+0xc8>
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e08:	2300      	movs	r3, #0
 8002e0a:	e7ed      	b.n	8002de8 <HAL_SPI_TransmitReceive_IT+0xc8>
  __HAL_LOCK(hspi);
 8002e0c:	2302      	movs	r3, #2
 8002e0e:	e7ee      	b.n	8002dee <HAL_SPI_TransmitReceive_IT+0xce>
 8002e10:	080032d1 	.word	0x080032d1
 8002e14:	080031d9 	.word	0x080031d9
 8002e18:	0800327d 	.word	0x0800327d
 8002e1c:	08003173 	.word	0x08003173

08002e20 <HAL_SPI_Receive_IT>:
{
 8002e20:	b470      	push	{r4, r5, r6}
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002e22:	6886      	ldr	r6, [r0, #8]
{
 8002e24:	4604      	mov	r4, r0
 8002e26:	460d      	mov	r5, r1
  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8002e28:	b95e      	cbnz	r6, 8002e42 <HAL_SPI_Receive_IT+0x22>
 8002e2a:	6843      	ldr	r3, [r0, #4]
 8002e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002e30:	d107      	bne.n	8002e42 <HAL_SPI_Receive_IT+0x22>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002e32:	2304      	movs	r3, #4
 8002e34:	f880 305d 	strb.w	r3, [r0, #93]	; 0x5d
}
 8002e38:	bc70      	pop	{r4, r5, r6}
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	460a      	mov	r2, r1
 8002e3e:	f7ff bf6f 	b.w	8002d20 <HAL_SPI_TransmitReceive_IT>
  __HAL_LOCK(hspi);
 8002e42:	f894 305c 	ldrb.w	r3, [r4, #92]	; 0x5c
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d061      	beq.n	8002f0e <HAL_SPI_Receive_IT+0xee>
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
  if (hspi->State != HAL_SPI_STATE_READY)
 8002e50:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	b2d8      	uxtb	r0, r3
 8002e58:	d155      	bne.n	8002f06 <HAL_SPI_Receive_IT+0xe6>
  if ((pData == NULL) || (Size == 0U))
 8002e5a:	2d00      	cmp	r5, #0
 8002e5c:	d04b      	beq.n	8002ef6 <HAL_SPI_Receive_IT+0xd6>
 8002e5e:	2a00      	cmp	r2, #0
 8002e60:	d049      	beq.n	8002ef6 <HAL_SPI_Receive_IT+0xd6>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002e62:	2304      	movs	r3, #4
 8002e64:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002e6c:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002e6e:	f8a4 2046 	strh.w	r2, [r4, #70]	; 0x46
  hspi->TxXferSize  = 0U;
 8002e72:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002e74:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002e76:	6523      	str	r3, [r4, #80]	; 0x50
 8002e78:	6823      	ldr	r3, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e7a:	68e1      	ldr	r1, [r4, #12]
  hspi->RxXferSize  = Size;
 8002e7c:	f8a4 2044 	strh.w	r2, [r4, #68]	; 0x44
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e80:	685a      	ldr	r2, [r3, #4]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002e82:	6425      	str	r5, [r4, #64]	; 0x40
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e84:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e88:	bf8b      	itete	hi
 8002e8a:	f422 5280 	bichi.w	r2, r2, #4096	; 0x1000
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e8e:	f442 5280 	orrls.w	r2, r2, #4096	; 0x1000
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e92:	605a      	strhi	r2, [r3, #4]
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002e94:	605a      	strls	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8002e96:	bf8c      	ite	hi
 8002e98:	4a1e      	ldrhi	r2, [pc, #120]	; (8002f14 <HAL_SPI_Receive_IT+0xf4>)
    hspi->RxISR = SPI_RxISR_8BIT;
 8002e9a:	4a1f      	ldrls	r2, [pc, #124]	; (8002f18 <HAL_SPI_Receive_IT+0xf8>)
 8002e9c:	64e2      	str	r2, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e9e:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
 8002ea2:	d107      	bne.n	8002eb4 <HAL_SPI_Receive_IT+0x94>
    __HAL_SPI_DISABLE(hspi);
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002eb2:	601a      	str	r2, [r3, #0]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eb4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002eb6:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002eba:	d121      	bne.n	8002f00 <HAL_SPI_Receive_IT+0xe0>
    hspi->CRCSize = 1U;
 8002ebc:	2201      	movs	r2, #1
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002ebe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
    hspi->CRCSize = 1U;
 8002ec2:	64a2      	str	r2, [r4, #72]	; 0x48
    if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->Init.CRCLength == SPI_CRC_LENGTH_16BIT))
 8002ec4:	d803      	bhi.n	8002ece <HAL_SPI_Receive_IT+0xae>
 8002ec6:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002ec8:	2a02      	cmp	r2, #2
      hspi->CRCSize = 2U;
 8002eca:	bf08      	it	eq
 8002ecc:	64a2      	streq	r2, [r4, #72]	; 0x48
    SPI_RESET_CRC(hspi);
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ed4:	601a      	str	r2, [r3, #0]
 8002ed6:	681a      	ldr	r2, [r3, #0]
 8002ed8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002edc:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002ede:	685a      	ldr	r2, [r3, #4]
 8002ee0:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8002ee4:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002ee6:	6818      	ldr	r0, [r3, #0]
 8002ee8:	f010 0040 	ands.w	r0, r0, #64	; 0x40
 8002eec:	d10d      	bne.n	8002f0a <HAL_SPI_Receive_IT+0xea>
    __HAL_SPI_ENABLE(hspi);
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002ef4:	601a      	str	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
 8002efc:	bc70      	pop	{r4, r5, r6}
 8002efe:	4770      	bx	lr
    hspi->CRCSize = 0U;
 8002f00:	2200      	movs	r2, #0
 8002f02:	64a2      	str	r2, [r4, #72]	; 0x48
 8002f04:	e7eb      	b.n	8002ede <HAL_SPI_Receive_IT+0xbe>
    errorcode = HAL_BUSY;
 8002f06:	2002      	movs	r0, #2
 8002f08:	e7f5      	b.n	8002ef6 <HAL_SPI_Receive_IT+0xd6>
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f0a:	2000      	movs	r0, #0
 8002f0c:	e7f3      	b.n	8002ef6 <HAL_SPI_Receive_IT+0xd6>
  __HAL_LOCK(hspi);
 8002f0e:	2002      	movs	r0, #2
 8002f10:	e7f4      	b.n	8002efc <HAL_SPI_Receive_IT+0xdc>
 8002f12:	bf00      	nop
 8002f14:	0800309d 	.word	0x0800309d
 8002f18:	08003031 	.word	0x08003031

08002f1c <HAL_SPI_TxRxCpltCallback>:
 8002f1c:	4770      	bx	lr

08002f1e <HAL_SPI_ErrorCallback>:
 8002f1e:	4770      	bx	lr

08002f20 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 8002f20:	b513      	push	{r0, r1, r4, lr}
 8002f22:	4604      	mov	r4, r0
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f24:	f7fe fcb0 	bl	8001888 <HAL_GetTick>

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002f28:	6821      	ldr	r1, [r4, #0]
 8002f2a:	684b      	ldr	r3, [r1, #4]
 8002f2c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tickstart = HAL_GetTick();
 8002f30:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002f32:	604b      	str	r3, [r1, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8002f34:	4620      	mov	r0, r4
 8002f36:	2164      	movs	r1, #100	; 0x64
 8002f38:	f7ff fb11 	bl	800255e <SPI_EndRxTxTransaction>
 8002f3c:	b118      	cbz	r0, 8002f46 <SPI_CloseTx_ISR+0x26>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f3e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002f40:	f043 0320 	orr.w	r3, r3, #32
 8002f44:	6623      	str	r3, [r4, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002f46:	68a3      	ldr	r3, [r4, #8]
 8002f48:	b933      	cbnz	r3, 8002f58 <SPI_CloseTx_ISR+0x38>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002f4a:	9301      	str	r3, [sp, #4]
 8002f4c:	6823      	ldr	r3, [r4, #0]
 8002f4e:	68da      	ldr	r2, [r3, #12]
 8002f50:	9201      	str	r2, [sp, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	9301      	str	r3, [sp, #4]
 8002f56:	9b01      	ldr	r3, [sp, #4]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 8002f60:	4620      	mov	r0, r4
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f62:	b11b      	cbz	r3, 8002f6c <SPI_CloseTx_ISR+0x4c>
    HAL_SPI_ErrorCallback(hspi);
 8002f64:	f7ff ffdb 	bl	8002f1e <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd10      	pop	{r4, pc}
    HAL_SPI_TxCpltCallback(hspi);
 8002f6c:	f7fe fb04 	bl	8001578 <HAL_SPI_TxCpltCallback>
}
 8002f70:	e7fa      	b.n	8002f68 <SPI_CloseTx_ISR+0x48>

08002f72 <SPI_TxISR_8BIT>:
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002f72:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8002f74:	6803      	ldr	r3, [r0, #0]
 8002f76:	7812      	ldrb	r2, [r2, #0]
 8002f78:	731a      	strb	r2, [r3, #12]
  hspi->pTxBuffPtr++;
 8002f7a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8002f80:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8002f82:	3b01      	subs	r3, #1
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8002f88:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	b953      	cbnz	r3, 8002fa4 <SPI_TxISR_8BIT+0x32>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f8e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002f90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002f94:	bf01      	itttt	eq
 8002f96:	6802      	ldreq	r2, [r0, #0]
 8002f98:	6813      	ldreq	r3, [r2, #0]
 8002f9a:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002f9e:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8002fa0:	f7ff bfbe 	b.w	8002f20 <SPI_CloseTx_ISR>
}
 8002fa4:	4770      	bx	lr

08002fa6 <SPI_TxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa6:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002fa8:	6802      	ldr	r2, [r0, #0]
 8002faa:	f833 1b02 	ldrh.w	r1, [r3], #2
 8002fae:	60d1      	str	r1, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fb0:	6383      	str	r3, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 8002fb2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8002fba:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	b94b      	cbnz	r3, 8002fd4 <SPI_TxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fc0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8002fc2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8002fc6:	bf02      	ittt	eq
 8002fc8:	6813      	ldreq	r3, [r2, #0]
 8002fca:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8002fce:	6013      	streq	r3, [r2, #0]
    SPI_CloseTx_ISR(hspi);
 8002fd0:	f7ff bfa6 	b.w	8002f20 <SPI_CloseTx_ISR>
}
 8002fd4:	4770      	bx	lr

08002fd6 <SPI_CloseRx_ISR>:
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002fd6:	6802      	ldr	r2, [r0, #0]
 8002fd8:	6853      	ldr	r3, [r2, #4]
 8002fda:	f023 0360 	bic.w	r3, r3, #96	; 0x60
{
 8002fde:	b510      	push	{r4, lr}
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8002fe0:	6053      	str	r3, [r2, #4]
{
 8002fe2:	4604      	mov	r4, r0
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 8002fe4:	f7fe fc50 	bl	8001888 <HAL_GetTick>
 8002fe8:	2164      	movs	r1, #100	; 0x64
 8002fea:	4602      	mov	r2, r0
 8002fec:	4620      	mov	r0, r4
 8002fee:	f7ff fa7b 	bl	80024e8 <SPI_EndRxTransaction>
 8002ff2:	b118      	cbz	r0, 8002ffc <SPI_CloseRx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ff4:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002ff6:	f043 0320 	orr.w	r3, r3, #32
 8002ffa:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 8002ffc:	2301      	movs	r3, #1
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8002ffe:	6822      	ldr	r2, [r4, #0]
  hspi->State = HAL_SPI_STATE_READY;
 8003000:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003004:	6893      	ldr	r3, [r2, #8]
 8003006:	f013 0f10 	tst.w	r3, #16
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800300a:	6e23      	ldr	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 800300c:	d009      	beq.n	8003022 <SPI_CloseRx_ISR+0x4c>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 800300e:	f043 0302 	orr.w	r3, r3, #2
 8003012:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003014:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003018:	6093      	str	r3, [r2, #8]
    HAL_SPI_ErrorCallback(hspi);
 800301a:	4620      	mov	r0, r4
      HAL_SPI_ErrorCallback(hspi);
 800301c:	f7ff ff7f 	bl	8002f1e <HAL_SPI_ErrorCallback>
}
 8003020:	e004      	b.n	800302c <SPI_CloseRx_ISR+0x56>
      HAL_SPI_RxCpltCallback(hspi);
 8003022:	4620      	mov	r0, r4
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f9      	bne.n	800301c <SPI_CloseRx_ISR+0x46>
      HAL_SPI_RxCpltCallback(hspi);
 8003028:	f7fe fa9e 	bl	8001568 <HAL_SPI_RxCpltCallback>
}
 800302c:	bd10      	pop	{r4, pc}
	...

08003030 <SPI_RxISR_8BIT>:
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8003030:	6802      	ldr	r2, [r0, #0]
 8003032:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003034:	7b12      	ldrb	r2, [r2, #12]
 8003036:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8003038:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800303a:	3301      	adds	r3, #1
 800303c:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 800303e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003042:	3b01      	subs	r3, #1
 8003044:	b29b      	uxth	r3, r3
 8003046:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 800304a:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800304e:	b29b      	uxth	r3, r3
 8003050:	2b01      	cmp	r3, #1
 8003052:	d108      	bne.n	8003066 <SPI_RxISR_8BIT+0x36>
 8003054:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003056:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800305a:	bf01      	itttt	eq
 800305c:	6802      	ldreq	r2, [r0, #0]
 800305e:	6813      	ldreq	r3, [r2, #0]
 8003060:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8003064:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 8003066:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800306a:	b29b      	uxth	r3, r3
 800306c:	b943      	cbnz	r3, 8003080 <SPI_RxISR_8BIT+0x50>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800306e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8003070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003074:	d102      	bne.n	800307c <SPI_RxISR_8BIT+0x4c>
      hspi->RxISR =  SPI_RxISR_8BITCRC;
 8003076:	4b03      	ldr	r3, [pc, #12]	; (8003084 <SPI_RxISR_8BIT+0x54>)
 8003078:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800307a:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 800307c:	f7ff bfab 	b.w	8002fd6 <SPI_CloseRx_ISR>
}
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	08003089 	.word	0x08003089

08003088 <SPI_RxISR_8BITCRC>:
  READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 8003088:	6802      	ldr	r2, [r0, #0]
 800308a:	7b12      	ldrb	r2, [r2, #12]
  hspi->CRCSize--;
 800308c:	6c82      	ldr	r2, [r0, #72]	; 0x48
 800308e:	3a01      	subs	r2, #1
 8003090:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8003092:	b90a      	cbnz	r2, 8003098 <SPI_RxISR_8BITCRC+0x10>
    SPI_CloseRx_ISR(hspi);
 8003094:	f7ff bf9f 	b.w	8002fd6 <SPI_CloseRx_ISR>
}
 8003098:	4770      	bx	lr
	...

0800309c <SPI_RxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800309c:	6802      	ldr	r2, [r0, #0]
 800309e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80030a0:	68d1      	ldr	r1, [r2, #12]
 80030a2:	f823 1b02 	strh.w	r1, [r3], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80030a6:	6403      	str	r3, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 80030a8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80030ac:	3b01      	subs	r3, #1
 80030ae:	b29b      	uxth	r3, r3
 80030b0:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  if ((hspi->RxXferCount == 1U) && (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE))
 80030b4:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	2b01      	cmp	r3, #1
 80030bc:	d107      	bne.n	80030ce <SPI_RxISR_16BIT+0x32>
 80030be:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80030c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80030c4:	bf02      	ittt	eq
 80030c6:	6813      	ldreq	r3, [r2, #0]
 80030c8:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 80030cc:	6013      	streq	r3, [r2, #0]
  if (hspi->RxXferCount == 0U)
 80030ce:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	b943      	cbnz	r3, 80030e8 <SPI_RxISR_16BIT+0x4c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030d6:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80030d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030dc:	d102      	bne.n	80030e4 <SPI_RxISR_16BIT+0x48>
      hspi->RxISR = SPI_RxISR_16BITCRC;
 80030de:	4b03      	ldr	r3, [pc, #12]	; (80030ec <SPI_RxISR_16BIT+0x50>)
 80030e0:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 80030e2:	4770      	bx	lr
    SPI_CloseRx_ISR(hspi);
 80030e4:	f7ff bf77 	b.w	8002fd6 <SPI_CloseRx_ISR>
}
 80030e8:	4770      	bx	lr
 80030ea:	bf00      	nop
 80030ec:	080030f1 	.word	0x080030f1

080030f0 <SPI_RxISR_16BITCRC>:
  READ_REG(hspi->Instance->DR);
 80030f0:	6803      	ldr	r3, [r0, #0]
 80030f2:	68da      	ldr	r2, [r3, #12]
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80030f4:	685a      	ldr	r2, [r3, #4]
 80030f6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80030fa:	605a      	str	r2, [r3, #4]
  SPI_CloseRx_ISR(hspi);
 80030fc:	f7ff bf6b 	b.w	8002fd6 <SPI_CloseRx_ISR>

08003100 <SPI_CloseRxTx_ISR>:
{
 8003100:	b510      	push	{r4, lr}
 8003102:	4604      	mov	r4, r0
  tickstart = HAL_GetTick();
 8003104:	f7fe fbc0 	bl	8001888 <HAL_GetTick>
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003108:	6821      	ldr	r1, [r4, #0]
 800310a:	684b      	ldr	r3, [r1, #4]
 800310c:	f023 0320 	bic.w	r3, r3, #32
  tickstart = HAL_GetTick();
 8003110:	4602      	mov	r2, r0
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8003112:	604b      	str	r3, [r1, #4]
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8003114:	4620      	mov	r0, r4
 8003116:	2164      	movs	r1, #100	; 0x64
 8003118:	f7ff fa21 	bl	800255e <SPI_EndRxTxTransaction>
 800311c:	b118      	cbz	r0, 8003126 <SPI_CloseRxTx_ISR+0x26>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800311e:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003120:	f043 0320 	orr.w	r3, r3, #32
 8003124:	6623      	str	r3, [r4, #96]	; 0x60
  if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_CRCERR) != RESET)
 8003126:	6822      	ldr	r2, [r4, #0]
 8003128:	6893      	ldr	r3, [r2, #8]
 800312a:	f013 0f10 	tst.w	r3, #16
 800312e:	f04f 0301 	mov.w	r3, #1
 8003132:	d00c      	beq.n	800314e <SPI_CloseRxTx_ISR+0x4e>
    hspi->State = HAL_SPI_STATE_READY;
 8003134:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
 8003138:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800313a:	f043 0302 	orr.w	r3, r3, #2
 800313e:	6623      	str	r3, [r4, #96]	; 0x60
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
 8003140:	f64f 73ef 	movw	r3, #65519	; 0xffef
 8003144:	6093      	str	r3, [r2, #8]
      HAL_SPI_ErrorCallback(hspi);
 8003146:	4620      	mov	r0, r4
 8003148:	f7ff fee9 	bl	8002f1e <HAL_SPI_ErrorCallback>
}
 800314c:	e00a      	b.n	8003164 <SPI_CloseRxTx_ISR+0x64>
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800314e:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8003150:	b962      	cbnz	r2, 800316c <SPI_CloseRxTx_ISR+0x6c>
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8003152:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
        hspi->State = HAL_SPI_STATE_READY;
 8003156:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800315a:	2a04      	cmp	r2, #4
        HAL_SPI_RxCpltCallback(hspi);
 800315c:	4620      	mov	r0, r4
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800315e:	d102      	bne.n	8003166 <SPI_CloseRxTx_ISR+0x66>
        HAL_SPI_RxCpltCallback(hspi);
 8003160:	f7fe fa02 	bl	8001568 <HAL_SPI_RxCpltCallback>
}
 8003164:	bd10      	pop	{r4, pc}
        HAL_SPI_TxRxCpltCallback(hspi);
 8003166:	f7ff fed9 	bl	8002f1c <HAL_SPI_TxRxCpltCallback>
 800316a:	e7fb      	b.n	8003164 <SPI_CloseRxTx_ISR+0x64>
      hspi->State = HAL_SPI_STATE_READY;
 800316c:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
 8003170:	e7e9      	b.n	8003146 <SPI_CloseRxTx_ISR+0x46>

08003172 <SPI_2linesTxISR_8BIT>:
  if (hspi->TxXferCount >= 2U)
 8003172:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
 8003174:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8003176:	6801      	ldr	r1, [r0, #0]
 8003178:	b292      	uxth	r2, r2
 800317a:	2a01      	cmp	r2, #1
 800317c:	d918      	bls.n	80031b0 <SPI_2linesTxISR_8BIT+0x3e>
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800317e:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003182:	60ca      	str	r2, [r1, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 8003184:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 8003186:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003188:	3b02      	subs	r3, #2
    hspi->TxXferCount--;
 800318a:	b29b      	uxth	r3, r3
 800318c:	87c3      	strh	r3, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 800318e:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003190:	b29b      	uxth	r3, r3
 8003192:	b9fb      	cbnz	r3, 80031d4 <SPI_2linesTxISR_8BIT+0x62>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003194:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003196:	6803      	ldr	r3, [r0, #0]
 8003198:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 800319c:	d110      	bne.n	80031c0 <SPI_2linesTxISR_8BIT+0x4e>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031a4:	601a      	str	r2, [r3, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80031a6:	685a      	ldr	r2, [r3, #4]
 80031a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ac:	605a      	str	r2, [r3, #4]
      return;
 80031ae:	4770      	bx	lr
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	730b      	strb	r3, [r1, #12]
    hspi->pTxBuffPtr++;
 80031b4:	6b83      	ldr	r3, [r0, #56]	; 0x38
 80031b6:	3301      	adds	r3, #1
 80031b8:	6383      	str	r3, [r0, #56]	; 0x38
    hspi->TxXferCount--;
 80031ba:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 80031bc:	3b01      	subs	r3, #1
 80031be:	e7e4      	b.n	800318a <SPI_2linesTxISR_8BIT+0x18>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80031c0:	685a      	ldr	r2, [r3, #4]
 80031c2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031c6:	605a      	str	r2, [r3, #4]
    if (hspi->RxXferCount == 0U)
 80031c8:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	b90b      	cbnz	r3, 80031d4 <SPI_2linesTxISR_8BIT+0x62>
      SPI_CloseRxTx_ISR(hspi);
 80031d0:	f7ff bf96 	b.w	8003100 <SPI_CloseRxTx_ISR>
}
 80031d4:	4770      	bx	lr
	...

080031d8 <SPI_2linesRxISR_8BIT>:
  if (hspi->RxXferCount > 1U)
 80031d8:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
 80031dc:	6802      	ldr	r2, [r0, #0]
 80031de:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80031e0:	b289      	uxth	r1, r1
 80031e2:	2901      	cmp	r1, #1
 80031e4:	d922      	bls.n	800322c <SPI_2linesRxISR_8BIT+0x54>
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80031e6:	68d1      	ldr	r1, [r2, #12]
 80031e8:	f823 1b02 	strh.w	r1, [r3], #2
    hspi->pRxBuffPtr += sizeof(uint16_t);
 80031ec:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 80031ee:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80031f2:	3b02      	subs	r3, #2
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 80031fa:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80031fe:	b29b      	uxth	r3, r3
 8003200:	2b01      	cmp	r3, #1
 8003202:	d103      	bne.n	800320c <SPI_2linesRxISR_8BIT+0x34>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003204:	6853      	ldr	r3, [r2, #4]
 8003206:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800320a:	6053      	str	r3, [r2, #4]
  if (hspi->RxXferCount == 0U)
 800320c:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 8003210:	b29b      	uxth	r3, r3
 8003212:	b9fb      	cbnz	r3, 8003254 <SPI_2linesRxISR_8BIT+0x7c>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003214:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8003216:	6803      	ldr	r3, [r0, #0]
 8003218:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800321c:	685a      	ldr	r2, [r3, #4]
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800321e:	d111      	bne.n	8003244 <SPI_2linesRxISR_8BIT+0x6c>
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003220:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003224:	605a      	str	r2, [r3, #4]
      hspi->RxISR =  SPI_2linesRxISR_8BITCRC;
 8003226:	4b0c      	ldr	r3, [pc, #48]	; (8003258 <SPI_2linesRxISR_8BIT+0x80>)
 8003228:	64c3      	str	r3, [r0, #76]	; 0x4c
      return;
 800322a:	4770      	bx	lr
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800322c:	7b12      	ldrb	r2, [r2, #12]
 800322e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 8003230:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003232:	3301      	adds	r3, #1
 8003234:	6403      	str	r3, [r0, #64]	; 0x40
    hspi->RxXferCount--;
 8003236:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 800323a:	3b01      	subs	r3, #1
 800323c:	b29b      	uxth	r3, r3
 800323e:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
 8003242:	e7e3      	b.n	800320c <SPI_2linesRxISR_8BIT+0x34>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003244:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003248:	605a      	str	r2, [r3, #4]
    if (hspi->TxXferCount == 0U)
 800324a:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800324c:	b29b      	uxth	r3, r3
 800324e:	b90b      	cbnz	r3, 8003254 <SPI_2linesRxISR_8BIT+0x7c>
      SPI_CloseRxTx_ISR(hspi);
 8003250:	f7ff bf56 	b.w	8003100 <SPI_CloseRxTx_ISR>
}
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	0800325d 	.word	0x0800325d

0800325c <SPI_2linesRxISR_8BITCRC>:
  READ_REG(*(__IO uint8_t *)&hspi->Instance->DR);
 800325c:	6801      	ldr	r1, [r0, #0]
 800325e:	7b0a      	ldrb	r2, [r1, #12]
  hspi->CRCSize--;
 8003260:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8003262:	3a01      	subs	r2, #1
 8003264:	6482      	str	r2, [r0, #72]	; 0x48
  if (hspi->CRCSize == 0U)
 8003266:	b942      	cbnz	r2, 800327a <SPI_2linesRxISR_8BITCRC+0x1e>
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003268:	684a      	ldr	r2, [r1, #4]
 800326a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800326e:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 8003270:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8003272:	b29b      	uxth	r3, r3
 8003274:	b90b      	cbnz	r3, 800327a <SPI_2linesRxISR_8BITCRC+0x1e>
      SPI_CloseRxTx_ISR(hspi);
 8003276:	f7ff bf43 	b.w	8003100 <SPI_CloseRxTx_ISR>
}
 800327a:	4770      	bx	lr

0800327c <SPI_2linesTxISR_16BIT>:
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800327c:	6b81      	ldr	r1, [r0, #56]	; 0x38
 800327e:	6802      	ldr	r2, [r0, #0]
{
 8003280:	b410      	push	{r4}
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003282:	f831 4b02 	ldrh.w	r4, [r1], #2
 8003286:	60d4      	str	r4, [r2, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8003288:	6381      	str	r1, [r0, #56]	; 0x38
  hspi->TxXferCount--;
 800328a:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 800328c:	3901      	subs	r1, #1
 800328e:	b289      	uxth	r1, r1
 8003290:	87c1      	strh	r1, [r0, #62]	; 0x3e
  if (hspi->TxXferCount == 0U)
 8003292:	8fc1      	ldrh	r1, [r0, #62]	; 0x3e
 8003294:	b289      	uxth	r1, r1
 8003296:	b959      	cbnz	r1, 80032b0 <SPI_2linesTxISR_16BIT+0x34>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003298:	6a81      	ldr	r1, [r0, #40]	; 0x28
 800329a:	f5b1 5f00 	cmp.w	r1, #8192	; 0x2000
 800329e:	d10a      	bne.n	80032b6 <SPI_2linesTxISR_16BIT+0x3a>
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80032a0:	6813      	ldr	r3, [r2, #0]
 80032a2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032a6:	6013      	str	r3, [r2, #0]
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80032a8:	6853      	ldr	r3, [r2, #4]
 80032aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80032ae:	6053      	str	r3, [r2, #4]
}
 80032b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80032b4:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80032b6:	6851      	ldr	r1, [r2, #4]
 80032b8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80032bc:	6051      	str	r1, [r2, #4]
    if (hspi->RxXferCount == 0U)
 80032be:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d1f3      	bne.n	80032b0 <SPI_2linesTxISR_16BIT+0x34>
}
 80032c8:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 80032cc:	f7ff bf18 	b.w	8003100 <SPI_CloseRxTx_ISR>

080032d0 <SPI_2linesRxISR_16BIT>:
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80032d0:	6801      	ldr	r1, [r0, #0]
 80032d2:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80032d4:	b410      	push	{r4}
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 80032d6:	68cc      	ldr	r4, [r1, #12]
 80032d8:	f822 4b02 	strh.w	r4, [r2], #2
  hspi->pRxBuffPtr += sizeof(uint16_t);
 80032dc:	6402      	str	r2, [r0, #64]	; 0x40
  hspi->RxXferCount--;
 80032de:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 80032e2:	3a01      	subs	r2, #1
 80032e4:	b292      	uxth	r2, r2
 80032e6:	f8a0 2046 	strh.w	r2, [r0, #70]	; 0x46
  if (hspi->RxXferCount == 0U)
 80032ea:	f8b0 2046 	ldrh.w	r2, [r0, #70]	; 0x46
 80032ee:	b292      	uxth	r2, r2
 80032f0:	b92a      	cbnz	r2, 80032fe <SPI_2linesRxISR_16BIT+0x2e>
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032f2:	6a82      	ldr	r2, [r0, #40]	; 0x28
 80032f4:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80032f8:	d104      	bne.n	8003304 <SPI_2linesRxISR_16BIT+0x34>
      hspi->RxISR =  SPI_2linesRxISR_16BITCRC;
 80032fa:	4a08      	ldr	r2, [pc, #32]	; (800331c <SPI_2linesRxISR_16BIT+0x4c>)
 80032fc:	64c2      	str	r2, [r0, #76]	; 0x4c
}
 80032fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003302:	4770      	bx	lr
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003304:	684a      	ldr	r2, [r1, #4]
 8003306:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800330a:	604a      	str	r2, [r1, #4]
    if (hspi->TxXferCount == 0U)
 800330c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 800330e:	b29b      	uxth	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d1f4      	bne.n	80032fe <SPI_2linesRxISR_16BIT+0x2e>
}
 8003314:	f85d 4b04 	ldr.w	r4, [sp], #4
      SPI_CloseRxTx_ISR(hspi);
 8003318:	f7ff bef2 	b.w	8003100 <SPI_CloseRxTx_ISR>
 800331c:	08003321 	.word	0x08003321

08003320 <SPI_2linesRxISR_16BITCRC>:
  READ_REG(hspi->Instance->DR);
 8003320:	6803      	ldr	r3, [r0, #0]
 8003322:	68da      	ldr	r2, [r3, #12]
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8003324:	685a      	ldr	r2, [r3, #4]
 8003326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800332a:	605a      	str	r2, [r3, #4]
  SPI_CloseRxTx_ISR(hspi);
 800332c:	f7ff bee8 	b.w	8003100 <SPI_CloseRxTx_ISR>

08003330 <HAL_SPI_IRQHandler>:
{
 8003330:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t itsource = hspi->Instance->CR2;
 8003332:	6803      	ldr	r3, [r0, #0]
 8003334:	685d      	ldr	r5, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8003336:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003338:	0656      	lsls	r6, r2, #25
{
 800333a:	b085      	sub	sp, #20
 800333c:	4604      	mov	r4, r0
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800333e:	ea4f 1192 	mov.w	r1, r2, lsr #6
 8003342:	f3c2 1780 	ubfx	r7, r2, #6, #1
 8003346:	d408      	bmi.n	800335a <HAL_SPI_IRQHandler+0x2a>
 8003348:	07d6      	lsls	r6, r2, #31
 800334a:	d506      	bpl.n	800335a <HAL_SPI_IRQHandler+0x2a>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800334c:	066e      	lsls	r6, r5, #25
 800334e:	d504      	bpl.n	800335a <HAL_SPI_IRQHandler+0x2a>
    hspi->RxISR(hspi);
 8003350:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
}
 8003352:	b005      	add	sp, #20
 8003354:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    hspi->TxISR(hspi);
 8003358:	4718      	bx	r3
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800335a:	0796      	lsls	r6, r2, #30
 800335c:	d504      	bpl.n	8003368 <HAL_SPI_IRQHandler+0x38>
 800335e:	0628      	lsls	r0, r5, #24
 8003360:	d502      	bpl.n	8003368 <HAL_SPI_IRQHandler+0x38>
    hspi->TxISR(hspi);
 8003362:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8003364:	4620      	mov	r0, r4
 8003366:	e7f4      	b.n	8003352 <HAL_SPI_IRQHandler+0x22>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003368:	f3c2 2000 	ubfx	r0, r2, #8, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800336c:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800336e:	ea41 1252 	orr.w	r2, r1, r2, lsr #5
 8003372:	f002 0201 	and.w	r2, r2, #1
 8003376:	4302      	orrs	r2, r0
 8003378:	d057      	beq.n	800342a <HAL_SPI_IRQHandler+0xfa>
 800337a:	06aa      	lsls	r2, r5, #26
 800337c:	d555      	bpl.n	800342a <HAL_SPI_IRQHandler+0xfa>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800337e:	b17f      	cbz	r7, 80033a0 <HAL_SPI_IRQHandler+0x70>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003380:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
 8003384:	2a03      	cmp	r2, #3
 8003386:	f04f 0100 	mov.w	r1, #0
 800338a:	d048      	beq.n	800341e <HAL_SPI_IRQHandler+0xee>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800338c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800338e:	f042 0204 	orr.w	r2, r2, #4
 8003392:	6622      	str	r2, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003394:	9100      	str	r1, [sp, #0]
 8003396:	68da      	ldr	r2, [r3, #12]
 8003398:	9200      	str	r2, [sp, #0]
 800339a:	689a      	ldr	r2, [r3, #8]
 800339c:	9200      	str	r2, [sp, #0]
 800339e:	9a00      	ldr	r2, [sp, #0]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80033a0:	07f1      	lsls	r1, r6, #31
 80033a2:	d50c      	bpl.n	80033be <HAL_SPI_IRQHandler+0x8e>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80033a4:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80033ac:	2200      	movs	r2, #0
 80033ae:	9202      	str	r2, [sp, #8]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	9202      	str	r2, [sp, #8]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80033ba:	601a      	str	r2, [r3, #0]
 80033bc:	9a02      	ldr	r2, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80033be:	b140      	cbz	r0, 80033d2 <HAL_SPI_IRQHandler+0xa2>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80033c0:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80033c2:	f042 0208 	orr.w	r2, r2, #8
 80033c6:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80033c8:	2200      	movs	r2, #0
 80033ca:	9203      	str	r2, [sp, #12]
 80033cc:	689a      	ldr	r2, [r3, #8]
 80033ce:	9203      	str	r2, [sp, #12]
 80033d0:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033d2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80033d4:	b34a      	cbz	r2, 800342a <HAL_SPI_IRQHandler+0xfa>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80033dc:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80033de:	2201      	movs	r2, #1
 80033e0:	f884 205d 	strb.w	r2, [r4, #93]	; 0x5d
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80033e4:	07aa      	lsls	r2, r5, #30
 80033e6:	d022      	beq.n	800342e <HAL_SPI_IRQHandler+0xfe>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80033e8:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80033ea:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80033ec:	f022 0203 	bic.w	r2, r2, #3
 80033f0:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 80033f2:	b140      	cbz	r0, 8003406 <HAL_SPI_IRQHandler+0xd6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80033f4:	4b10      	ldr	r3, [pc, #64]	; (8003438 <HAL_SPI_IRQHandler+0x108>)
 80033f6:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80033f8:	f7fe fac8 	bl	800198c <HAL_DMA_Abort_IT>
 80033fc:	b118      	cbz	r0, 8003406 <HAL_SPI_IRQHandler+0xd6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80033fe:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003404:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8003406:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003408:	b178      	cbz	r0, 800342a <HAL_SPI_IRQHandler+0xfa>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <HAL_SPI_IRQHandler+0x108>)
 800340c:	6383      	str	r3, [r0, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800340e:	f7fe fabd 	bl	800198c <HAL_DMA_Abort_IT>
 8003412:	b150      	cbz	r0, 800342a <HAL_SPI_IRQHandler+0xfa>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003414:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8003416:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341a:	6623      	str	r3, [r4, #96]	; 0x60
 800341c:	e005      	b.n	800342a <HAL_SPI_IRQHandler+0xfa>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800341e:	9101      	str	r1, [sp, #4]
 8003420:	68da      	ldr	r2, [r3, #12]
 8003422:	9201      	str	r2, [sp, #4]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	9301      	str	r3, [sp, #4]
 8003428:	9b01      	ldr	r3, [sp, #4]
}
 800342a:	b005      	add	sp, #20
 800342c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        HAL_SPI_ErrorCallback(hspi);
 800342e:	4620      	mov	r0, r4
 8003430:	f7ff fd75 	bl	8002f1e <HAL_SPI_ErrorCallback>
 8003434:	e7f9      	b.n	800342a <HAL_SPI_IRQHandler+0xfa>
 8003436:	bf00      	nop
 8003438:	0800343d 	.word	0x0800343d

0800343c <SPI_DMAAbortOnError>:
{
 800343c:	b508      	push	{r3, lr}
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800343e:	6a80      	ldr	r0, [r0, #40]	; 0x28
  hspi->RxXferCount = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8003446:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8003448:	f7ff fd69 	bl	8002f1e <HAL_SPI_ErrorCallback>
}
 800344c:	bd08      	pop	{r3, pc}

0800344e <HAL_UART_MspInit>:
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800344e:	4770      	bx	lr

08003450 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003452:	4604      	mov	r4, r0
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 8003454:	6803      	ldr	r3, [r0, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003456:	6921      	ldr	r1, [r4, #16]
 8003458:	68a2      	ldr	r2, [r4, #8]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800345a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800345c:	69c0      	ldr	r0, [r0, #28]
 800345e:	430a      	orrs	r2, r1
 8003460:	6961      	ldr	r1, [r4, #20]
 8003462:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003464:	4993      	ldr	r1, [pc, #588]	; (80036b4 <UART_SetConfig+0x264>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003466:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003468:	4029      	ands	r1, r5
 800346a:	430a      	orrs	r2, r1
 800346c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68e1      	ldr	r1, [r4, #12]
 8003472:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800347a:	4a8f      	ldr	r2, [pc, #572]	; (80036b8 <UART_SetConfig+0x268>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800347c:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800347e:	4293      	cmp	r3, r2
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003480:	bf1c      	itt	ne
 8003482:	6a22      	ldrne	r2, [r4, #32]
 8003484:	4311      	orrne	r1, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003486:	689a      	ldr	r2, [r3, #8]
 8003488:	f422 6230 	bic.w	r2, r2, #2816	; 0xb00
 800348c:	430a      	orrs	r2, r1
 800348e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003490:	4a8a      	ldr	r2, [pc, #552]	; (80036bc <UART_SetConfig+0x26c>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d11b      	bne.n	80034ce <UART_SetConfig+0x7e>
 8003496:	4b8a      	ldr	r3, [pc, #552]	; (80036c0 <UART_SetConfig+0x270>)
 8003498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800349c:	f003 0303 	and.w	r3, r3, #3
 80034a0:	3b01      	subs	r3, #1
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	f200 80d6 	bhi.w	8003654 <UART_SetConfig+0x204>
 80034a8:	4a86      	ldr	r2, [pc, #536]	; (80036c4 <UART_SetConfig+0x274>)
 80034aa:	5cd3      	ldrb	r3, [r2, r3]
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034ac:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 80034b0:	f040 809e 	bne.w	80035f0 <UART_SetConfig+0x1a0>
  {
    switch (clocksource)
 80034b4:	2b08      	cmp	r3, #8
 80034b6:	d828      	bhi.n	800350a <UART_SetConfig+0xba>
 80034b8:	e8df f013 	tbh	[pc, r3, lsl #1]
 80034bc:	00cf00e0 	.word	0x00cf00e0
 80034c0:	00270098 	.word	0x00270098
 80034c4:	002700d5 	.word	0x002700d5
 80034c8:	00270027 	.word	0x00270027
 80034cc:	00e4      	.short	0x00e4
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ce:	4a7e      	ldr	r2, [pc, #504]	; (80036c8 <UART_SetConfig+0x278>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d108      	bne.n	80034e6 <UART_SetConfig+0x96>
 80034d4:	4b7a      	ldr	r3, [pc, #488]	; (80036c0 <UART_SetConfig+0x270>)
 80034d6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80034da:	4b7a      	ldr	r3, [pc, #488]	; (80036c4 <UART_SetConfig+0x274>)
 80034dc:	f002 020c 	and.w	r2, r2, #12
 80034e0:	4413      	add	r3, r2
 80034e2:	78db      	ldrb	r3, [r3, #3]
  if (UART_INSTANCE_LOWPOWER(huart))
 80034e4:	e7e2      	b.n	80034ac <UART_SetConfig+0x5c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034e6:	4a79      	ldr	r2, [pc, #484]	; (80036cc <UART_SetConfig+0x27c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d119      	bne.n	8003520 <UART_SetConfig+0xd0>
 80034ec:	4b74      	ldr	r3, [pc, #464]	; (80036c0 <UART_SetConfig+0x270>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80034f6:	2b20      	cmp	r3, #32
 80034f8:	f000 80b8 	beq.w	800366c <UART_SetConfig+0x21c>
 80034fc:	d807      	bhi.n	800350e <UART_SetConfig+0xbe>
 80034fe:	2b00      	cmp	r3, #0
 8003500:	f000 80b9 	beq.w	8003676 <UART_SetConfig+0x226>
 8003504:	2b10      	cmp	r3, #16
 8003506:	f000 80ab 	beq.w	8003660 <UART_SetConfig+0x210>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800350a:	2001      	movs	r0, #1
 800350c:	e04e      	b.n	80035ac <UART_SetConfig+0x15c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800350e:	2b30      	cmp	r3, #48	; 0x30
 8003510:	d1fb      	bne.n	800350a <UART_SetConfig+0xba>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003512:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003516:	f000 80b5 	beq.w	8003684 <UART_SetConfig+0x234>
 800351a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800351e:	e083      	b.n	8003628 <UART_SetConfig+0x1d8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003520:	4a6b      	ldr	r2, [pc, #428]	; (80036d0 <UART_SetConfig+0x280>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d10f      	bne.n	8003546 <UART_SetConfig+0xf6>
 8003526:	4b66      	ldr	r3, [pc, #408]	; (80036c0 <UART_SetConfig+0x270>)
 8003528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800352c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003530:	2b80      	cmp	r3, #128	; 0x80
 8003532:	f000 809b 	beq.w	800366c <UART_SetConfig+0x21c>
 8003536:	d804      	bhi.n	8003542 <UART_SetConfig+0xf2>
 8003538:	2b00      	cmp	r3, #0
 800353a:	f000 809c 	beq.w	8003676 <UART_SetConfig+0x226>
 800353e:	2b40      	cmp	r3, #64	; 0x40
 8003540:	e7e1      	b.n	8003506 <UART_SetConfig+0xb6>
 8003542:	2bc0      	cmp	r3, #192	; 0xc0
 8003544:	e7e4      	b.n	8003510 <UART_SetConfig+0xc0>
 8003546:	4a63      	ldr	r2, [pc, #396]	; (80036d4 <UART_SetConfig+0x284>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d112      	bne.n	8003572 <UART_SetConfig+0x122>
 800354c:	4b5c      	ldr	r3, [pc, #368]	; (80036c0 <UART_SetConfig+0x270>)
 800354e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003552:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003556:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800355a:	f000 8087 	beq.w	800366c <UART_SetConfig+0x21c>
 800355e:	d805      	bhi.n	800356c <UART_SetConfig+0x11c>
 8003560:	2b00      	cmp	r3, #0
 8003562:	f000 8088 	beq.w	8003676 <UART_SetConfig+0x226>
 8003566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800356a:	e7cc      	b.n	8003506 <UART_SetConfig+0xb6>
 800356c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003570:	e7ce      	b.n	8003510 <UART_SetConfig+0xc0>
 8003572:	4a51      	ldr	r2, [pc, #324]	; (80036b8 <UART_SetConfig+0x268>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d1c8      	bne.n	800350a <UART_SetConfig+0xba>
 8003578:	4b51      	ldr	r3, [pc, #324]	; (80036c0 <UART_SetConfig+0x270>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003582:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003586:	d015      	beq.n	80035b4 <UART_SetConfig+0x164>
 8003588:	d806      	bhi.n	8003598 <UART_SetConfig+0x148>
 800358a:	b15b      	cbz	r3, 80035a4 <UART_SetConfig+0x154>
 800358c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003590:	d1bb      	bne.n	800350a <UART_SetConfig+0xba>
        pclk = HAL_RCC_GetSysClockFreq();
 8003592:	f7fe fb61 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
        break;
 8003596:	e007      	b.n	80035a8 <UART_SetConfig+0x158>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800359c:	d1b5      	bne.n	800350a <UART_SetConfig+0xba>
        pclk = (uint32_t) LSE_VALUE;
 800359e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80035a2:	e008      	b.n	80035b6 <UART_SetConfig+0x166>
        pclk = HAL_RCC_GetPCLK1Freq();
 80035a4:	f7fe fec0 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 80035a8:	b928      	cbnz	r0, 80035b6 <UART_SetConfig+0x166>
 80035aa:	2000      	movs	r0, #0
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80035ac:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 80035ae:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60

  return ret;
}
 80035b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        pclk = (uint32_t) HSI_VALUE;
 80035b4:	4848      	ldr	r0, [pc, #288]	; (80036d8 <UART_SetConfig+0x288>)
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80035b6:	6862      	ldr	r2, [r4, #4]
 80035b8:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80035bc:	4298      	cmp	r0, r3
 80035be:	d3a4      	bcc.n	800350a <UART_SetConfig+0xba>
 80035c0:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80035c4:	d8a1      	bhi.n	800350a <UART_SetConfig+0xba>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, (uint64_t)huart->Init.BaudRate));
 80035c6:	0856      	lsrs	r6, r2, #1
 80035c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035cc:	2700      	movs	r7, #0
 80035ce:	fbe1 6700 	umlal	r6, r7, r1, r0
 80035d2:	2300      	movs	r3, #0
 80035d4:	4630      	mov	r0, r6
 80035d6:	4639      	mov	r1, r7
 80035d8:	f7fc fe52 	bl	8000280 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80035dc:	4b3f      	ldr	r3, [pc, #252]	; (80036dc <UART_SetConfig+0x28c>)
 80035de:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80035e2:	429a      	cmp	r2, r3
 80035e4:	d891      	bhi.n	800350a <UART_SetConfig+0xba>
          huart->Instance->BRR = usartdiv;
 80035e6:	6823      	ldr	r3, [r4, #0]
 80035e8:	60d8      	str	r0, [r3, #12]
 80035ea:	e7de      	b.n	80035aa <UART_SetConfig+0x15a>
        pclk = (uint32_t) HSI_VALUE;
 80035ec:	483a      	ldr	r0, [pc, #232]	; (80036d8 <UART_SetConfig+0x288>)
 80035ee:	e049      	b.n	8003684 <UART_SetConfig+0x234>
    switch (clocksource)
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d88a      	bhi.n	800350a <UART_SetConfig+0xba>
 80035f4:	a201      	add	r2, pc, #4	; (adr r2, 80035fc <UART_SetConfig+0x1ac>)
 80035f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035fa:	bf00      	nop
 80035fc:	08003621 	.word	0x08003621
 8003600:	08003649 	.word	0x08003649
 8003604:	08003673 	.word	0x08003673
 8003608:	0800350b 	.word	0x0800350b
 800360c:	0800364f 	.word	0x0800364f
 8003610:	0800350b 	.word	0x0800350b
 8003614:	0800350b 	.word	0x0800350b
 8003618:	0800350b 	.word	0x0800350b
 800361c:	0800351b 	.word	0x0800351b
        pclk = HAL_RCC_GetPCLK1Freq();
 8003620:	f7fe fe82 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003624:	2800      	cmp	r0, #0
 8003626:	d0c0      	beq.n	80035aa <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003628:	6862      	ldr	r2, [r4, #4]
 800362a:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 800362e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003632:	b29b      	uxth	r3, r3
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003634:	f1a3 0110 	sub.w	r1, r3, #16
 8003638:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800363c:	4291      	cmp	r1, r2
 800363e:	f63f af64 	bhi.w	800350a <UART_SetConfig+0xba>
        huart->Instance->BRR = usartdiv;
 8003642:	6822      	ldr	r2, [r4, #0]
 8003644:	60d3      	str	r3, [r2, #12]
 8003646:	e7b0      	b.n	80035aa <UART_SetConfig+0x15a>
        pclk = HAL_RCC_GetPCLK2Freq();
 8003648:	f7fe fe80 	bl	800234c <HAL_RCC_GetPCLK2Freq>
        break;
 800364c:	e7ea      	b.n	8003624 <UART_SetConfig+0x1d4>
        pclk = HAL_RCC_GetSysClockFreq();
 800364e:	f7fe fb03 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
        break;
 8003652:	e7e7      	b.n	8003624 <UART_SetConfig+0x1d4>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003654:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003658:	d1f6      	bne.n	8003648 <UART_SetConfig+0x1f8>
        pclk = HAL_RCC_GetPCLK2Freq();
 800365a:	f7fe fe77 	bl	800234c <HAL_RCC_GetPCLK2Freq>
        break;
 800365e:	e00f      	b.n	8003680 <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003660:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003664:	d1f3      	bne.n	800364e <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetSysClockFreq();
 8003666:	f7fe faf7 	bl	8001c58 <HAL_RCC_GetSysClockFreq>
        break;
 800366a:	e009      	b.n	8003680 <UART_SetConfig+0x230>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800366c:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8003670:	d0bc      	beq.n	80035ec <UART_SetConfig+0x19c>
        pclk = (uint32_t) HSI_VALUE;
 8003672:	4819      	ldr	r0, [pc, #100]	; (80036d8 <UART_SetConfig+0x288>)
 8003674:	e7d8      	b.n	8003628 <UART_SetConfig+0x1d8>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003676:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 800367a:	d1d1      	bne.n	8003620 <UART_SetConfig+0x1d0>
        pclk = HAL_RCC_GetPCLK1Freq();
 800367c:	f7fe fe54 	bl	8002328 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 8003680:	2800      	cmp	r0, #0
 8003682:	d092      	beq.n	80035aa <UART_SetConfig+0x15a>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003684:	6862      	ldr	r2, [r4, #4]
 8003686:	0853      	lsrs	r3, r2, #1
 8003688:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800368c:	fbb0 f0f2 	udiv	r0, r0, r2
 8003690:	b283      	uxth	r3, r0
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003692:	f1a3 0110 	sub.w	r1, r3, #16
 8003696:	f64f 72ef 	movw	r2, #65519	; 0xffef
 800369a:	4291      	cmp	r1, r2
 800369c:	f63f af35 	bhi.w	800350a <UART_SetConfig+0xba>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036a0:	f020 000f 	bic.w	r0, r0, #15
        huart->Instance->BRR = brrtemp;
 80036a4:	6822      	ldr	r2, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80036a6:	b280      	uxth	r0, r0
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80036a8:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 80036ac:	4318      	orrs	r0, r3
 80036ae:	60d0      	str	r0, [r2, #12]
 80036b0:	e77b      	b.n	80035aa <UART_SetConfig+0x15a>
 80036b2:	bf00      	nop
 80036b4:	efff69f3 	.word	0xefff69f3
 80036b8:	40008000 	.word	0x40008000
 80036bc:	40013800 	.word	0x40013800
 80036c0:	40021000 	.word	0x40021000
 80036c4:	08005090 	.word	0x08005090
 80036c8:	40004400 	.word	0x40004400
 80036cc:	40004800 	.word	0x40004800
 80036d0:	40004c00 	.word	0x40004c00
 80036d4:	40005000 	.word	0x40005000
 80036d8:	00f42400 	.word	0x00f42400
 80036dc:	000ffcff 	.word	0x000ffcff

080036e0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80036e2:	07da      	lsls	r2, r3, #31
{
 80036e4:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80036e6:	d506      	bpl.n	80036f6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80036e8:	6801      	ldr	r1, [r0, #0]
 80036ea:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80036ec:	684a      	ldr	r2, [r1, #4]
 80036ee:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80036f2:	4322      	orrs	r2, r4
 80036f4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80036f6:	079c      	lsls	r4, r3, #30
 80036f8:	d506      	bpl.n	8003708 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036fa:	6801      	ldr	r1, [r0, #0]
 80036fc:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80036fe:	684a      	ldr	r2, [r1, #4]
 8003700:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8003704:	4322      	orrs	r2, r4
 8003706:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003708:	0759      	lsls	r1, r3, #29
 800370a:	d506      	bpl.n	800371a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800370c:	6801      	ldr	r1, [r0, #0]
 800370e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8003710:	684a      	ldr	r2, [r1, #4]
 8003712:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003716:	4322      	orrs	r2, r4
 8003718:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800371a:	071a      	lsls	r2, r3, #28
 800371c:	d506      	bpl.n	800372c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800371e:	6801      	ldr	r1, [r0, #0]
 8003720:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8003722:	684a      	ldr	r2, [r1, #4]
 8003724:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003728:	4322      	orrs	r2, r4
 800372a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800372c:	06dc      	lsls	r4, r3, #27
 800372e:	d506      	bpl.n	800373e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003730:	6801      	ldr	r1, [r0, #0]
 8003732:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8003734:	688a      	ldr	r2, [r1, #8]
 8003736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800373a:	4322      	orrs	r2, r4
 800373c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800373e:	0699      	lsls	r1, r3, #26
 8003740:	d506      	bpl.n	8003750 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003742:	6801      	ldr	r1, [r0, #0]
 8003744:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8003746:	688a      	ldr	r2, [r1, #8]
 8003748:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800374c:	4322      	orrs	r2, r4
 800374e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003750:	065a      	lsls	r2, r3, #25
 8003752:	d50f      	bpl.n	8003774 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003754:	6801      	ldr	r1, [r0, #0]
 8003756:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8003758:	684a      	ldr	r2, [r1, #4]
 800375a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 800375e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003760:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003764:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003766:	d105      	bne.n	8003774 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003768:	684a      	ldr	r2, [r1, #4]
 800376a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800376c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8003770:	4322      	orrs	r2, r4
 8003772:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003774:	061b      	lsls	r3, r3, #24
 8003776:	d506      	bpl.n	8003786 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003778:	6802      	ldr	r2, [r0, #0]
 800377a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800377c:	6853      	ldr	r3, [r2, #4]
 800377e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8003782:	430b      	orrs	r3, r1
 8003784:	6053      	str	r3, [r2, #4]
  }
}
 8003786:	bd10      	pop	{r4, pc}

08003788 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003788:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800378c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8003790:	4604      	mov	r4, r0
 8003792:	460e      	mov	r6, r1
 8003794:	4615      	mov	r5, r2
 8003796:	461f      	mov	r7, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003798:	6822      	ldr	r2, [r4, #0]
 800379a:	69d3      	ldr	r3, [r2, #28]
 800379c:	ea36 0303 	bics.w	r3, r6, r3
 80037a0:	bf0c      	ite	eq
 80037a2:	2301      	moveq	r3, #1
 80037a4:	2300      	movne	r3, #0
 80037a6:	42ab      	cmp	r3, r5
 80037a8:	d001      	beq.n	80037ae <UART_WaitOnFlagUntilTimeout+0x26>
          return HAL_TIMEOUT;
        }
      }
    }
  }
  return HAL_OK;
 80037aa:	2000      	movs	r0, #0
 80037ac:	e01a      	b.n	80037e4 <UART_WaitOnFlagUntilTimeout+0x5c>
    if (Timeout != HAL_MAX_DELAY)
 80037ae:	f1b8 3fff 	cmp.w	r8, #4294967295
 80037b2:	d0f2      	beq.n	800379a <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037b4:	f7fe f868 	bl	8001888 <HAL_GetTick>
 80037b8:	1bc0      	subs	r0, r0, r7
 80037ba:	4540      	cmp	r0, r8
 80037bc:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037be:	6803      	ldr	r3, [r0, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037c0:	d802      	bhi.n	80037c8 <UART_WaitOnFlagUntilTimeout+0x40>
 80037c2:	f1b8 0f00 	cmp.w	r8, #0
 80037c6:	d10f      	bne.n	80037e8 <UART_WaitOnFlagUntilTimeout+0x60>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037c8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037cc:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ce:	6883      	ldr	r3, [r0, #8]
 80037d0:	f023 0301 	bic.w	r3, r3, #1
 80037d4:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 80037d6:	2320      	movs	r3, #32
 80037d8:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 80037da:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 80037dc:	2300      	movs	r3, #0
 80037de:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
          return HAL_TIMEOUT;
 80037e2:	2003      	movs	r0, #3
}
 80037e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80037e8:	075a      	lsls	r2, r3, #29
 80037ea:	d5d5      	bpl.n	8003798 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80037ec:	69c3      	ldr	r3, [r0, #28]
 80037ee:	051b      	lsls	r3, r3, #20
 80037f0:	d5d2      	bpl.n	8003798 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80037f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80037f6:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80037f8:	6803      	ldr	r3, [r0, #0]
 80037fa:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80037fe:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003800:	6883      	ldr	r3, [r0, #8]
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	6083      	str	r3, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8003808:	2320      	movs	r3, #32
 800380a:	6763      	str	r3, [r4, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800380c:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800380e:	67e3      	str	r3, [r4, #124]	; 0x7c
 8003810:	e7e4      	b.n	80037dc <UART_WaitOnFlagUntilTimeout+0x54>

08003812 <HAL_UART_Transmit>:
{
 8003812:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8003816:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003818:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800381a:	2b20      	cmp	r3, #32
{
 800381c:	4604      	mov	r4, r0
 800381e:	460e      	mov	r6, r1
 8003820:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003822:	d14d      	bne.n	80038c0 <HAL_UART_Transmit+0xae>
    if ((pData == NULL) || (Size == 0U))
 8003824:	2900      	cmp	r1, #0
 8003826:	d049      	beq.n	80038bc <HAL_UART_Transmit+0xaa>
 8003828:	2a00      	cmp	r2, #0
 800382a:	d047      	beq.n	80038bc <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800382c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8003830:	2b01      	cmp	r3, #1
 8003832:	d045      	beq.n	80038c0 <HAL_UART_Transmit+0xae>
 8003834:	2301      	movs	r3, #1
 8003836:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383a:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800383c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	67c5      	str	r5, [r0, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003840:	6743      	str	r3, [r0, #116]	; 0x74
    tickstart = HAL_GetTick();
 8003842:	f7fe f821 	bl	8001888 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003846:	68a2      	ldr	r2, [r4, #8]
    huart->TxXferSize  = Size;
 8003848:	f8a4 7050 	strh.w	r7, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800384c:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8003850:	4603      	mov	r3, r0
    huart->TxXferCount = Size;
 8003852:	f8a4 7052 	strh.w	r7, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003856:	d103      	bne.n	8003860 <HAL_UART_Transmit+0x4e>
 8003858:	6922      	ldr	r2, [r4, #16]
 800385a:	b90a      	cbnz	r2, 8003860 <HAL_UART_Transmit+0x4e>
 800385c:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800385e:	4616      	mov	r6, r2
    __HAL_UNLOCK(huart);
 8003860:	2200      	movs	r2, #0
 8003862:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8003866:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800386e:	b292      	uxth	r2, r2
 8003870:	b93a      	cbnz	r2, 8003882 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003872:	2140      	movs	r1, #64	; 0x40
 8003874:	4620      	mov	r0, r4
 8003876:	f7ff ff87 	bl	8003788 <UART_WaitOnFlagUntilTimeout>
 800387a:	b950      	cbnz	r0, 8003892 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800387c:	2320      	movs	r3, #32
 800387e:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8003880:	e008      	b.n	8003894 <HAL_UART_Transmit+0x82>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003882:	2200      	movs	r2, #0
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	4620      	mov	r0, r4
 8003888:	9303      	str	r3, [sp, #12]
 800388a:	f7ff ff7d 	bl	8003788 <UART_WaitOnFlagUntilTimeout>
 800388e:	9b03      	ldr	r3, [sp, #12]
 8003890:	b118      	cbz	r0, 800389a <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8003892:	2003      	movs	r0, #3
}
 8003894:	b004      	add	sp, #16
 8003896:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (pdata8bits == NULL)
 800389a:	6821      	ldr	r1, [r4, #0]
 800389c:	b95e      	cbnz	r6, 80038b6 <HAL_UART_Transmit+0xa4>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800389e:	f835 2b02 	ldrh.w	r2, [r5], #2
 80038a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038a6:	850a      	strh	r2, [r1, #40]	; 0x28
      huart->TxXferCount--;
 80038a8:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80038ac:	3a01      	subs	r2, #1
 80038ae:	b292      	uxth	r2, r2
 80038b0:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
 80038b4:	e7d7      	b.n	8003866 <HAL_UART_Transmit+0x54>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038b6:	f816 2b01 	ldrb.w	r2, [r6], #1
 80038ba:	e7f4      	b.n	80038a6 <HAL_UART_Transmit+0x94>
      return  HAL_ERROR;
 80038bc:	2001      	movs	r0, #1
 80038be:	e7e9      	b.n	8003894 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80038c0:	2002      	movs	r0, #2
 80038c2:	e7e7      	b.n	8003894 <HAL_UART_Transmit+0x82>

080038c4 <UART_CheckIdleState>:
{
 80038c4:	b530      	push	{r4, r5, lr}
 80038c6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	2500      	movs	r5, #0
{
 80038ca:	b085      	sub	sp, #20
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	67c5      	str	r5, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 80038ce:	f7fd ffdb 	bl	8001888 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038d2:	6822      	ldr	r2, [r4, #0]
 80038d4:	6812      	ldr	r2, [r2, #0]
 80038d6:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 80038d8:	4603      	mov	r3, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038da:	d414      	bmi.n	8003906 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80038dc:	6822      	ldr	r2, [r4, #0]
 80038de:	6812      	ldr	r2, [r2, #0]
 80038e0:	0752      	lsls	r2, r2, #29
 80038e2:	d509      	bpl.n	80038f8 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e4:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 80038e8:	9200      	str	r2, [sp, #0]
 80038ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80038ee:	2200      	movs	r2, #0
 80038f0:	4620      	mov	r0, r4
 80038f2:	f7ff ff49 	bl	8003788 <UART_WaitOnFlagUntilTimeout>
 80038f6:	b998      	cbnz	r0, 8003920 <UART_CheckIdleState+0x5c>
  huart->gState = HAL_UART_STATE_READY;
 80038f8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80038fa:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80038fc:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 80038fe:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8003902:	67a3      	str	r3, [r4, #120]	; 0x78
  return HAL_OK;
 8003904:	e00d      	b.n	8003922 <UART_CheckIdleState+0x5e>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003906:	f06f 427e 	mvn.w	r2, #4261412864	; 0xfe000000
 800390a:	9200      	str	r2, [sp, #0]
 800390c:	9003      	str	r0, [sp, #12]
 800390e:	462a      	mov	r2, r5
 8003910:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003914:	4620      	mov	r0, r4
 8003916:	f7ff ff37 	bl	8003788 <UART_WaitOnFlagUntilTimeout>
 800391a:	9b03      	ldr	r3, [sp, #12]
 800391c:	2800      	cmp	r0, #0
 800391e:	d0dd      	beq.n	80038dc <UART_CheckIdleState+0x18>
      return HAL_TIMEOUT;
 8003920:	2003      	movs	r0, #3
}
 8003922:	b005      	add	sp, #20
 8003924:	bd30      	pop	{r4, r5, pc}

08003926 <HAL_UART_Init>:
{
 8003926:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003928:	4604      	mov	r4, r0
 800392a:	b340      	cbz	r0, 800397e <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 800392c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 800392e:	b91b      	cbnz	r3, 8003938 <HAL_UART_Init+0x12>
    huart->Lock = HAL_UNLOCKED;
 8003930:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8003934:	f7ff fd8b 	bl	800344e <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8003938:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800393a:	2324      	movs	r3, #36	; 0x24
 800393c:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 800393e:	6813      	ldr	r3, [r2, #0]
 8003940:	f023 0301 	bic.w	r3, r3, #1
 8003944:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003946:	4620      	mov	r0, r4
 8003948:	f7ff fd82 	bl	8003450 <UART_SetConfig>
 800394c:	2801      	cmp	r0, #1
 800394e:	d016      	beq.n	800397e <HAL_UART_Init+0x58>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003950:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003952:	b113      	cbz	r3, 800395a <HAL_UART_Init+0x34>
    UART_AdvFeatureConfig(huart);
 8003954:	4620      	mov	r0, r4
 8003956:	f7ff fec3 	bl	80036e0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800395a:	6823      	ldr	r3, [r4, #0]
 800395c:	685a      	ldr	r2, [r3, #4]
 800395e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800396a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800396c:	681a      	ldr	r2, [r3, #0]
 800396e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8003972:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8003974:	601a      	str	r2, [r3, #0]
}
 8003976:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800397a:	f7ff bfa3 	b.w	80038c4 <UART_CheckIdleState>
}
 800397e:	2001      	movs	r0, #1
 8003980:	bd10      	pop	{r4, pc}
	...

08003984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80039bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003988:	f7fd ff18 	bl	80017bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800398c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800398e:	e003      	b.n	8003998 <LoopCopyDataInit>

08003990 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003990:	4b0b      	ldr	r3, [pc, #44]	; (80039c0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003992:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003994:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003996:	3104      	adds	r1, #4

08003998 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003998:	480a      	ldr	r0, [pc, #40]	; (80039c4 <LoopForever+0xa>)
	ldr	r3, =_edata
 800399a:	4b0b      	ldr	r3, [pc, #44]	; (80039c8 <LoopForever+0xe>)
	adds	r2, r0, r1
 800399c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800399e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80039a0:	d3f6      	bcc.n	8003990 <CopyDataInit>
	ldr	r2, =_sbss
 80039a2:	4a0a      	ldr	r2, [pc, #40]	; (80039cc <LoopForever+0x12>)
	b	LoopFillZerobss
 80039a4:	e002      	b.n	80039ac <LoopFillZerobss>

080039a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80039a6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80039a8:	f842 3b04 	str.w	r3, [r2], #4

080039ac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80039ac:	4b08      	ldr	r3, [pc, #32]	; (80039d0 <LoopForever+0x16>)
	cmp	r2, r3
 80039ae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80039b0:	d3f9      	bcc.n	80039a6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80039b2:	f000 f861 	bl	8003a78 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039b6:	f7fc fddf 	bl	8000578 <main>

080039ba <LoopForever>:

LoopForever:
    b LoopForever
 80039ba:	e7fe      	b.n	80039ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80039bc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80039c0:	08005a30 	.word	0x08005a30
	ldr	r0, =_sdata
 80039c4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80039c8:	20000088 	.word	0x20000088
	ldr	r2, =_sbss
 80039cc:	20000088 	.word	0x20000088
	ldr	r3, = _ebss
 80039d0:	20000d00 	.word	0x20000d00

080039d4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80039d4:	e7fe      	b.n	80039d4 <ADC1_2_IRQHandler>

080039d6 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 80039d6:	2001      	movs	r0, #1
 80039d8:	4770      	bx	lr

080039da <_kill>:

int _kill(int pid, int sig)
{
 80039da:	b508      	push	{r3, lr}
	errno = EINVAL;
 80039dc:	f000 f846 	bl	8003a6c <__errno>
 80039e0:	2316      	movs	r3, #22
 80039e2:	6003      	str	r3, [r0, #0]
	return -1;
}
 80039e4:	f04f 30ff 	mov.w	r0, #4294967295
 80039e8:	bd08      	pop	{r3, pc}

080039ea <_exit>:

void _exit (int status)
{
 80039ea:	b508      	push	{r3, lr}
	errno = EINVAL;
 80039ec:	f000 f83e 	bl	8003a6c <__errno>
 80039f0:	2316      	movs	r3, #22
 80039f2:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 80039f4:	e7fe      	b.n	80039f4 <_exit+0xa>

080039f6 <_read>:
}

int _read (int file, char *ptr, int len)
{
 80039f6:	b510      	push	{r4, lr}
 80039f8:	460c      	mov	r4, r1
	/* The I/O library uses an internal buffer */
	/* It asks for 1024 characters even if only getc() is used. */
	/* If we use a for(;;) loop on the number of characters requested, */
	/* the user is forced to enter the exact number requested, even if only one is needed. */
	/* So here we return only 1 character even if requested length is > 1 */
	*ptr = __io_getchar();
 80039fa:	f3af 8000 	nop.w
 80039fe:	7020      	strb	r0, [r4, #0]

	return 1;
}
 8003a00:	2001      	movs	r0, #1
 8003a02:	bd10      	pop	{r4, pc}

08003a04 <_write>:

int _write(int file, char *ptr, int len)
{
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	460e      	mov	r6, r1
 8003a08:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a0a:	2500      	movs	r5, #0
 8003a0c:	42a5      	cmp	r5, r4
 8003a0e:	db01      	blt.n	8003a14 <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8003a10:	4620      	mov	r0, r4
 8003a12:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8003a14:	5d70      	ldrb	r0, [r6, r5]
 8003a16:	f7fc fef5 	bl	8000804 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a1a:	3501      	adds	r5, #1
 8003a1c:	e7f6      	b.n	8003a0c <_write+0x8>
	...

08003a20 <_sbrk>:

caddr_t _sbrk(int incr)
{
 8003a20:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <_sbrk+0x2c>)
 8003a24:	6819      	ldr	r1, [r3, #0]
{
 8003a26:	4602      	mov	r2, r0
	if (heap_end == 0)
 8003a28:	b909      	cbnz	r1, 8003a2e <_sbrk+0xe>
		heap_end = &end;
 8003a2a:	4909      	ldr	r1, [pc, #36]	; (8003a50 <_sbrk+0x30>)
 8003a2c:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 8003a2e:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 8003a30:	4669      	mov	r1, sp
 8003a32:	4402      	add	r2, r0
 8003a34:	428a      	cmp	r2, r1
 8003a36:	d906      	bls.n	8003a46 <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8003a38:	f000 f818 	bl	8003a6c <__errno>
 8003a3c:	230c      	movs	r3, #12
 8003a3e:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003a40:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8003a44:	bd08      	pop	{r3, pc}
	heap_end += incr;
 8003a46:	601a      	str	r2, [r3, #0]
	return (caddr_t) prev_heap_end;
 8003a48:	e7fc      	b.n	8003a44 <_sbrk+0x24>
 8003a4a:	bf00      	nop
 8003a4c:	200002ac 	.word	0x200002ac
 8003a50:	20000d00 	.word	0x20000d00

08003a54 <_close>:

int _close(int file)
{
	return -1;
}
 8003a54:	f04f 30ff 	mov.w	r0, #4294967295
 8003a58:	4770      	bx	lr

08003a5a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003a5a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a5e:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003a60:	2000      	movs	r0, #0
 8003a62:	4770      	bx	lr

08003a64 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003a64:	2001      	movs	r0, #1
 8003a66:	4770      	bx	lr

08003a68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003a68:	2000      	movs	r0, #0
 8003a6a:	4770      	bx	lr

08003a6c <__errno>:
 8003a6c:	4b01      	ldr	r3, [pc, #4]	; (8003a74 <__errno+0x8>)
 8003a6e:	6818      	ldr	r0, [r3, #0]
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000024 	.word	0x20000024

08003a78 <__libc_init_array>:
 8003a78:	b570      	push	{r4, r5, r6, lr}
 8003a7a:	4d0d      	ldr	r5, [pc, #52]	; (8003ab0 <__libc_init_array+0x38>)
 8003a7c:	4c0d      	ldr	r4, [pc, #52]	; (8003ab4 <__libc_init_array+0x3c>)
 8003a7e:	1b64      	subs	r4, r4, r5
 8003a80:	10a4      	asrs	r4, r4, #2
 8003a82:	2600      	movs	r6, #0
 8003a84:	42a6      	cmp	r6, r4
 8003a86:	d109      	bne.n	8003a9c <__libc_init_array+0x24>
 8003a88:	4d0b      	ldr	r5, [pc, #44]	; (8003ab8 <__libc_init_array+0x40>)
 8003a8a:	4c0c      	ldr	r4, [pc, #48]	; (8003abc <__libc_init_array+0x44>)
 8003a8c:	f001 fad0 	bl	8005030 <_init>
 8003a90:	1b64      	subs	r4, r4, r5
 8003a92:	10a4      	asrs	r4, r4, #2
 8003a94:	2600      	movs	r6, #0
 8003a96:	42a6      	cmp	r6, r4
 8003a98:	d105      	bne.n	8003aa6 <__libc_init_array+0x2e>
 8003a9a:	bd70      	pop	{r4, r5, r6, pc}
 8003a9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aa0:	4798      	blx	r3
 8003aa2:	3601      	adds	r6, #1
 8003aa4:	e7ee      	b.n	8003a84 <__libc_init_array+0xc>
 8003aa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003aaa:	4798      	blx	r3
 8003aac:	3601      	adds	r6, #1
 8003aae:	e7f2      	b.n	8003a96 <__libc_init_array+0x1e>
 8003ab0:	08005a20 	.word	0x08005a20
 8003ab4:	08005a20 	.word	0x08005a20
 8003ab8:	08005a20 	.word	0x08005a20
 8003abc:	08005a24 	.word	0x08005a24

08003ac0 <memcpy>:
 8003ac0:	440a      	add	r2, r1
 8003ac2:	4291      	cmp	r1, r2
 8003ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8003ac8:	d100      	bne.n	8003acc <memcpy+0xc>
 8003aca:	4770      	bx	lr
 8003acc:	b510      	push	{r4, lr}
 8003ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003ad6:	4291      	cmp	r1, r2
 8003ad8:	d1f9      	bne.n	8003ace <memcpy+0xe>
 8003ada:	bd10      	pop	{r4, pc}

08003adc <memset>:
 8003adc:	4402      	add	r2, r0
 8003ade:	4603      	mov	r3, r0
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d100      	bne.n	8003ae6 <memset+0xa>
 8003ae4:	4770      	bx	lr
 8003ae6:	f803 1b01 	strb.w	r1, [r3], #1
 8003aea:	e7f9      	b.n	8003ae0 <memset+0x4>

08003aec <iprintf>:
 8003aec:	b40f      	push	{r0, r1, r2, r3}
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <iprintf+0x2c>)
 8003af0:	b513      	push	{r0, r1, r4, lr}
 8003af2:	681c      	ldr	r4, [r3, #0]
 8003af4:	b124      	cbz	r4, 8003b00 <iprintf+0x14>
 8003af6:	69a3      	ldr	r3, [r4, #24]
 8003af8:	b913      	cbnz	r3, 8003b00 <iprintf+0x14>
 8003afa:	4620      	mov	r0, r4
 8003afc:	f000 fb2a 	bl	8004154 <__sinit>
 8003b00:	ab05      	add	r3, sp, #20
 8003b02:	9a04      	ldr	r2, [sp, #16]
 8003b04:	68a1      	ldr	r1, [r4, #8]
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	4620      	mov	r0, r4
 8003b0a:	f000 fe71 	bl	80047f0 <_vfiprintf_r>
 8003b0e:	b002      	add	sp, #8
 8003b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b14:	b004      	add	sp, #16
 8003b16:	4770      	bx	lr
 8003b18:	20000024 	.word	0x20000024

08003b1c <_puts_r>:
 8003b1c:	b570      	push	{r4, r5, r6, lr}
 8003b1e:	460e      	mov	r6, r1
 8003b20:	4605      	mov	r5, r0
 8003b22:	b118      	cbz	r0, 8003b2c <_puts_r+0x10>
 8003b24:	6983      	ldr	r3, [r0, #24]
 8003b26:	b90b      	cbnz	r3, 8003b2c <_puts_r+0x10>
 8003b28:	f000 fb14 	bl	8004154 <__sinit>
 8003b2c:	69ab      	ldr	r3, [r5, #24]
 8003b2e:	68ac      	ldr	r4, [r5, #8]
 8003b30:	b913      	cbnz	r3, 8003b38 <_puts_r+0x1c>
 8003b32:	4628      	mov	r0, r5
 8003b34:	f000 fb0e 	bl	8004154 <__sinit>
 8003b38:	4b2c      	ldr	r3, [pc, #176]	; (8003bec <_puts_r+0xd0>)
 8003b3a:	429c      	cmp	r4, r3
 8003b3c:	d120      	bne.n	8003b80 <_puts_r+0x64>
 8003b3e:	686c      	ldr	r4, [r5, #4]
 8003b40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003b42:	07db      	lsls	r3, r3, #31
 8003b44:	d405      	bmi.n	8003b52 <_puts_r+0x36>
 8003b46:	89a3      	ldrh	r3, [r4, #12]
 8003b48:	0598      	lsls	r0, r3, #22
 8003b4a:	d402      	bmi.n	8003b52 <_puts_r+0x36>
 8003b4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003b4e:	f000 fbb1 	bl	80042b4 <__retarget_lock_acquire_recursive>
 8003b52:	89a3      	ldrh	r3, [r4, #12]
 8003b54:	0719      	lsls	r1, r3, #28
 8003b56:	d51d      	bpl.n	8003b94 <_puts_r+0x78>
 8003b58:	6923      	ldr	r3, [r4, #16]
 8003b5a:	b1db      	cbz	r3, 8003b94 <_puts_r+0x78>
 8003b5c:	3e01      	subs	r6, #1
 8003b5e:	68a3      	ldr	r3, [r4, #8]
 8003b60:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003b64:	3b01      	subs	r3, #1
 8003b66:	60a3      	str	r3, [r4, #8]
 8003b68:	bb39      	cbnz	r1, 8003bba <_puts_r+0x9e>
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	da38      	bge.n	8003be0 <_puts_r+0xc4>
 8003b6e:	4622      	mov	r2, r4
 8003b70:	210a      	movs	r1, #10
 8003b72:	4628      	mov	r0, r5
 8003b74:	f000 f8f6 	bl	8003d64 <__swbuf_r>
 8003b78:	3001      	adds	r0, #1
 8003b7a:	d011      	beq.n	8003ba0 <_puts_r+0x84>
 8003b7c:	250a      	movs	r5, #10
 8003b7e:	e011      	b.n	8003ba4 <_puts_r+0x88>
 8003b80:	4b1b      	ldr	r3, [pc, #108]	; (8003bf0 <_puts_r+0xd4>)
 8003b82:	429c      	cmp	r4, r3
 8003b84:	d101      	bne.n	8003b8a <_puts_r+0x6e>
 8003b86:	68ac      	ldr	r4, [r5, #8]
 8003b88:	e7da      	b.n	8003b40 <_puts_r+0x24>
 8003b8a:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <_puts_r+0xd8>)
 8003b8c:	429c      	cmp	r4, r3
 8003b8e:	bf08      	it	eq
 8003b90:	68ec      	ldreq	r4, [r5, #12]
 8003b92:	e7d5      	b.n	8003b40 <_puts_r+0x24>
 8003b94:	4621      	mov	r1, r4
 8003b96:	4628      	mov	r0, r5
 8003b98:	f000 f936 	bl	8003e08 <__swsetup_r>
 8003b9c:	2800      	cmp	r0, #0
 8003b9e:	d0dd      	beq.n	8003b5c <_puts_r+0x40>
 8003ba0:	f04f 35ff 	mov.w	r5, #4294967295
 8003ba4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003ba6:	07da      	lsls	r2, r3, #31
 8003ba8:	d405      	bmi.n	8003bb6 <_puts_r+0x9a>
 8003baa:	89a3      	ldrh	r3, [r4, #12]
 8003bac:	059b      	lsls	r3, r3, #22
 8003bae:	d402      	bmi.n	8003bb6 <_puts_r+0x9a>
 8003bb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003bb2:	f000 fb80 	bl	80042b6 <__retarget_lock_release_recursive>
 8003bb6:	4628      	mov	r0, r5
 8003bb8:	bd70      	pop	{r4, r5, r6, pc}
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	da04      	bge.n	8003bc8 <_puts_r+0xac>
 8003bbe:	69a2      	ldr	r2, [r4, #24]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	dc06      	bgt.n	8003bd2 <_puts_r+0xb6>
 8003bc4:	290a      	cmp	r1, #10
 8003bc6:	d004      	beq.n	8003bd2 <_puts_r+0xb6>
 8003bc8:	6823      	ldr	r3, [r4, #0]
 8003bca:	1c5a      	adds	r2, r3, #1
 8003bcc:	6022      	str	r2, [r4, #0]
 8003bce:	7019      	strb	r1, [r3, #0]
 8003bd0:	e7c5      	b.n	8003b5e <_puts_r+0x42>
 8003bd2:	4622      	mov	r2, r4
 8003bd4:	4628      	mov	r0, r5
 8003bd6:	f000 f8c5 	bl	8003d64 <__swbuf_r>
 8003bda:	3001      	adds	r0, #1
 8003bdc:	d1bf      	bne.n	8003b5e <_puts_r+0x42>
 8003bde:	e7df      	b.n	8003ba0 <_puts_r+0x84>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	250a      	movs	r5, #10
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	6022      	str	r2, [r4, #0]
 8003be8:	701d      	strb	r5, [r3, #0]
 8003bea:	e7db      	b.n	8003ba4 <_puts_r+0x88>
 8003bec:	080059a0 	.word	0x080059a0
 8003bf0:	080059c0 	.word	0x080059c0
 8003bf4:	08005980 	.word	0x08005980

08003bf8 <puts>:
 8003bf8:	4b02      	ldr	r3, [pc, #8]	; (8003c04 <puts+0xc>)
 8003bfa:	4601      	mov	r1, r0
 8003bfc:	6818      	ldr	r0, [r3, #0]
 8003bfe:	f7ff bf8d 	b.w	8003b1c <_puts_r>
 8003c02:	bf00      	nop
 8003c04:	20000024 	.word	0x20000024

08003c08 <siprintf>:
 8003c08:	b40e      	push	{r1, r2, r3}
 8003c0a:	b500      	push	{lr}
 8003c0c:	b09c      	sub	sp, #112	; 0x70
 8003c0e:	ab1d      	add	r3, sp, #116	; 0x74
 8003c10:	9002      	str	r0, [sp, #8]
 8003c12:	9006      	str	r0, [sp, #24]
 8003c14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003c18:	4809      	ldr	r0, [pc, #36]	; (8003c40 <siprintf+0x38>)
 8003c1a:	9107      	str	r1, [sp, #28]
 8003c1c:	9104      	str	r1, [sp, #16]
 8003c1e:	4909      	ldr	r1, [pc, #36]	; (8003c44 <siprintf+0x3c>)
 8003c20:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c24:	9105      	str	r1, [sp, #20]
 8003c26:	6800      	ldr	r0, [r0, #0]
 8003c28:	9301      	str	r3, [sp, #4]
 8003c2a:	a902      	add	r1, sp, #8
 8003c2c:	f000 fcb6 	bl	800459c <_svfiprintf_r>
 8003c30:	9b02      	ldr	r3, [sp, #8]
 8003c32:	2200      	movs	r2, #0
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	b01c      	add	sp, #112	; 0x70
 8003c38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c3c:	b003      	add	sp, #12
 8003c3e:	4770      	bx	lr
 8003c40:	20000024 	.word	0x20000024
 8003c44:	ffff0208 	.word	0xffff0208

08003c48 <strcpy>:
 8003c48:	4603      	mov	r3, r0
 8003c4a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003c4e:	f803 2b01 	strb.w	r2, [r3], #1
 8003c52:	2a00      	cmp	r2, #0
 8003c54:	d1f9      	bne.n	8003c4a <strcpy+0x2>
 8003c56:	4770      	bx	lr

08003c58 <strncpy>:
 8003c58:	b510      	push	{r4, lr}
 8003c5a:	3901      	subs	r1, #1
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	b132      	cbz	r2, 8003c6e <strncpy+0x16>
 8003c60:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8003c64:	f803 4b01 	strb.w	r4, [r3], #1
 8003c68:	3a01      	subs	r2, #1
 8003c6a:	2c00      	cmp	r4, #0
 8003c6c:	d1f7      	bne.n	8003c5e <strncpy+0x6>
 8003c6e:	441a      	add	r2, r3
 8003c70:	2100      	movs	r1, #0
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d100      	bne.n	8003c78 <strncpy+0x20>
 8003c76:	bd10      	pop	{r4, pc}
 8003c78:	f803 1b01 	strb.w	r1, [r3], #1
 8003c7c:	e7f9      	b.n	8003c72 <strncpy+0x1a>

08003c7e <strstr>:
 8003c7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c80:	780c      	ldrb	r4, [r1, #0]
 8003c82:	b164      	cbz	r4, 8003c9e <strstr+0x20>
 8003c84:	4603      	mov	r3, r0
 8003c86:	781a      	ldrb	r2, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	1c5e      	adds	r6, r3, #1
 8003c8c:	b90a      	cbnz	r2, 8003c92 <strstr+0x14>
 8003c8e:	4610      	mov	r0, r2
 8003c90:	e005      	b.n	8003c9e <strstr+0x20>
 8003c92:	4294      	cmp	r4, r2
 8003c94:	d108      	bne.n	8003ca8 <strstr+0x2a>
 8003c96:	460d      	mov	r5, r1
 8003c98:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8003c9c:	b902      	cbnz	r2, 8003ca0 <strstr+0x22>
 8003c9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ca0:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8003ca4:	4297      	cmp	r7, r2
 8003ca6:	d0f7      	beq.n	8003c98 <strstr+0x1a>
 8003ca8:	4633      	mov	r3, r6
 8003caa:	e7ec      	b.n	8003c86 <strstr+0x8>

08003cac <strtok>:
 8003cac:	4b16      	ldr	r3, [pc, #88]	; (8003d08 <strtok+0x5c>)
 8003cae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cb0:	681e      	ldr	r6, [r3, #0]
 8003cb2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8003cb4:	4605      	mov	r5, r0
 8003cb6:	b9fc      	cbnz	r4, 8003cf8 <strtok+0x4c>
 8003cb8:	2050      	movs	r0, #80	; 0x50
 8003cba:	9101      	str	r1, [sp, #4]
 8003cbc:	f000 fb60 	bl	8004380 <malloc>
 8003cc0:	9901      	ldr	r1, [sp, #4]
 8003cc2:	65b0      	str	r0, [r6, #88]	; 0x58
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	b920      	cbnz	r0, 8003cd2 <strtok+0x26>
 8003cc8:	4b10      	ldr	r3, [pc, #64]	; (8003d0c <strtok+0x60>)
 8003cca:	4811      	ldr	r0, [pc, #68]	; (8003d10 <strtok+0x64>)
 8003ccc:	2157      	movs	r1, #87	; 0x57
 8003cce:	f000 f909 	bl	8003ee4 <__assert_func>
 8003cd2:	e9c0 4400 	strd	r4, r4, [r0]
 8003cd6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8003cda:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8003cde:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8003ce2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8003ce6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8003cea:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8003cee:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8003cf2:	6184      	str	r4, [r0, #24]
 8003cf4:	7704      	strb	r4, [r0, #28]
 8003cf6:	6244      	str	r4, [r0, #36]	; 0x24
 8003cf8:	6db2      	ldr	r2, [r6, #88]	; 0x58
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4628      	mov	r0, r5
 8003cfe:	b002      	add	sp, #8
 8003d00:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8003d04:	f000 b806 	b.w	8003d14 <__strtok_r>
 8003d08:	20000024 	.word	0x20000024
 8003d0c:	080058cc 	.word	0x080058cc
 8003d10:	080058e3 	.word	0x080058e3

08003d14 <__strtok_r>:
 8003d14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d16:	b908      	cbnz	r0, 8003d1c <__strtok_r+0x8>
 8003d18:	6810      	ldr	r0, [r2, #0]
 8003d1a:	b188      	cbz	r0, 8003d40 <__strtok_r+0x2c>
 8003d1c:	4604      	mov	r4, r0
 8003d1e:	4620      	mov	r0, r4
 8003d20:	f814 5b01 	ldrb.w	r5, [r4], #1
 8003d24:	460f      	mov	r7, r1
 8003d26:	f817 6b01 	ldrb.w	r6, [r7], #1
 8003d2a:	b91e      	cbnz	r6, 8003d34 <__strtok_r+0x20>
 8003d2c:	b965      	cbnz	r5, 8003d48 <__strtok_r+0x34>
 8003d2e:	6015      	str	r5, [r2, #0]
 8003d30:	4628      	mov	r0, r5
 8003d32:	e005      	b.n	8003d40 <__strtok_r+0x2c>
 8003d34:	42b5      	cmp	r5, r6
 8003d36:	d1f6      	bne.n	8003d26 <__strtok_r+0x12>
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d1f0      	bne.n	8003d1e <__strtok_r+0xa>
 8003d3c:	6014      	str	r4, [r2, #0]
 8003d3e:	7003      	strb	r3, [r0, #0]
 8003d40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003d42:	461c      	mov	r4, r3
 8003d44:	e00c      	b.n	8003d60 <__strtok_r+0x4c>
 8003d46:	b915      	cbnz	r5, 8003d4e <__strtok_r+0x3a>
 8003d48:	f814 3b01 	ldrb.w	r3, [r4], #1
 8003d4c:	460e      	mov	r6, r1
 8003d4e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8003d52:	42ab      	cmp	r3, r5
 8003d54:	d1f7      	bne.n	8003d46 <__strtok_r+0x32>
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f3      	beq.n	8003d42 <__strtok_r+0x2e>
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8003d60:	6014      	str	r4, [r2, #0]
 8003d62:	e7ed      	b.n	8003d40 <__strtok_r+0x2c>

08003d64 <__swbuf_r>:
 8003d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d66:	460e      	mov	r6, r1
 8003d68:	4614      	mov	r4, r2
 8003d6a:	4605      	mov	r5, r0
 8003d6c:	b118      	cbz	r0, 8003d76 <__swbuf_r+0x12>
 8003d6e:	6983      	ldr	r3, [r0, #24]
 8003d70:	b90b      	cbnz	r3, 8003d76 <__swbuf_r+0x12>
 8003d72:	f000 f9ef 	bl	8004154 <__sinit>
 8003d76:	4b21      	ldr	r3, [pc, #132]	; (8003dfc <__swbuf_r+0x98>)
 8003d78:	429c      	cmp	r4, r3
 8003d7a:	d12b      	bne.n	8003dd4 <__swbuf_r+0x70>
 8003d7c:	686c      	ldr	r4, [r5, #4]
 8003d7e:	69a3      	ldr	r3, [r4, #24]
 8003d80:	60a3      	str	r3, [r4, #8]
 8003d82:	89a3      	ldrh	r3, [r4, #12]
 8003d84:	071a      	lsls	r2, r3, #28
 8003d86:	d52f      	bpl.n	8003de8 <__swbuf_r+0x84>
 8003d88:	6923      	ldr	r3, [r4, #16]
 8003d8a:	b36b      	cbz	r3, 8003de8 <__swbuf_r+0x84>
 8003d8c:	6923      	ldr	r3, [r4, #16]
 8003d8e:	6820      	ldr	r0, [r4, #0]
 8003d90:	1ac0      	subs	r0, r0, r3
 8003d92:	6963      	ldr	r3, [r4, #20]
 8003d94:	b2f6      	uxtb	r6, r6
 8003d96:	4283      	cmp	r3, r0
 8003d98:	4637      	mov	r7, r6
 8003d9a:	dc04      	bgt.n	8003da6 <__swbuf_r+0x42>
 8003d9c:	4621      	mov	r1, r4
 8003d9e:	4628      	mov	r0, r5
 8003da0:	f000 f944 	bl	800402c <_fflush_r>
 8003da4:	bb30      	cbnz	r0, 8003df4 <__swbuf_r+0x90>
 8003da6:	68a3      	ldr	r3, [r4, #8]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	60a3      	str	r3, [r4, #8]
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	1c5a      	adds	r2, r3, #1
 8003db0:	6022      	str	r2, [r4, #0]
 8003db2:	701e      	strb	r6, [r3, #0]
 8003db4:	6963      	ldr	r3, [r4, #20]
 8003db6:	3001      	adds	r0, #1
 8003db8:	4283      	cmp	r3, r0
 8003dba:	d004      	beq.n	8003dc6 <__swbuf_r+0x62>
 8003dbc:	89a3      	ldrh	r3, [r4, #12]
 8003dbe:	07db      	lsls	r3, r3, #31
 8003dc0:	d506      	bpl.n	8003dd0 <__swbuf_r+0x6c>
 8003dc2:	2e0a      	cmp	r6, #10
 8003dc4:	d104      	bne.n	8003dd0 <__swbuf_r+0x6c>
 8003dc6:	4621      	mov	r1, r4
 8003dc8:	4628      	mov	r0, r5
 8003dca:	f000 f92f 	bl	800402c <_fflush_r>
 8003dce:	b988      	cbnz	r0, 8003df4 <__swbuf_r+0x90>
 8003dd0:	4638      	mov	r0, r7
 8003dd2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003dd4:	4b0a      	ldr	r3, [pc, #40]	; (8003e00 <__swbuf_r+0x9c>)
 8003dd6:	429c      	cmp	r4, r3
 8003dd8:	d101      	bne.n	8003dde <__swbuf_r+0x7a>
 8003dda:	68ac      	ldr	r4, [r5, #8]
 8003ddc:	e7cf      	b.n	8003d7e <__swbuf_r+0x1a>
 8003dde:	4b09      	ldr	r3, [pc, #36]	; (8003e04 <__swbuf_r+0xa0>)
 8003de0:	429c      	cmp	r4, r3
 8003de2:	bf08      	it	eq
 8003de4:	68ec      	ldreq	r4, [r5, #12]
 8003de6:	e7ca      	b.n	8003d7e <__swbuf_r+0x1a>
 8003de8:	4621      	mov	r1, r4
 8003dea:	4628      	mov	r0, r5
 8003dec:	f000 f80c 	bl	8003e08 <__swsetup_r>
 8003df0:	2800      	cmp	r0, #0
 8003df2:	d0cb      	beq.n	8003d8c <__swbuf_r+0x28>
 8003df4:	f04f 37ff 	mov.w	r7, #4294967295
 8003df8:	e7ea      	b.n	8003dd0 <__swbuf_r+0x6c>
 8003dfa:	bf00      	nop
 8003dfc:	080059a0 	.word	0x080059a0
 8003e00:	080059c0 	.word	0x080059c0
 8003e04:	08005980 	.word	0x08005980

08003e08 <__swsetup_r>:
 8003e08:	4b32      	ldr	r3, [pc, #200]	; (8003ed4 <__swsetup_r+0xcc>)
 8003e0a:	b570      	push	{r4, r5, r6, lr}
 8003e0c:	681d      	ldr	r5, [r3, #0]
 8003e0e:	4606      	mov	r6, r0
 8003e10:	460c      	mov	r4, r1
 8003e12:	b125      	cbz	r5, 8003e1e <__swsetup_r+0x16>
 8003e14:	69ab      	ldr	r3, [r5, #24]
 8003e16:	b913      	cbnz	r3, 8003e1e <__swsetup_r+0x16>
 8003e18:	4628      	mov	r0, r5
 8003e1a:	f000 f99b 	bl	8004154 <__sinit>
 8003e1e:	4b2e      	ldr	r3, [pc, #184]	; (8003ed8 <__swsetup_r+0xd0>)
 8003e20:	429c      	cmp	r4, r3
 8003e22:	d10f      	bne.n	8003e44 <__swsetup_r+0x3c>
 8003e24:	686c      	ldr	r4, [r5, #4]
 8003e26:	89a3      	ldrh	r3, [r4, #12]
 8003e28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003e2c:	0719      	lsls	r1, r3, #28
 8003e2e:	d42c      	bmi.n	8003e8a <__swsetup_r+0x82>
 8003e30:	06dd      	lsls	r5, r3, #27
 8003e32:	d411      	bmi.n	8003e58 <__swsetup_r+0x50>
 8003e34:	2309      	movs	r3, #9
 8003e36:	6033      	str	r3, [r6, #0]
 8003e38:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8003e3c:	81a3      	strh	r3, [r4, #12]
 8003e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003e42:	e03e      	b.n	8003ec2 <__swsetup_r+0xba>
 8003e44:	4b25      	ldr	r3, [pc, #148]	; (8003edc <__swsetup_r+0xd4>)
 8003e46:	429c      	cmp	r4, r3
 8003e48:	d101      	bne.n	8003e4e <__swsetup_r+0x46>
 8003e4a:	68ac      	ldr	r4, [r5, #8]
 8003e4c:	e7eb      	b.n	8003e26 <__swsetup_r+0x1e>
 8003e4e:	4b24      	ldr	r3, [pc, #144]	; (8003ee0 <__swsetup_r+0xd8>)
 8003e50:	429c      	cmp	r4, r3
 8003e52:	bf08      	it	eq
 8003e54:	68ec      	ldreq	r4, [r5, #12]
 8003e56:	e7e6      	b.n	8003e26 <__swsetup_r+0x1e>
 8003e58:	0758      	lsls	r0, r3, #29
 8003e5a:	d512      	bpl.n	8003e82 <__swsetup_r+0x7a>
 8003e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003e5e:	b141      	cbz	r1, 8003e72 <__swsetup_r+0x6a>
 8003e60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003e64:	4299      	cmp	r1, r3
 8003e66:	d002      	beq.n	8003e6e <__swsetup_r+0x66>
 8003e68:	4630      	mov	r0, r6
 8003e6a:	f000 fa91 	bl	8004390 <_free_r>
 8003e6e:	2300      	movs	r3, #0
 8003e70:	6363      	str	r3, [r4, #52]	; 0x34
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003e78:	81a3      	strh	r3, [r4, #12]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	6063      	str	r3, [r4, #4]
 8003e7e:	6923      	ldr	r3, [r4, #16]
 8003e80:	6023      	str	r3, [r4, #0]
 8003e82:	89a3      	ldrh	r3, [r4, #12]
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	81a3      	strh	r3, [r4, #12]
 8003e8a:	6923      	ldr	r3, [r4, #16]
 8003e8c:	b94b      	cbnz	r3, 8003ea2 <__swsetup_r+0x9a>
 8003e8e:	89a3      	ldrh	r3, [r4, #12]
 8003e90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003e98:	d003      	beq.n	8003ea2 <__swsetup_r+0x9a>
 8003e9a:	4621      	mov	r1, r4
 8003e9c:	4630      	mov	r0, r6
 8003e9e:	f000 fa2f 	bl	8004300 <__smakebuf_r>
 8003ea2:	89a0      	ldrh	r0, [r4, #12]
 8003ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8003ea8:	f010 0301 	ands.w	r3, r0, #1
 8003eac:	d00a      	beq.n	8003ec4 <__swsetup_r+0xbc>
 8003eae:	2300      	movs	r3, #0
 8003eb0:	60a3      	str	r3, [r4, #8]
 8003eb2:	6963      	ldr	r3, [r4, #20]
 8003eb4:	425b      	negs	r3, r3
 8003eb6:	61a3      	str	r3, [r4, #24]
 8003eb8:	6923      	ldr	r3, [r4, #16]
 8003eba:	b943      	cbnz	r3, 8003ece <__swsetup_r+0xc6>
 8003ebc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8003ec0:	d1ba      	bne.n	8003e38 <__swsetup_r+0x30>
 8003ec2:	bd70      	pop	{r4, r5, r6, pc}
 8003ec4:	0781      	lsls	r1, r0, #30
 8003ec6:	bf58      	it	pl
 8003ec8:	6963      	ldrpl	r3, [r4, #20]
 8003eca:	60a3      	str	r3, [r4, #8]
 8003ecc:	e7f4      	b.n	8003eb8 <__swsetup_r+0xb0>
 8003ece:	2000      	movs	r0, #0
 8003ed0:	e7f7      	b.n	8003ec2 <__swsetup_r+0xba>
 8003ed2:	bf00      	nop
 8003ed4:	20000024 	.word	0x20000024
 8003ed8:	080059a0 	.word	0x080059a0
 8003edc:	080059c0 	.word	0x080059c0
 8003ee0:	08005980 	.word	0x08005980

08003ee4 <__assert_func>:
 8003ee4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003ee6:	4614      	mov	r4, r2
 8003ee8:	461a      	mov	r2, r3
 8003eea:	4b09      	ldr	r3, [pc, #36]	; (8003f10 <__assert_func+0x2c>)
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4605      	mov	r5, r0
 8003ef0:	68d8      	ldr	r0, [r3, #12]
 8003ef2:	b14c      	cbz	r4, 8003f08 <__assert_func+0x24>
 8003ef4:	4b07      	ldr	r3, [pc, #28]	; (8003f14 <__assert_func+0x30>)
 8003ef6:	9100      	str	r1, [sp, #0]
 8003ef8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8003efc:	4906      	ldr	r1, [pc, #24]	; (8003f18 <__assert_func+0x34>)
 8003efe:	462b      	mov	r3, r5
 8003f00:	f000 f9a6 	bl	8004250 <fiprintf>
 8003f04:	f000 ff9e 	bl	8004e44 <abort>
 8003f08:	4b04      	ldr	r3, [pc, #16]	; (8003f1c <__assert_func+0x38>)
 8003f0a:	461c      	mov	r4, r3
 8003f0c:	e7f3      	b.n	8003ef6 <__assert_func+0x12>
 8003f0e:	bf00      	nop
 8003f10:	20000024 	.word	0x20000024
 8003f14:	08005944 	.word	0x08005944
 8003f18:	08005951 	.word	0x08005951
 8003f1c:	08005755 	.word	0x08005755

08003f20 <__sflush_r>:
 8003f20:	898a      	ldrh	r2, [r1, #12]
 8003f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f26:	4605      	mov	r5, r0
 8003f28:	0710      	lsls	r0, r2, #28
 8003f2a:	460c      	mov	r4, r1
 8003f2c:	d458      	bmi.n	8003fe0 <__sflush_r+0xc0>
 8003f2e:	684b      	ldr	r3, [r1, #4]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	dc05      	bgt.n	8003f40 <__sflush_r+0x20>
 8003f34:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	dc02      	bgt.n	8003f40 <__sflush_r+0x20>
 8003f3a:	2000      	movs	r0, #0
 8003f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003f40:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f42:	2e00      	cmp	r6, #0
 8003f44:	d0f9      	beq.n	8003f3a <__sflush_r+0x1a>
 8003f46:	2300      	movs	r3, #0
 8003f48:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003f4c:	682f      	ldr	r7, [r5, #0]
 8003f4e:	602b      	str	r3, [r5, #0]
 8003f50:	d032      	beq.n	8003fb8 <__sflush_r+0x98>
 8003f52:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	075a      	lsls	r2, r3, #29
 8003f58:	d505      	bpl.n	8003f66 <__sflush_r+0x46>
 8003f5a:	6863      	ldr	r3, [r4, #4]
 8003f5c:	1ac0      	subs	r0, r0, r3
 8003f5e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003f60:	b10b      	cbz	r3, 8003f66 <__sflush_r+0x46>
 8003f62:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f64:	1ac0      	subs	r0, r0, r3
 8003f66:	2300      	movs	r3, #0
 8003f68:	4602      	mov	r2, r0
 8003f6a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003f6c:	6a21      	ldr	r1, [r4, #32]
 8003f6e:	4628      	mov	r0, r5
 8003f70:	47b0      	blx	r6
 8003f72:	1c43      	adds	r3, r0, #1
 8003f74:	89a3      	ldrh	r3, [r4, #12]
 8003f76:	d106      	bne.n	8003f86 <__sflush_r+0x66>
 8003f78:	6829      	ldr	r1, [r5, #0]
 8003f7a:	291d      	cmp	r1, #29
 8003f7c:	d82c      	bhi.n	8003fd8 <__sflush_r+0xb8>
 8003f7e:	4a2a      	ldr	r2, [pc, #168]	; (8004028 <__sflush_r+0x108>)
 8003f80:	40ca      	lsrs	r2, r1
 8003f82:	07d6      	lsls	r6, r2, #31
 8003f84:	d528      	bpl.n	8003fd8 <__sflush_r+0xb8>
 8003f86:	2200      	movs	r2, #0
 8003f88:	6062      	str	r2, [r4, #4]
 8003f8a:	04d9      	lsls	r1, r3, #19
 8003f8c:	6922      	ldr	r2, [r4, #16]
 8003f8e:	6022      	str	r2, [r4, #0]
 8003f90:	d504      	bpl.n	8003f9c <__sflush_r+0x7c>
 8003f92:	1c42      	adds	r2, r0, #1
 8003f94:	d101      	bne.n	8003f9a <__sflush_r+0x7a>
 8003f96:	682b      	ldr	r3, [r5, #0]
 8003f98:	b903      	cbnz	r3, 8003f9c <__sflush_r+0x7c>
 8003f9a:	6560      	str	r0, [r4, #84]	; 0x54
 8003f9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003f9e:	602f      	str	r7, [r5, #0]
 8003fa0:	2900      	cmp	r1, #0
 8003fa2:	d0ca      	beq.n	8003f3a <__sflush_r+0x1a>
 8003fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003fa8:	4299      	cmp	r1, r3
 8003faa:	d002      	beq.n	8003fb2 <__sflush_r+0x92>
 8003fac:	4628      	mov	r0, r5
 8003fae:	f000 f9ef 	bl	8004390 <_free_r>
 8003fb2:	2000      	movs	r0, #0
 8003fb4:	6360      	str	r0, [r4, #52]	; 0x34
 8003fb6:	e7c1      	b.n	8003f3c <__sflush_r+0x1c>
 8003fb8:	6a21      	ldr	r1, [r4, #32]
 8003fba:	2301      	movs	r3, #1
 8003fbc:	4628      	mov	r0, r5
 8003fbe:	47b0      	blx	r6
 8003fc0:	1c41      	adds	r1, r0, #1
 8003fc2:	d1c7      	bne.n	8003f54 <__sflush_r+0x34>
 8003fc4:	682b      	ldr	r3, [r5, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d0c4      	beq.n	8003f54 <__sflush_r+0x34>
 8003fca:	2b1d      	cmp	r3, #29
 8003fcc:	d001      	beq.n	8003fd2 <__sflush_r+0xb2>
 8003fce:	2b16      	cmp	r3, #22
 8003fd0:	d101      	bne.n	8003fd6 <__sflush_r+0xb6>
 8003fd2:	602f      	str	r7, [r5, #0]
 8003fd4:	e7b1      	b.n	8003f3a <__sflush_r+0x1a>
 8003fd6:	89a3      	ldrh	r3, [r4, #12]
 8003fd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003fdc:	81a3      	strh	r3, [r4, #12]
 8003fde:	e7ad      	b.n	8003f3c <__sflush_r+0x1c>
 8003fe0:	690f      	ldr	r7, [r1, #16]
 8003fe2:	2f00      	cmp	r7, #0
 8003fe4:	d0a9      	beq.n	8003f3a <__sflush_r+0x1a>
 8003fe6:	0793      	lsls	r3, r2, #30
 8003fe8:	680e      	ldr	r6, [r1, #0]
 8003fea:	bf08      	it	eq
 8003fec:	694b      	ldreq	r3, [r1, #20]
 8003fee:	600f      	str	r7, [r1, #0]
 8003ff0:	bf18      	it	ne
 8003ff2:	2300      	movne	r3, #0
 8003ff4:	eba6 0807 	sub.w	r8, r6, r7
 8003ff8:	608b      	str	r3, [r1, #8]
 8003ffa:	f1b8 0f00 	cmp.w	r8, #0
 8003ffe:	dd9c      	ble.n	8003f3a <__sflush_r+0x1a>
 8004000:	6a21      	ldr	r1, [r4, #32]
 8004002:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004004:	4643      	mov	r3, r8
 8004006:	463a      	mov	r2, r7
 8004008:	4628      	mov	r0, r5
 800400a:	47b0      	blx	r6
 800400c:	2800      	cmp	r0, #0
 800400e:	dc06      	bgt.n	800401e <__sflush_r+0xfe>
 8004010:	89a3      	ldrh	r3, [r4, #12]
 8004012:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004016:	81a3      	strh	r3, [r4, #12]
 8004018:	f04f 30ff 	mov.w	r0, #4294967295
 800401c:	e78e      	b.n	8003f3c <__sflush_r+0x1c>
 800401e:	4407      	add	r7, r0
 8004020:	eba8 0800 	sub.w	r8, r8, r0
 8004024:	e7e9      	b.n	8003ffa <__sflush_r+0xda>
 8004026:	bf00      	nop
 8004028:	20400001 	.word	0x20400001

0800402c <_fflush_r>:
 800402c:	b538      	push	{r3, r4, r5, lr}
 800402e:	690b      	ldr	r3, [r1, #16]
 8004030:	4605      	mov	r5, r0
 8004032:	460c      	mov	r4, r1
 8004034:	b913      	cbnz	r3, 800403c <_fflush_r+0x10>
 8004036:	2500      	movs	r5, #0
 8004038:	4628      	mov	r0, r5
 800403a:	bd38      	pop	{r3, r4, r5, pc}
 800403c:	b118      	cbz	r0, 8004046 <_fflush_r+0x1a>
 800403e:	6983      	ldr	r3, [r0, #24]
 8004040:	b90b      	cbnz	r3, 8004046 <_fflush_r+0x1a>
 8004042:	f000 f887 	bl	8004154 <__sinit>
 8004046:	4b14      	ldr	r3, [pc, #80]	; (8004098 <_fflush_r+0x6c>)
 8004048:	429c      	cmp	r4, r3
 800404a:	d11b      	bne.n	8004084 <_fflush_r+0x58>
 800404c:	686c      	ldr	r4, [r5, #4]
 800404e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0ef      	beq.n	8004036 <_fflush_r+0xa>
 8004056:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004058:	07d0      	lsls	r0, r2, #31
 800405a:	d404      	bmi.n	8004066 <_fflush_r+0x3a>
 800405c:	0599      	lsls	r1, r3, #22
 800405e:	d402      	bmi.n	8004066 <_fflush_r+0x3a>
 8004060:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004062:	f000 f927 	bl	80042b4 <__retarget_lock_acquire_recursive>
 8004066:	4628      	mov	r0, r5
 8004068:	4621      	mov	r1, r4
 800406a:	f7ff ff59 	bl	8003f20 <__sflush_r>
 800406e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004070:	07da      	lsls	r2, r3, #31
 8004072:	4605      	mov	r5, r0
 8004074:	d4e0      	bmi.n	8004038 <_fflush_r+0xc>
 8004076:	89a3      	ldrh	r3, [r4, #12]
 8004078:	059b      	lsls	r3, r3, #22
 800407a:	d4dd      	bmi.n	8004038 <_fflush_r+0xc>
 800407c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800407e:	f000 f91a 	bl	80042b6 <__retarget_lock_release_recursive>
 8004082:	e7d9      	b.n	8004038 <_fflush_r+0xc>
 8004084:	4b05      	ldr	r3, [pc, #20]	; (800409c <_fflush_r+0x70>)
 8004086:	429c      	cmp	r4, r3
 8004088:	d101      	bne.n	800408e <_fflush_r+0x62>
 800408a:	68ac      	ldr	r4, [r5, #8]
 800408c:	e7df      	b.n	800404e <_fflush_r+0x22>
 800408e:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <_fflush_r+0x74>)
 8004090:	429c      	cmp	r4, r3
 8004092:	bf08      	it	eq
 8004094:	68ec      	ldreq	r4, [r5, #12]
 8004096:	e7da      	b.n	800404e <_fflush_r+0x22>
 8004098:	080059a0 	.word	0x080059a0
 800409c:	080059c0 	.word	0x080059c0
 80040a0:	08005980 	.word	0x08005980

080040a4 <std>:
 80040a4:	2300      	movs	r3, #0
 80040a6:	b510      	push	{r4, lr}
 80040a8:	4604      	mov	r4, r0
 80040aa:	e9c0 3300 	strd	r3, r3, [r0]
 80040ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80040b2:	6083      	str	r3, [r0, #8]
 80040b4:	8181      	strh	r1, [r0, #12]
 80040b6:	6643      	str	r3, [r0, #100]	; 0x64
 80040b8:	81c2      	strh	r2, [r0, #14]
 80040ba:	6183      	str	r3, [r0, #24]
 80040bc:	4619      	mov	r1, r3
 80040be:	2208      	movs	r2, #8
 80040c0:	305c      	adds	r0, #92	; 0x5c
 80040c2:	f7ff fd0b 	bl	8003adc <memset>
 80040c6:	4b05      	ldr	r3, [pc, #20]	; (80040dc <std+0x38>)
 80040c8:	6263      	str	r3, [r4, #36]	; 0x24
 80040ca:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <std+0x3c>)
 80040cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80040ce:	4b05      	ldr	r3, [pc, #20]	; (80040e4 <std+0x40>)
 80040d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80040d2:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <std+0x44>)
 80040d4:	6224      	str	r4, [r4, #32]
 80040d6:	6323      	str	r3, [r4, #48]	; 0x30
 80040d8:	bd10      	pop	{r4, pc}
 80040da:	bf00      	nop
 80040dc:	08004d99 	.word	0x08004d99
 80040e0:	08004dbb 	.word	0x08004dbb
 80040e4:	08004df3 	.word	0x08004df3
 80040e8:	08004e17 	.word	0x08004e17

080040ec <_cleanup_r>:
 80040ec:	4901      	ldr	r1, [pc, #4]	; (80040f4 <_cleanup_r+0x8>)
 80040ee:	f000 b8c1 	b.w	8004274 <_fwalk_reent>
 80040f2:	bf00      	nop
 80040f4:	0800402d 	.word	0x0800402d

080040f8 <__sfmoreglue>:
 80040f8:	b570      	push	{r4, r5, r6, lr}
 80040fa:	1e4a      	subs	r2, r1, #1
 80040fc:	2568      	movs	r5, #104	; 0x68
 80040fe:	4355      	muls	r5, r2
 8004100:	460e      	mov	r6, r1
 8004102:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004106:	f000 f993 	bl	8004430 <_malloc_r>
 800410a:	4604      	mov	r4, r0
 800410c:	b140      	cbz	r0, 8004120 <__sfmoreglue+0x28>
 800410e:	2100      	movs	r1, #0
 8004110:	e9c0 1600 	strd	r1, r6, [r0]
 8004114:	300c      	adds	r0, #12
 8004116:	60a0      	str	r0, [r4, #8]
 8004118:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800411c:	f7ff fcde 	bl	8003adc <memset>
 8004120:	4620      	mov	r0, r4
 8004122:	bd70      	pop	{r4, r5, r6, pc}

08004124 <__sfp_lock_acquire>:
 8004124:	4801      	ldr	r0, [pc, #4]	; (800412c <__sfp_lock_acquire+0x8>)
 8004126:	f000 b8c5 	b.w	80042b4 <__retarget_lock_acquire_recursive>
 800412a:	bf00      	nop
 800412c:	20000cf8 	.word	0x20000cf8

08004130 <__sfp_lock_release>:
 8004130:	4801      	ldr	r0, [pc, #4]	; (8004138 <__sfp_lock_release+0x8>)
 8004132:	f000 b8c0 	b.w	80042b6 <__retarget_lock_release_recursive>
 8004136:	bf00      	nop
 8004138:	20000cf8 	.word	0x20000cf8

0800413c <__sinit_lock_acquire>:
 800413c:	4801      	ldr	r0, [pc, #4]	; (8004144 <__sinit_lock_acquire+0x8>)
 800413e:	f000 b8b9 	b.w	80042b4 <__retarget_lock_acquire_recursive>
 8004142:	bf00      	nop
 8004144:	20000cf3 	.word	0x20000cf3

08004148 <__sinit_lock_release>:
 8004148:	4801      	ldr	r0, [pc, #4]	; (8004150 <__sinit_lock_release+0x8>)
 800414a:	f000 b8b4 	b.w	80042b6 <__retarget_lock_release_recursive>
 800414e:	bf00      	nop
 8004150:	20000cf3 	.word	0x20000cf3

08004154 <__sinit>:
 8004154:	b510      	push	{r4, lr}
 8004156:	4604      	mov	r4, r0
 8004158:	f7ff fff0 	bl	800413c <__sinit_lock_acquire>
 800415c:	69a3      	ldr	r3, [r4, #24]
 800415e:	b11b      	cbz	r3, 8004168 <__sinit+0x14>
 8004160:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004164:	f7ff bff0 	b.w	8004148 <__sinit_lock_release>
 8004168:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800416c:	6523      	str	r3, [r4, #80]	; 0x50
 800416e:	4b13      	ldr	r3, [pc, #76]	; (80041bc <__sinit+0x68>)
 8004170:	4a13      	ldr	r2, [pc, #76]	; (80041c0 <__sinit+0x6c>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	62a2      	str	r2, [r4, #40]	; 0x28
 8004176:	42a3      	cmp	r3, r4
 8004178:	bf04      	itt	eq
 800417a:	2301      	moveq	r3, #1
 800417c:	61a3      	streq	r3, [r4, #24]
 800417e:	4620      	mov	r0, r4
 8004180:	f000 f820 	bl	80041c4 <__sfp>
 8004184:	6060      	str	r0, [r4, #4]
 8004186:	4620      	mov	r0, r4
 8004188:	f000 f81c 	bl	80041c4 <__sfp>
 800418c:	60a0      	str	r0, [r4, #8]
 800418e:	4620      	mov	r0, r4
 8004190:	f000 f818 	bl	80041c4 <__sfp>
 8004194:	2200      	movs	r2, #0
 8004196:	60e0      	str	r0, [r4, #12]
 8004198:	2104      	movs	r1, #4
 800419a:	6860      	ldr	r0, [r4, #4]
 800419c:	f7ff ff82 	bl	80040a4 <std>
 80041a0:	68a0      	ldr	r0, [r4, #8]
 80041a2:	2201      	movs	r2, #1
 80041a4:	2109      	movs	r1, #9
 80041a6:	f7ff ff7d 	bl	80040a4 <std>
 80041aa:	68e0      	ldr	r0, [r4, #12]
 80041ac:	2202      	movs	r2, #2
 80041ae:	2112      	movs	r1, #18
 80041b0:	f7ff ff78 	bl	80040a4 <std>
 80041b4:	2301      	movs	r3, #1
 80041b6:	61a3      	str	r3, [r4, #24]
 80041b8:	e7d2      	b.n	8004160 <__sinit+0xc>
 80041ba:	bf00      	nop
 80041bc:	080058c8 	.word	0x080058c8
 80041c0:	080040ed 	.word	0x080040ed

080041c4 <__sfp>:
 80041c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041c6:	4607      	mov	r7, r0
 80041c8:	f7ff ffac 	bl	8004124 <__sfp_lock_acquire>
 80041cc:	4b1e      	ldr	r3, [pc, #120]	; (8004248 <__sfp+0x84>)
 80041ce:	681e      	ldr	r6, [r3, #0]
 80041d0:	69b3      	ldr	r3, [r6, #24]
 80041d2:	b913      	cbnz	r3, 80041da <__sfp+0x16>
 80041d4:	4630      	mov	r0, r6
 80041d6:	f7ff ffbd 	bl	8004154 <__sinit>
 80041da:	3648      	adds	r6, #72	; 0x48
 80041dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80041e0:	3b01      	subs	r3, #1
 80041e2:	d503      	bpl.n	80041ec <__sfp+0x28>
 80041e4:	6833      	ldr	r3, [r6, #0]
 80041e6:	b30b      	cbz	r3, 800422c <__sfp+0x68>
 80041e8:	6836      	ldr	r6, [r6, #0]
 80041ea:	e7f7      	b.n	80041dc <__sfp+0x18>
 80041ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80041f0:	b9d5      	cbnz	r5, 8004228 <__sfp+0x64>
 80041f2:	4b16      	ldr	r3, [pc, #88]	; (800424c <__sfp+0x88>)
 80041f4:	60e3      	str	r3, [r4, #12]
 80041f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80041fa:	6665      	str	r5, [r4, #100]	; 0x64
 80041fc:	f000 f859 	bl	80042b2 <__retarget_lock_init_recursive>
 8004200:	f7ff ff96 	bl	8004130 <__sfp_lock_release>
 8004204:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004208:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800420c:	6025      	str	r5, [r4, #0]
 800420e:	61a5      	str	r5, [r4, #24]
 8004210:	2208      	movs	r2, #8
 8004212:	4629      	mov	r1, r5
 8004214:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004218:	f7ff fc60 	bl	8003adc <memset>
 800421c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004220:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004224:	4620      	mov	r0, r4
 8004226:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004228:	3468      	adds	r4, #104	; 0x68
 800422a:	e7d9      	b.n	80041e0 <__sfp+0x1c>
 800422c:	2104      	movs	r1, #4
 800422e:	4638      	mov	r0, r7
 8004230:	f7ff ff62 	bl	80040f8 <__sfmoreglue>
 8004234:	4604      	mov	r4, r0
 8004236:	6030      	str	r0, [r6, #0]
 8004238:	2800      	cmp	r0, #0
 800423a:	d1d5      	bne.n	80041e8 <__sfp+0x24>
 800423c:	f7ff ff78 	bl	8004130 <__sfp_lock_release>
 8004240:	230c      	movs	r3, #12
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	e7ee      	b.n	8004224 <__sfp+0x60>
 8004246:	bf00      	nop
 8004248:	080058c8 	.word	0x080058c8
 800424c:	ffff0001 	.word	0xffff0001

08004250 <fiprintf>:
 8004250:	b40e      	push	{r1, r2, r3}
 8004252:	b503      	push	{r0, r1, lr}
 8004254:	4601      	mov	r1, r0
 8004256:	ab03      	add	r3, sp, #12
 8004258:	4805      	ldr	r0, [pc, #20]	; (8004270 <fiprintf+0x20>)
 800425a:	f853 2b04 	ldr.w	r2, [r3], #4
 800425e:	6800      	ldr	r0, [r0, #0]
 8004260:	9301      	str	r3, [sp, #4]
 8004262:	f000 fac5 	bl	80047f0 <_vfiprintf_r>
 8004266:	b002      	add	sp, #8
 8004268:	f85d eb04 	ldr.w	lr, [sp], #4
 800426c:	b003      	add	sp, #12
 800426e:	4770      	bx	lr
 8004270:	20000024 	.word	0x20000024

08004274 <_fwalk_reent>:
 8004274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004278:	4606      	mov	r6, r0
 800427a:	4688      	mov	r8, r1
 800427c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004280:	2700      	movs	r7, #0
 8004282:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004286:	f1b9 0901 	subs.w	r9, r9, #1
 800428a:	d505      	bpl.n	8004298 <_fwalk_reent+0x24>
 800428c:	6824      	ldr	r4, [r4, #0]
 800428e:	2c00      	cmp	r4, #0
 8004290:	d1f7      	bne.n	8004282 <_fwalk_reent+0xe>
 8004292:	4638      	mov	r0, r7
 8004294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004298:	89ab      	ldrh	r3, [r5, #12]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d907      	bls.n	80042ae <_fwalk_reent+0x3a>
 800429e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80042a2:	3301      	adds	r3, #1
 80042a4:	d003      	beq.n	80042ae <_fwalk_reent+0x3a>
 80042a6:	4629      	mov	r1, r5
 80042a8:	4630      	mov	r0, r6
 80042aa:	47c0      	blx	r8
 80042ac:	4307      	orrs	r7, r0
 80042ae:	3568      	adds	r5, #104	; 0x68
 80042b0:	e7e9      	b.n	8004286 <_fwalk_reent+0x12>

080042b2 <__retarget_lock_init_recursive>:
 80042b2:	4770      	bx	lr

080042b4 <__retarget_lock_acquire_recursive>:
 80042b4:	4770      	bx	lr

080042b6 <__retarget_lock_release_recursive>:
 80042b6:	4770      	bx	lr

080042b8 <__swhatbuf_r>:
 80042b8:	b570      	push	{r4, r5, r6, lr}
 80042ba:	460e      	mov	r6, r1
 80042bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80042c0:	2900      	cmp	r1, #0
 80042c2:	b096      	sub	sp, #88	; 0x58
 80042c4:	4614      	mov	r4, r2
 80042c6:	461d      	mov	r5, r3
 80042c8:	da07      	bge.n	80042da <__swhatbuf_r+0x22>
 80042ca:	2300      	movs	r3, #0
 80042cc:	602b      	str	r3, [r5, #0]
 80042ce:	89b3      	ldrh	r3, [r6, #12]
 80042d0:	061a      	lsls	r2, r3, #24
 80042d2:	d410      	bmi.n	80042f6 <__swhatbuf_r+0x3e>
 80042d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80042d8:	e00e      	b.n	80042f8 <__swhatbuf_r+0x40>
 80042da:	466a      	mov	r2, sp
 80042dc:	f000 fdca 	bl	8004e74 <_fstat_r>
 80042e0:	2800      	cmp	r0, #0
 80042e2:	dbf2      	blt.n	80042ca <__swhatbuf_r+0x12>
 80042e4:	9a01      	ldr	r2, [sp, #4]
 80042e6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80042ea:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80042ee:	425a      	negs	r2, r3
 80042f0:	415a      	adcs	r2, r3
 80042f2:	602a      	str	r2, [r5, #0]
 80042f4:	e7ee      	b.n	80042d4 <__swhatbuf_r+0x1c>
 80042f6:	2340      	movs	r3, #64	; 0x40
 80042f8:	2000      	movs	r0, #0
 80042fa:	6023      	str	r3, [r4, #0]
 80042fc:	b016      	add	sp, #88	; 0x58
 80042fe:	bd70      	pop	{r4, r5, r6, pc}

08004300 <__smakebuf_r>:
 8004300:	898b      	ldrh	r3, [r1, #12]
 8004302:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004304:	079d      	lsls	r5, r3, #30
 8004306:	4606      	mov	r6, r0
 8004308:	460c      	mov	r4, r1
 800430a:	d507      	bpl.n	800431c <__smakebuf_r+0x1c>
 800430c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004310:	6023      	str	r3, [r4, #0]
 8004312:	6123      	str	r3, [r4, #16]
 8004314:	2301      	movs	r3, #1
 8004316:	6163      	str	r3, [r4, #20]
 8004318:	b002      	add	sp, #8
 800431a:	bd70      	pop	{r4, r5, r6, pc}
 800431c:	ab01      	add	r3, sp, #4
 800431e:	466a      	mov	r2, sp
 8004320:	f7ff ffca 	bl	80042b8 <__swhatbuf_r>
 8004324:	9900      	ldr	r1, [sp, #0]
 8004326:	4605      	mov	r5, r0
 8004328:	4630      	mov	r0, r6
 800432a:	f000 f881 	bl	8004430 <_malloc_r>
 800432e:	b948      	cbnz	r0, 8004344 <__smakebuf_r+0x44>
 8004330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004334:	059a      	lsls	r2, r3, #22
 8004336:	d4ef      	bmi.n	8004318 <__smakebuf_r+0x18>
 8004338:	f023 0303 	bic.w	r3, r3, #3
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	81a3      	strh	r3, [r4, #12]
 8004342:	e7e3      	b.n	800430c <__smakebuf_r+0xc>
 8004344:	4b0d      	ldr	r3, [pc, #52]	; (800437c <__smakebuf_r+0x7c>)
 8004346:	62b3      	str	r3, [r6, #40]	; 0x28
 8004348:	89a3      	ldrh	r3, [r4, #12]
 800434a:	6020      	str	r0, [r4, #0]
 800434c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004350:	81a3      	strh	r3, [r4, #12]
 8004352:	9b00      	ldr	r3, [sp, #0]
 8004354:	6163      	str	r3, [r4, #20]
 8004356:	9b01      	ldr	r3, [sp, #4]
 8004358:	6120      	str	r0, [r4, #16]
 800435a:	b15b      	cbz	r3, 8004374 <__smakebuf_r+0x74>
 800435c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004360:	4630      	mov	r0, r6
 8004362:	f000 fd99 	bl	8004e98 <_isatty_r>
 8004366:	b128      	cbz	r0, 8004374 <__smakebuf_r+0x74>
 8004368:	89a3      	ldrh	r3, [r4, #12]
 800436a:	f023 0303 	bic.w	r3, r3, #3
 800436e:	f043 0301 	orr.w	r3, r3, #1
 8004372:	81a3      	strh	r3, [r4, #12]
 8004374:	89a0      	ldrh	r0, [r4, #12]
 8004376:	4305      	orrs	r5, r0
 8004378:	81a5      	strh	r5, [r4, #12]
 800437a:	e7cd      	b.n	8004318 <__smakebuf_r+0x18>
 800437c:	080040ed 	.word	0x080040ed

08004380 <malloc>:
 8004380:	4b02      	ldr	r3, [pc, #8]	; (800438c <malloc+0xc>)
 8004382:	4601      	mov	r1, r0
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	f000 b853 	b.w	8004430 <_malloc_r>
 800438a:	bf00      	nop
 800438c:	20000024 	.word	0x20000024

08004390 <_free_r>:
 8004390:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004392:	2900      	cmp	r1, #0
 8004394:	d048      	beq.n	8004428 <_free_r+0x98>
 8004396:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800439a:	9001      	str	r0, [sp, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	f1a1 0404 	sub.w	r4, r1, #4
 80043a2:	bfb8      	it	lt
 80043a4:	18e4      	addlt	r4, r4, r3
 80043a6:	f000 fdb3 	bl	8004f10 <__malloc_lock>
 80043aa:	4a20      	ldr	r2, [pc, #128]	; (800442c <_free_r+0x9c>)
 80043ac:	9801      	ldr	r0, [sp, #4]
 80043ae:	6813      	ldr	r3, [r2, #0]
 80043b0:	4615      	mov	r5, r2
 80043b2:	b933      	cbnz	r3, 80043c2 <_free_r+0x32>
 80043b4:	6063      	str	r3, [r4, #4]
 80043b6:	6014      	str	r4, [r2, #0]
 80043b8:	b003      	add	sp, #12
 80043ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80043be:	f000 bdad 	b.w	8004f1c <__malloc_unlock>
 80043c2:	42a3      	cmp	r3, r4
 80043c4:	d90b      	bls.n	80043de <_free_r+0x4e>
 80043c6:	6821      	ldr	r1, [r4, #0]
 80043c8:	1862      	adds	r2, r4, r1
 80043ca:	4293      	cmp	r3, r2
 80043cc:	bf04      	itt	eq
 80043ce:	681a      	ldreq	r2, [r3, #0]
 80043d0:	685b      	ldreq	r3, [r3, #4]
 80043d2:	6063      	str	r3, [r4, #4]
 80043d4:	bf04      	itt	eq
 80043d6:	1852      	addeq	r2, r2, r1
 80043d8:	6022      	streq	r2, [r4, #0]
 80043da:	602c      	str	r4, [r5, #0]
 80043dc:	e7ec      	b.n	80043b8 <_free_r+0x28>
 80043de:	461a      	mov	r2, r3
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	b10b      	cbz	r3, 80043e8 <_free_r+0x58>
 80043e4:	42a3      	cmp	r3, r4
 80043e6:	d9fa      	bls.n	80043de <_free_r+0x4e>
 80043e8:	6811      	ldr	r1, [r2, #0]
 80043ea:	1855      	adds	r5, r2, r1
 80043ec:	42a5      	cmp	r5, r4
 80043ee:	d10b      	bne.n	8004408 <_free_r+0x78>
 80043f0:	6824      	ldr	r4, [r4, #0]
 80043f2:	4421      	add	r1, r4
 80043f4:	1854      	adds	r4, r2, r1
 80043f6:	42a3      	cmp	r3, r4
 80043f8:	6011      	str	r1, [r2, #0]
 80043fa:	d1dd      	bne.n	80043b8 <_free_r+0x28>
 80043fc:	681c      	ldr	r4, [r3, #0]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	6053      	str	r3, [r2, #4]
 8004402:	4421      	add	r1, r4
 8004404:	6011      	str	r1, [r2, #0]
 8004406:	e7d7      	b.n	80043b8 <_free_r+0x28>
 8004408:	d902      	bls.n	8004410 <_free_r+0x80>
 800440a:	230c      	movs	r3, #12
 800440c:	6003      	str	r3, [r0, #0]
 800440e:	e7d3      	b.n	80043b8 <_free_r+0x28>
 8004410:	6825      	ldr	r5, [r4, #0]
 8004412:	1961      	adds	r1, r4, r5
 8004414:	428b      	cmp	r3, r1
 8004416:	bf04      	itt	eq
 8004418:	6819      	ldreq	r1, [r3, #0]
 800441a:	685b      	ldreq	r3, [r3, #4]
 800441c:	6063      	str	r3, [r4, #4]
 800441e:	bf04      	itt	eq
 8004420:	1949      	addeq	r1, r1, r5
 8004422:	6021      	streq	r1, [r4, #0]
 8004424:	6054      	str	r4, [r2, #4]
 8004426:	e7c7      	b.n	80043b8 <_free_r+0x28>
 8004428:	b003      	add	sp, #12
 800442a:	bd30      	pop	{r4, r5, pc}
 800442c:	200002b4 	.word	0x200002b4

08004430 <_malloc_r>:
 8004430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004432:	1ccd      	adds	r5, r1, #3
 8004434:	f025 0503 	bic.w	r5, r5, #3
 8004438:	3508      	adds	r5, #8
 800443a:	2d0c      	cmp	r5, #12
 800443c:	bf38      	it	cc
 800443e:	250c      	movcc	r5, #12
 8004440:	2d00      	cmp	r5, #0
 8004442:	4606      	mov	r6, r0
 8004444:	db01      	blt.n	800444a <_malloc_r+0x1a>
 8004446:	42a9      	cmp	r1, r5
 8004448:	d903      	bls.n	8004452 <_malloc_r+0x22>
 800444a:	230c      	movs	r3, #12
 800444c:	6033      	str	r3, [r6, #0]
 800444e:	2000      	movs	r0, #0
 8004450:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004452:	f000 fd5d 	bl	8004f10 <__malloc_lock>
 8004456:	4921      	ldr	r1, [pc, #132]	; (80044dc <_malloc_r+0xac>)
 8004458:	680a      	ldr	r2, [r1, #0]
 800445a:	4614      	mov	r4, r2
 800445c:	b99c      	cbnz	r4, 8004486 <_malloc_r+0x56>
 800445e:	4f20      	ldr	r7, [pc, #128]	; (80044e0 <_malloc_r+0xb0>)
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	b923      	cbnz	r3, 800446e <_malloc_r+0x3e>
 8004464:	4621      	mov	r1, r4
 8004466:	4630      	mov	r0, r6
 8004468:	f000 fc86 	bl	8004d78 <_sbrk_r>
 800446c:	6038      	str	r0, [r7, #0]
 800446e:	4629      	mov	r1, r5
 8004470:	4630      	mov	r0, r6
 8004472:	f000 fc81 	bl	8004d78 <_sbrk_r>
 8004476:	1c43      	adds	r3, r0, #1
 8004478:	d123      	bne.n	80044c2 <_malloc_r+0x92>
 800447a:	230c      	movs	r3, #12
 800447c:	6033      	str	r3, [r6, #0]
 800447e:	4630      	mov	r0, r6
 8004480:	f000 fd4c 	bl	8004f1c <__malloc_unlock>
 8004484:	e7e3      	b.n	800444e <_malloc_r+0x1e>
 8004486:	6823      	ldr	r3, [r4, #0]
 8004488:	1b5b      	subs	r3, r3, r5
 800448a:	d417      	bmi.n	80044bc <_malloc_r+0x8c>
 800448c:	2b0b      	cmp	r3, #11
 800448e:	d903      	bls.n	8004498 <_malloc_r+0x68>
 8004490:	6023      	str	r3, [r4, #0]
 8004492:	441c      	add	r4, r3
 8004494:	6025      	str	r5, [r4, #0]
 8004496:	e004      	b.n	80044a2 <_malloc_r+0x72>
 8004498:	6863      	ldr	r3, [r4, #4]
 800449a:	42a2      	cmp	r2, r4
 800449c:	bf0c      	ite	eq
 800449e:	600b      	streq	r3, [r1, #0]
 80044a0:	6053      	strne	r3, [r2, #4]
 80044a2:	4630      	mov	r0, r6
 80044a4:	f000 fd3a 	bl	8004f1c <__malloc_unlock>
 80044a8:	f104 000b 	add.w	r0, r4, #11
 80044ac:	1d23      	adds	r3, r4, #4
 80044ae:	f020 0007 	bic.w	r0, r0, #7
 80044b2:	1ac2      	subs	r2, r0, r3
 80044b4:	d0cc      	beq.n	8004450 <_malloc_r+0x20>
 80044b6:	1a1b      	subs	r3, r3, r0
 80044b8:	50a3      	str	r3, [r4, r2]
 80044ba:	e7c9      	b.n	8004450 <_malloc_r+0x20>
 80044bc:	4622      	mov	r2, r4
 80044be:	6864      	ldr	r4, [r4, #4]
 80044c0:	e7cc      	b.n	800445c <_malloc_r+0x2c>
 80044c2:	1cc4      	adds	r4, r0, #3
 80044c4:	f024 0403 	bic.w	r4, r4, #3
 80044c8:	42a0      	cmp	r0, r4
 80044ca:	d0e3      	beq.n	8004494 <_malloc_r+0x64>
 80044cc:	1a21      	subs	r1, r4, r0
 80044ce:	4630      	mov	r0, r6
 80044d0:	f000 fc52 	bl	8004d78 <_sbrk_r>
 80044d4:	3001      	adds	r0, #1
 80044d6:	d1dd      	bne.n	8004494 <_malloc_r+0x64>
 80044d8:	e7cf      	b.n	800447a <_malloc_r+0x4a>
 80044da:	bf00      	nop
 80044dc:	200002b4 	.word	0x200002b4
 80044e0:	200002b8 	.word	0x200002b8

080044e4 <__ssputs_r>:
 80044e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e8:	688e      	ldr	r6, [r1, #8]
 80044ea:	429e      	cmp	r6, r3
 80044ec:	4682      	mov	sl, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	4690      	mov	r8, r2
 80044f2:	461f      	mov	r7, r3
 80044f4:	d838      	bhi.n	8004568 <__ssputs_r+0x84>
 80044f6:	898a      	ldrh	r2, [r1, #12]
 80044f8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80044fc:	d032      	beq.n	8004564 <__ssputs_r+0x80>
 80044fe:	6825      	ldr	r5, [r4, #0]
 8004500:	6909      	ldr	r1, [r1, #16]
 8004502:	eba5 0901 	sub.w	r9, r5, r1
 8004506:	6965      	ldr	r5, [r4, #20]
 8004508:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800450c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004510:	3301      	adds	r3, #1
 8004512:	444b      	add	r3, r9
 8004514:	106d      	asrs	r5, r5, #1
 8004516:	429d      	cmp	r5, r3
 8004518:	bf38      	it	cc
 800451a:	461d      	movcc	r5, r3
 800451c:	0553      	lsls	r3, r2, #21
 800451e:	d531      	bpl.n	8004584 <__ssputs_r+0xa0>
 8004520:	4629      	mov	r1, r5
 8004522:	f7ff ff85 	bl	8004430 <_malloc_r>
 8004526:	4606      	mov	r6, r0
 8004528:	b950      	cbnz	r0, 8004540 <__ssputs_r+0x5c>
 800452a:	230c      	movs	r3, #12
 800452c:	f8ca 3000 	str.w	r3, [sl]
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004536:	81a3      	strh	r3, [r4, #12]
 8004538:	f04f 30ff 	mov.w	r0, #4294967295
 800453c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004540:	6921      	ldr	r1, [r4, #16]
 8004542:	464a      	mov	r2, r9
 8004544:	f7ff fabc 	bl	8003ac0 <memcpy>
 8004548:	89a3      	ldrh	r3, [r4, #12]
 800454a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800454e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004552:	81a3      	strh	r3, [r4, #12]
 8004554:	6126      	str	r6, [r4, #16]
 8004556:	6165      	str	r5, [r4, #20]
 8004558:	444e      	add	r6, r9
 800455a:	eba5 0509 	sub.w	r5, r5, r9
 800455e:	6026      	str	r6, [r4, #0]
 8004560:	60a5      	str	r5, [r4, #8]
 8004562:	463e      	mov	r6, r7
 8004564:	42be      	cmp	r6, r7
 8004566:	d900      	bls.n	800456a <__ssputs_r+0x86>
 8004568:	463e      	mov	r6, r7
 800456a:	4632      	mov	r2, r6
 800456c:	6820      	ldr	r0, [r4, #0]
 800456e:	4641      	mov	r1, r8
 8004570:	f000 fcb4 	bl	8004edc <memmove>
 8004574:	68a3      	ldr	r3, [r4, #8]
 8004576:	6822      	ldr	r2, [r4, #0]
 8004578:	1b9b      	subs	r3, r3, r6
 800457a:	4432      	add	r2, r6
 800457c:	60a3      	str	r3, [r4, #8]
 800457e:	6022      	str	r2, [r4, #0]
 8004580:	2000      	movs	r0, #0
 8004582:	e7db      	b.n	800453c <__ssputs_r+0x58>
 8004584:	462a      	mov	r2, r5
 8004586:	f000 fccf 	bl	8004f28 <_realloc_r>
 800458a:	4606      	mov	r6, r0
 800458c:	2800      	cmp	r0, #0
 800458e:	d1e1      	bne.n	8004554 <__ssputs_r+0x70>
 8004590:	6921      	ldr	r1, [r4, #16]
 8004592:	4650      	mov	r0, sl
 8004594:	f7ff fefc 	bl	8004390 <_free_r>
 8004598:	e7c7      	b.n	800452a <__ssputs_r+0x46>
	...

0800459c <_svfiprintf_r>:
 800459c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045a0:	4698      	mov	r8, r3
 80045a2:	898b      	ldrh	r3, [r1, #12]
 80045a4:	061b      	lsls	r3, r3, #24
 80045a6:	b09d      	sub	sp, #116	; 0x74
 80045a8:	4607      	mov	r7, r0
 80045aa:	460d      	mov	r5, r1
 80045ac:	4614      	mov	r4, r2
 80045ae:	d50e      	bpl.n	80045ce <_svfiprintf_r+0x32>
 80045b0:	690b      	ldr	r3, [r1, #16]
 80045b2:	b963      	cbnz	r3, 80045ce <_svfiprintf_r+0x32>
 80045b4:	2140      	movs	r1, #64	; 0x40
 80045b6:	f7ff ff3b 	bl	8004430 <_malloc_r>
 80045ba:	6028      	str	r0, [r5, #0]
 80045bc:	6128      	str	r0, [r5, #16]
 80045be:	b920      	cbnz	r0, 80045ca <_svfiprintf_r+0x2e>
 80045c0:	230c      	movs	r3, #12
 80045c2:	603b      	str	r3, [r7, #0]
 80045c4:	f04f 30ff 	mov.w	r0, #4294967295
 80045c8:	e0d1      	b.n	800476e <_svfiprintf_r+0x1d2>
 80045ca:	2340      	movs	r3, #64	; 0x40
 80045cc:	616b      	str	r3, [r5, #20]
 80045ce:	2300      	movs	r3, #0
 80045d0:	9309      	str	r3, [sp, #36]	; 0x24
 80045d2:	2320      	movs	r3, #32
 80045d4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80045d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80045dc:	2330      	movs	r3, #48	; 0x30
 80045de:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004788 <_svfiprintf_r+0x1ec>
 80045e2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80045e6:	f04f 0901 	mov.w	r9, #1
 80045ea:	4623      	mov	r3, r4
 80045ec:	469a      	mov	sl, r3
 80045ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045f2:	b10a      	cbz	r2, 80045f8 <_svfiprintf_r+0x5c>
 80045f4:	2a25      	cmp	r2, #37	; 0x25
 80045f6:	d1f9      	bne.n	80045ec <_svfiprintf_r+0x50>
 80045f8:	ebba 0b04 	subs.w	fp, sl, r4
 80045fc:	d00b      	beq.n	8004616 <_svfiprintf_r+0x7a>
 80045fe:	465b      	mov	r3, fp
 8004600:	4622      	mov	r2, r4
 8004602:	4629      	mov	r1, r5
 8004604:	4638      	mov	r0, r7
 8004606:	f7ff ff6d 	bl	80044e4 <__ssputs_r>
 800460a:	3001      	adds	r0, #1
 800460c:	f000 80aa 	beq.w	8004764 <_svfiprintf_r+0x1c8>
 8004610:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004612:	445a      	add	r2, fp
 8004614:	9209      	str	r2, [sp, #36]	; 0x24
 8004616:	f89a 3000 	ldrb.w	r3, [sl]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 80a2 	beq.w	8004764 <_svfiprintf_r+0x1c8>
 8004620:	2300      	movs	r3, #0
 8004622:	f04f 32ff 	mov.w	r2, #4294967295
 8004626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800462a:	f10a 0a01 	add.w	sl, sl, #1
 800462e:	9304      	str	r3, [sp, #16]
 8004630:	9307      	str	r3, [sp, #28]
 8004632:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004636:	931a      	str	r3, [sp, #104]	; 0x68
 8004638:	4654      	mov	r4, sl
 800463a:	2205      	movs	r2, #5
 800463c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004640:	4851      	ldr	r0, [pc, #324]	; (8004788 <_svfiprintf_r+0x1ec>)
 8004642:	f7fb fdcd 	bl	80001e0 <memchr>
 8004646:	9a04      	ldr	r2, [sp, #16]
 8004648:	b9d8      	cbnz	r0, 8004682 <_svfiprintf_r+0xe6>
 800464a:	06d0      	lsls	r0, r2, #27
 800464c:	bf44      	itt	mi
 800464e:	2320      	movmi	r3, #32
 8004650:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004654:	0711      	lsls	r1, r2, #28
 8004656:	bf44      	itt	mi
 8004658:	232b      	movmi	r3, #43	; 0x2b
 800465a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800465e:	f89a 3000 	ldrb.w	r3, [sl]
 8004662:	2b2a      	cmp	r3, #42	; 0x2a
 8004664:	d015      	beq.n	8004692 <_svfiprintf_r+0xf6>
 8004666:	9a07      	ldr	r2, [sp, #28]
 8004668:	4654      	mov	r4, sl
 800466a:	2000      	movs	r0, #0
 800466c:	f04f 0c0a 	mov.w	ip, #10
 8004670:	4621      	mov	r1, r4
 8004672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004676:	3b30      	subs	r3, #48	; 0x30
 8004678:	2b09      	cmp	r3, #9
 800467a:	d94e      	bls.n	800471a <_svfiprintf_r+0x17e>
 800467c:	b1b0      	cbz	r0, 80046ac <_svfiprintf_r+0x110>
 800467e:	9207      	str	r2, [sp, #28]
 8004680:	e014      	b.n	80046ac <_svfiprintf_r+0x110>
 8004682:	eba0 0308 	sub.w	r3, r0, r8
 8004686:	fa09 f303 	lsl.w	r3, r9, r3
 800468a:	4313      	orrs	r3, r2
 800468c:	9304      	str	r3, [sp, #16]
 800468e:	46a2      	mov	sl, r4
 8004690:	e7d2      	b.n	8004638 <_svfiprintf_r+0x9c>
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	1d19      	adds	r1, r3, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	9103      	str	r1, [sp, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	bfbb      	ittet	lt
 800469e:	425b      	neglt	r3, r3
 80046a0:	f042 0202 	orrlt.w	r2, r2, #2
 80046a4:	9307      	strge	r3, [sp, #28]
 80046a6:	9307      	strlt	r3, [sp, #28]
 80046a8:	bfb8      	it	lt
 80046aa:	9204      	strlt	r2, [sp, #16]
 80046ac:	7823      	ldrb	r3, [r4, #0]
 80046ae:	2b2e      	cmp	r3, #46	; 0x2e
 80046b0:	d10c      	bne.n	80046cc <_svfiprintf_r+0x130>
 80046b2:	7863      	ldrb	r3, [r4, #1]
 80046b4:	2b2a      	cmp	r3, #42	; 0x2a
 80046b6:	d135      	bne.n	8004724 <_svfiprintf_r+0x188>
 80046b8:	9b03      	ldr	r3, [sp, #12]
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	9203      	str	r2, [sp, #12]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	bfb8      	it	lt
 80046c4:	f04f 33ff 	movlt.w	r3, #4294967295
 80046c8:	3402      	adds	r4, #2
 80046ca:	9305      	str	r3, [sp, #20]
 80046cc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004798 <_svfiprintf_r+0x1fc>
 80046d0:	7821      	ldrb	r1, [r4, #0]
 80046d2:	2203      	movs	r2, #3
 80046d4:	4650      	mov	r0, sl
 80046d6:	f7fb fd83 	bl	80001e0 <memchr>
 80046da:	b140      	cbz	r0, 80046ee <_svfiprintf_r+0x152>
 80046dc:	2340      	movs	r3, #64	; 0x40
 80046de:	eba0 000a 	sub.w	r0, r0, sl
 80046e2:	fa03 f000 	lsl.w	r0, r3, r0
 80046e6:	9b04      	ldr	r3, [sp, #16]
 80046e8:	4303      	orrs	r3, r0
 80046ea:	3401      	adds	r4, #1
 80046ec:	9304      	str	r3, [sp, #16]
 80046ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046f2:	4826      	ldr	r0, [pc, #152]	; (800478c <_svfiprintf_r+0x1f0>)
 80046f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80046f8:	2206      	movs	r2, #6
 80046fa:	f7fb fd71 	bl	80001e0 <memchr>
 80046fe:	2800      	cmp	r0, #0
 8004700:	d038      	beq.n	8004774 <_svfiprintf_r+0x1d8>
 8004702:	4b23      	ldr	r3, [pc, #140]	; (8004790 <_svfiprintf_r+0x1f4>)
 8004704:	bb1b      	cbnz	r3, 800474e <_svfiprintf_r+0x1b2>
 8004706:	9b03      	ldr	r3, [sp, #12]
 8004708:	3307      	adds	r3, #7
 800470a:	f023 0307 	bic.w	r3, r3, #7
 800470e:	3308      	adds	r3, #8
 8004710:	9303      	str	r3, [sp, #12]
 8004712:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004714:	4433      	add	r3, r6
 8004716:	9309      	str	r3, [sp, #36]	; 0x24
 8004718:	e767      	b.n	80045ea <_svfiprintf_r+0x4e>
 800471a:	fb0c 3202 	mla	r2, ip, r2, r3
 800471e:	460c      	mov	r4, r1
 8004720:	2001      	movs	r0, #1
 8004722:	e7a5      	b.n	8004670 <_svfiprintf_r+0xd4>
 8004724:	2300      	movs	r3, #0
 8004726:	3401      	adds	r4, #1
 8004728:	9305      	str	r3, [sp, #20]
 800472a:	4619      	mov	r1, r3
 800472c:	f04f 0c0a 	mov.w	ip, #10
 8004730:	4620      	mov	r0, r4
 8004732:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004736:	3a30      	subs	r2, #48	; 0x30
 8004738:	2a09      	cmp	r2, #9
 800473a:	d903      	bls.n	8004744 <_svfiprintf_r+0x1a8>
 800473c:	2b00      	cmp	r3, #0
 800473e:	d0c5      	beq.n	80046cc <_svfiprintf_r+0x130>
 8004740:	9105      	str	r1, [sp, #20]
 8004742:	e7c3      	b.n	80046cc <_svfiprintf_r+0x130>
 8004744:	fb0c 2101 	mla	r1, ip, r1, r2
 8004748:	4604      	mov	r4, r0
 800474a:	2301      	movs	r3, #1
 800474c:	e7f0      	b.n	8004730 <_svfiprintf_r+0x194>
 800474e:	ab03      	add	r3, sp, #12
 8004750:	9300      	str	r3, [sp, #0]
 8004752:	462a      	mov	r2, r5
 8004754:	4b0f      	ldr	r3, [pc, #60]	; (8004794 <_svfiprintf_r+0x1f8>)
 8004756:	a904      	add	r1, sp, #16
 8004758:	4638      	mov	r0, r7
 800475a:	f3af 8000 	nop.w
 800475e:	1c42      	adds	r2, r0, #1
 8004760:	4606      	mov	r6, r0
 8004762:	d1d6      	bne.n	8004712 <_svfiprintf_r+0x176>
 8004764:	89ab      	ldrh	r3, [r5, #12]
 8004766:	065b      	lsls	r3, r3, #25
 8004768:	f53f af2c 	bmi.w	80045c4 <_svfiprintf_r+0x28>
 800476c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800476e:	b01d      	add	sp, #116	; 0x74
 8004770:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004774:	ab03      	add	r3, sp, #12
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	462a      	mov	r2, r5
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <_svfiprintf_r+0x1f8>)
 800477c:	a904      	add	r1, sp, #16
 800477e:	4638      	mov	r0, r7
 8004780:	f000 f9d4 	bl	8004b2c <_printf_i>
 8004784:	e7eb      	b.n	800475e <_svfiprintf_r+0x1c2>
 8004786:	bf00      	nop
 8004788:	080059e0 	.word	0x080059e0
 800478c:	080059ea 	.word	0x080059ea
 8004790:	00000000 	.word	0x00000000
 8004794:	080044e5 	.word	0x080044e5
 8004798:	080059e6 	.word	0x080059e6

0800479c <__sfputc_r>:
 800479c:	6893      	ldr	r3, [r2, #8]
 800479e:	3b01      	subs	r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	b410      	push	{r4}
 80047a4:	6093      	str	r3, [r2, #8]
 80047a6:	da08      	bge.n	80047ba <__sfputc_r+0x1e>
 80047a8:	6994      	ldr	r4, [r2, #24]
 80047aa:	42a3      	cmp	r3, r4
 80047ac:	db01      	blt.n	80047b2 <__sfputc_r+0x16>
 80047ae:	290a      	cmp	r1, #10
 80047b0:	d103      	bne.n	80047ba <__sfputc_r+0x1e>
 80047b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047b6:	f7ff bad5 	b.w	8003d64 <__swbuf_r>
 80047ba:	6813      	ldr	r3, [r2, #0]
 80047bc:	1c58      	adds	r0, r3, #1
 80047be:	6010      	str	r0, [r2, #0]
 80047c0:	7019      	strb	r1, [r3, #0]
 80047c2:	4608      	mov	r0, r1
 80047c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <__sfputs_r>:
 80047ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047cc:	4606      	mov	r6, r0
 80047ce:	460f      	mov	r7, r1
 80047d0:	4614      	mov	r4, r2
 80047d2:	18d5      	adds	r5, r2, r3
 80047d4:	42ac      	cmp	r4, r5
 80047d6:	d101      	bne.n	80047dc <__sfputs_r+0x12>
 80047d8:	2000      	movs	r0, #0
 80047da:	e007      	b.n	80047ec <__sfputs_r+0x22>
 80047dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80047e0:	463a      	mov	r2, r7
 80047e2:	4630      	mov	r0, r6
 80047e4:	f7ff ffda 	bl	800479c <__sfputc_r>
 80047e8:	1c43      	adds	r3, r0, #1
 80047ea:	d1f3      	bne.n	80047d4 <__sfputs_r+0xa>
 80047ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047f0 <_vfiprintf_r>:
 80047f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f4:	460d      	mov	r5, r1
 80047f6:	b09d      	sub	sp, #116	; 0x74
 80047f8:	4614      	mov	r4, r2
 80047fa:	4698      	mov	r8, r3
 80047fc:	4606      	mov	r6, r0
 80047fe:	b118      	cbz	r0, 8004808 <_vfiprintf_r+0x18>
 8004800:	6983      	ldr	r3, [r0, #24]
 8004802:	b90b      	cbnz	r3, 8004808 <_vfiprintf_r+0x18>
 8004804:	f7ff fca6 	bl	8004154 <__sinit>
 8004808:	4b89      	ldr	r3, [pc, #548]	; (8004a30 <_vfiprintf_r+0x240>)
 800480a:	429d      	cmp	r5, r3
 800480c:	d11b      	bne.n	8004846 <_vfiprintf_r+0x56>
 800480e:	6875      	ldr	r5, [r6, #4]
 8004810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004812:	07d9      	lsls	r1, r3, #31
 8004814:	d405      	bmi.n	8004822 <_vfiprintf_r+0x32>
 8004816:	89ab      	ldrh	r3, [r5, #12]
 8004818:	059a      	lsls	r2, r3, #22
 800481a:	d402      	bmi.n	8004822 <_vfiprintf_r+0x32>
 800481c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800481e:	f7ff fd49 	bl	80042b4 <__retarget_lock_acquire_recursive>
 8004822:	89ab      	ldrh	r3, [r5, #12]
 8004824:	071b      	lsls	r3, r3, #28
 8004826:	d501      	bpl.n	800482c <_vfiprintf_r+0x3c>
 8004828:	692b      	ldr	r3, [r5, #16]
 800482a:	b9eb      	cbnz	r3, 8004868 <_vfiprintf_r+0x78>
 800482c:	4629      	mov	r1, r5
 800482e:	4630      	mov	r0, r6
 8004830:	f7ff faea 	bl	8003e08 <__swsetup_r>
 8004834:	b1c0      	cbz	r0, 8004868 <_vfiprintf_r+0x78>
 8004836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004838:	07dc      	lsls	r4, r3, #31
 800483a:	d50e      	bpl.n	800485a <_vfiprintf_r+0x6a>
 800483c:	f04f 30ff 	mov.w	r0, #4294967295
 8004840:	b01d      	add	sp, #116	; 0x74
 8004842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004846:	4b7b      	ldr	r3, [pc, #492]	; (8004a34 <_vfiprintf_r+0x244>)
 8004848:	429d      	cmp	r5, r3
 800484a:	d101      	bne.n	8004850 <_vfiprintf_r+0x60>
 800484c:	68b5      	ldr	r5, [r6, #8]
 800484e:	e7df      	b.n	8004810 <_vfiprintf_r+0x20>
 8004850:	4b79      	ldr	r3, [pc, #484]	; (8004a38 <_vfiprintf_r+0x248>)
 8004852:	429d      	cmp	r5, r3
 8004854:	bf08      	it	eq
 8004856:	68f5      	ldreq	r5, [r6, #12]
 8004858:	e7da      	b.n	8004810 <_vfiprintf_r+0x20>
 800485a:	89ab      	ldrh	r3, [r5, #12]
 800485c:	0598      	lsls	r0, r3, #22
 800485e:	d4ed      	bmi.n	800483c <_vfiprintf_r+0x4c>
 8004860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004862:	f7ff fd28 	bl	80042b6 <__retarget_lock_release_recursive>
 8004866:	e7e9      	b.n	800483c <_vfiprintf_r+0x4c>
 8004868:	2300      	movs	r3, #0
 800486a:	9309      	str	r3, [sp, #36]	; 0x24
 800486c:	2320      	movs	r3, #32
 800486e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004872:	f8cd 800c 	str.w	r8, [sp, #12]
 8004876:	2330      	movs	r3, #48	; 0x30
 8004878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8004a3c <_vfiprintf_r+0x24c>
 800487c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004880:	f04f 0901 	mov.w	r9, #1
 8004884:	4623      	mov	r3, r4
 8004886:	469a      	mov	sl, r3
 8004888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800488c:	b10a      	cbz	r2, 8004892 <_vfiprintf_r+0xa2>
 800488e:	2a25      	cmp	r2, #37	; 0x25
 8004890:	d1f9      	bne.n	8004886 <_vfiprintf_r+0x96>
 8004892:	ebba 0b04 	subs.w	fp, sl, r4
 8004896:	d00b      	beq.n	80048b0 <_vfiprintf_r+0xc0>
 8004898:	465b      	mov	r3, fp
 800489a:	4622      	mov	r2, r4
 800489c:	4629      	mov	r1, r5
 800489e:	4630      	mov	r0, r6
 80048a0:	f7ff ff93 	bl	80047ca <__sfputs_r>
 80048a4:	3001      	adds	r0, #1
 80048a6:	f000 80aa 	beq.w	80049fe <_vfiprintf_r+0x20e>
 80048aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048ac:	445a      	add	r2, fp
 80048ae:	9209      	str	r2, [sp, #36]	; 0x24
 80048b0:	f89a 3000 	ldrb.w	r3, [sl]
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	f000 80a2 	beq.w	80049fe <_vfiprintf_r+0x20e>
 80048ba:	2300      	movs	r3, #0
 80048bc:	f04f 32ff 	mov.w	r2, #4294967295
 80048c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048c4:	f10a 0a01 	add.w	sl, sl, #1
 80048c8:	9304      	str	r3, [sp, #16]
 80048ca:	9307      	str	r3, [sp, #28]
 80048cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048d0:	931a      	str	r3, [sp, #104]	; 0x68
 80048d2:	4654      	mov	r4, sl
 80048d4:	2205      	movs	r2, #5
 80048d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80048da:	4858      	ldr	r0, [pc, #352]	; (8004a3c <_vfiprintf_r+0x24c>)
 80048dc:	f7fb fc80 	bl	80001e0 <memchr>
 80048e0:	9a04      	ldr	r2, [sp, #16]
 80048e2:	b9d8      	cbnz	r0, 800491c <_vfiprintf_r+0x12c>
 80048e4:	06d1      	lsls	r1, r2, #27
 80048e6:	bf44      	itt	mi
 80048e8:	2320      	movmi	r3, #32
 80048ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048ee:	0713      	lsls	r3, r2, #28
 80048f0:	bf44      	itt	mi
 80048f2:	232b      	movmi	r3, #43	; 0x2b
 80048f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80048f8:	f89a 3000 	ldrb.w	r3, [sl]
 80048fc:	2b2a      	cmp	r3, #42	; 0x2a
 80048fe:	d015      	beq.n	800492c <_vfiprintf_r+0x13c>
 8004900:	9a07      	ldr	r2, [sp, #28]
 8004902:	4654      	mov	r4, sl
 8004904:	2000      	movs	r0, #0
 8004906:	f04f 0c0a 	mov.w	ip, #10
 800490a:	4621      	mov	r1, r4
 800490c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004910:	3b30      	subs	r3, #48	; 0x30
 8004912:	2b09      	cmp	r3, #9
 8004914:	d94e      	bls.n	80049b4 <_vfiprintf_r+0x1c4>
 8004916:	b1b0      	cbz	r0, 8004946 <_vfiprintf_r+0x156>
 8004918:	9207      	str	r2, [sp, #28]
 800491a:	e014      	b.n	8004946 <_vfiprintf_r+0x156>
 800491c:	eba0 0308 	sub.w	r3, r0, r8
 8004920:	fa09 f303 	lsl.w	r3, r9, r3
 8004924:	4313      	orrs	r3, r2
 8004926:	9304      	str	r3, [sp, #16]
 8004928:	46a2      	mov	sl, r4
 800492a:	e7d2      	b.n	80048d2 <_vfiprintf_r+0xe2>
 800492c:	9b03      	ldr	r3, [sp, #12]
 800492e:	1d19      	adds	r1, r3, #4
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	9103      	str	r1, [sp, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	bfbb      	ittet	lt
 8004938:	425b      	neglt	r3, r3
 800493a:	f042 0202 	orrlt.w	r2, r2, #2
 800493e:	9307      	strge	r3, [sp, #28]
 8004940:	9307      	strlt	r3, [sp, #28]
 8004942:	bfb8      	it	lt
 8004944:	9204      	strlt	r2, [sp, #16]
 8004946:	7823      	ldrb	r3, [r4, #0]
 8004948:	2b2e      	cmp	r3, #46	; 0x2e
 800494a:	d10c      	bne.n	8004966 <_vfiprintf_r+0x176>
 800494c:	7863      	ldrb	r3, [r4, #1]
 800494e:	2b2a      	cmp	r3, #42	; 0x2a
 8004950:	d135      	bne.n	80049be <_vfiprintf_r+0x1ce>
 8004952:	9b03      	ldr	r3, [sp, #12]
 8004954:	1d1a      	adds	r2, r3, #4
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	9203      	str	r2, [sp, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	bfb8      	it	lt
 800495e:	f04f 33ff 	movlt.w	r3, #4294967295
 8004962:	3402      	adds	r4, #2
 8004964:	9305      	str	r3, [sp, #20]
 8004966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004a4c <_vfiprintf_r+0x25c>
 800496a:	7821      	ldrb	r1, [r4, #0]
 800496c:	2203      	movs	r2, #3
 800496e:	4650      	mov	r0, sl
 8004970:	f7fb fc36 	bl	80001e0 <memchr>
 8004974:	b140      	cbz	r0, 8004988 <_vfiprintf_r+0x198>
 8004976:	2340      	movs	r3, #64	; 0x40
 8004978:	eba0 000a 	sub.w	r0, r0, sl
 800497c:	fa03 f000 	lsl.w	r0, r3, r0
 8004980:	9b04      	ldr	r3, [sp, #16]
 8004982:	4303      	orrs	r3, r0
 8004984:	3401      	adds	r4, #1
 8004986:	9304      	str	r3, [sp, #16]
 8004988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800498c:	482c      	ldr	r0, [pc, #176]	; (8004a40 <_vfiprintf_r+0x250>)
 800498e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004992:	2206      	movs	r2, #6
 8004994:	f7fb fc24 	bl	80001e0 <memchr>
 8004998:	2800      	cmp	r0, #0
 800499a:	d03f      	beq.n	8004a1c <_vfiprintf_r+0x22c>
 800499c:	4b29      	ldr	r3, [pc, #164]	; (8004a44 <_vfiprintf_r+0x254>)
 800499e:	bb1b      	cbnz	r3, 80049e8 <_vfiprintf_r+0x1f8>
 80049a0:	9b03      	ldr	r3, [sp, #12]
 80049a2:	3307      	adds	r3, #7
 80049a4:	f023 0307 	bic.w	r3, r3, #7
 80049a8:	3308      	adds	r3, #8
 80049aa:	9303      	str	r3, [sp, #12]
 80049ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049ae:	443b      	add	r3, r7
 80049b0:	9309      	str	r3, [sp, #36]	; 0x24
 80049b2:	e767      	b.n	8004884 <_vfiprintf_r+0x94>
 80049b4:	fb0c 3202 	mla	r2, ip, r2, r3
 80049b8:	460c      	mov	r4, r1
 80049ba:	2001      	movs	r0, #1
 80049bc:	e7a5      	b.n	800490a <_vfiprintf_r+0x11a>
 80049be:	2300      	movs	r3, #0
 80049c0:	3401      	adds	r4, #1
 80049c2:	9305      	str	r3, [sp, #20]
 80049c4:	4619      	mov	r1, r3
 80049c6:	f04f 0c0a 	mov.w	ip, #10
 80049ca:	4620      	mov	r0, r4
 80049cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049d0:	3a30      	subs	r2, #48	; 0x30
 80049d2:	2a09      	cmp	r2, #9
 80049d4:	d903      	bls.n	80049de <_vfiprintf_r+0x1ee>
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0c5      	beq.n	8004966 <_vfiprintf_r+0x176>
 80049da:	9105      	str	r1, [sp, #20]
 80049dc:	e7c3      	b.n	8004966 <_vfiprintf_r+0x176>
 80049de:	fb0c 2101 	mla	r1, ip, r1, r2
 80049e2:	4604      	mov	r4, r0
 80049e4:	2301      	movs	r3, #1
 80049e6:	e7f0      	b.n	80049ca <_vfiprintf_r+0x1da>
 80049e8:	ab03      	add	r3, sp, #12
 80049ea:	9300      	str	r3, [sp, #0]
 80049ec:	462a      	mov	r2, r5
 80049ee:	4b16      	ldr	r3, [pc, #88]	; (8004a48 <_vfiprintf_r+0x258>)
 80049f0:	a904      	add	r1, sp, #16
 80049f2:	4630      	mov	r0, r6
 80049f4:	f3af 8000 	nop.w
 80049f8:	4607      	mov	r7, r0
 80049fa:	1c78      	adds	r0, r7, #1
 80049fc:	d1d6      	bne.n	80049ac <_vfiprintf_r+0x1bc>
 80049fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8004a00:	07d9      	lsls	r1, r3, #31
 8004a02:	d405      	bmi.n	8004a10 <_vfiprintf_r+0x220>
 8004a04:	89ab      	ldrh	r3, [r5, #12]
 8004a06:	059a      	lsls	r2, r3, #22
 8004a08:	d402      	bmi.n	8004a10 <_vfiprintf_r+0x220>
 8004a0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004a0c:	f7ff fc53 	bl	80042b6 <__retarget_lock_release_recursive>
 8004a10:	89ab      	ldrh	r3, [r5, #12]
 8004a12:	065b      	lsls	r3, r3, #25
 8004a14:	f53f af12 	bmi.w	800483c <_vfiprintf_r+0x4c>
 8004a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a1a:	e711      	b.n	8004840 <_vfiprintf_r+0x50>
 8004a1c:	ab03      	add	r3, sp, #12
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	462a      	mov	r2, r5
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <_vfiprintf_r+0x258>)
 8004a24:	a904      	add	r1, sp, #16
 8004a26:	4630      	mov	r0, r6
 8004a28:	f000 f880 	bl	8004b2c <_printf_i>
 8004a2c:	e7e4      	b.n	80049f8 <_vfiprintf_r+0x208>
 8004a2e:	bf00      	nop
 8004a30:	080059a0 	.word	0x080059a0
 8004a34:	080059c0 	.word	0x080059c0
 8004a38:	08005980 	.word	0x08005980
 8004a3c:	080059e0 	.word	0x080059e0
 8004a40:	080059ea 	.word	0x080059ea
 8004a44:	00000000 	.word	0x00000000
 8004a48:	080047cb 	.word	0x080047cb
 8004a4c:	080059e6 	.word	0x080059e6

08004a50 <_printf_common>:
 8004a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	4616      	mov	r6, r2
 8004a56:	4699      	mov	r9, r3
 8004a58:	688a      	ldr	r2, [r1, #8]
 8004a5a:	690b      	ldr	r3, [r1, #16]
 8004a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a60:	4293      	cmp	r3, r2
 8004a62:	bfb8      	it	lt
 8004a64:	4613      	movlt	r3, r2
 8004a66:	6033      	str	r3, [r6, #0]
 8004a68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a6c:	4607      	mov	r7, r0
 8004a6e:	460c      	mov	r4, r1
 8004a70:	b10a      	cbz	r2, 8004a76 <_printf_common+0x26>
 8004a72:	3301      	adds	r3, #1
 8004a74:	6033      	str	r3, [r6, #0]
 8004a76:	6823      	ldr	r3, [r4, #0]
 8004a78:	0699      	lsls	r1, r3, #26
 8004a7a:	bf42      	ittt	mi
 8004a7c:	6833      	ldrmi	r3, [r6, #0]
 8004a7e:	3302      	addmi	r3, #2
 8004a80:	6033      	strmi	r3, [r6, #0]
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	f015 0506 	ands.w	r5, r5, #6
 8004a88:	d106      	bne.n	8004a98 <_printf_common+0x48>
 8004a8a:	f104 0a19 	add.w	sl, r4, #25
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	6832      	ldr	r2, [r6, #0]
 8004a92:	1a9b      	subs	r3, r3, r2
 8004a94:	42ab      	cmp	r3, r5
 8004a96:	dc26      	bgt.n	8004ae6 <_printf_common+0x96>
 8004a98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004a9c:	1e13      	subs	r3, r2, #0
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	bf18      	it	ne
 8004aa2:	2301      	movne	r3, #1
 8004aa4:	0692      	lsls	r2, r2, #26
 8004aa6:	d42b      	bmi.n	8004b00 <_printf_common+0xb0>
 8004aa8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aac:	4649      	mov	r1, r9
 8004aae:	4638      	mov	r0, r7
 8004ab0:	47c0      	blx	r8
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	d01e      	beq.n	8004af4 <_printf_common+0xa4>
 8004ab6:	6823      	ldr	r3, [r4, #0]
 8004ab8:	68e5      	ldr	r5, [r4, #12]
 8004aba:	6832      	ldr	r2, [r6, #0]
 8004abc:	f003 0306 	and.w	r3, r3, #6
 8004ac0:	2b04      	cmp	r3, #4
 8004ac2:	bf08      	it	eq
 8004ac4:	1aad      	subeq	r5, r5, r2
 8004ac6:	68a3      	ldr	r3, [r4, #8]
 8004ac8:	6922      	ldr	r2, [r4, #16]
 8004aca:	bf0c      	ite	eq
 8004acc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ad0:	2500      	movne	r5, #0
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	bfc4      	itt	gt
 8004ad6:	1a9b      	subgt	r3, r3, r2
 8004ad8:	18ed      	addgt	r5, r5, r3
 8004ada:	2600      	movs	r6, #0
 8004adc:	341a      	adds	r4, #26
 8004ade:	42b5      	cmp	r5, r6
 8004ae0:	d11a      	bne.n	8004b18 <_printf_common+0xc8>
 8004ae2:	2000      	movs	r0, #0
 8004ae4:	e008      	b.n	8004af8 <_printf_common+0xa8>
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	4652      	mov	r2, sl
 8004aea:	4649      	mov	r1, r9
 8004aec:	4638      	mov	r0, r7
 8004aee:	47c0      	blx	r8
 8004af0:	3001      	adds	r0, #1
 8004af2:	d103      	bne.n	8004afc <_printf_common+0xac>
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004afc:	3501      	adds	r5, #1
 8004afe:	e7c6      	b.n	8004a8e <_printf_common+0x3e>
 8004b00:	18e1      	adds	r1, r4, r3
 8004b02:	1c5a      	adds	r2, r3, #1
 8004b04:	2030      	movs	r0, #48	; 0x30
 8004b06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b0a:	4422      	add	r2, r4
 8004b0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b14:	3302      	adds	r3, #2
 8004b16:	e7c7      	b.n	8004aa8 <_printf_common+0x58>
 8004b18:	2301      	movs	r3, #1
 8004b1a:	4622      	mov	r2, r4
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4638      	mov	r0, r7
 8004b20:	47c0      	blx	r8
 8004b22:	3001      	adds	r0, #1
 8004b24:	d0e6      	beq.n	8004af4 <_printf_common+0xa4>
 8004b26:	3601      	adds	r6, #1
 8004b28:	e7d9      	b.n	8004ade <_printf_common+0x8e>
	...

08004b2c <_printf_i>:
 8004b2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b30:	460c      	mov	r4, r1
 8004b32:	4691      	mov	r9, r2
 8004b34:	7e27      	ldrb	r7, [r4, #24]
 8004b36:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004b38:	2f78      	cmp	r7, #120	; 0x78
 8004b3a:	4680      	mov	r8, r0
 8004b3c:	469a      	mov	sl, r3
 8004b3e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b42:	d807      	bhi.n	8004b54 <_printf_i+0x28>
 8004b44:	2f62      	cmp	r7, #98	; 0x62
 8004b46:	d80a      	bhi.n	8004b5e <_printf_i+0x32>
 8004b48:	2f00      	cmp	r7, #0
 8004b4a:	f000 80d8 	beq.w	8004cfe <_printf_i+0x1d2>
 8004b4e:	2f58      	cmp	r7, #88	; 0x58
 8004b50:	f000 80a3 	beq.w	8004c9a <_printf_i+0x16e>
 8004b54:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004b58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b5c:	e03a      	b.n	8004bd4 <_printf_i+0xa8>
 8004b5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b62:	2b15      	cmp	r3, #21
 8004b64:	d8f6      	bhi.n	8004b54 <_printf_i+0x28>
 8004b66:	a001      	add	r0, pc, #4	; (adr r0, 8004b6c <_printf_i+0x40>)
 8004b68:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004b6c:	08004bc5 	.word	0x08004bc5
 8004b70:	08004bd9 	.word	0x08004bd9
 8004b74:	08004b55 	.word	0x08004b55
 8004b78:	08004b55 	.word	0x08004b55
 8004b7c:	08004b55 	.word	0x08004b55
 8004b80:	08004b55 	.word	0x08004b55
 8004b84:	08004bd9 	.word	0x08004bd9
 8004b88:	08004b55 	.word	0x08004b55
 8004b8c:	08004b55 	.word	0x08004b55
 8004b90:	08004b55 	.word	0x08004b55
 8004b94:	08004b55 	.word	0x08004b55
 8004b98:	08004ce5 	.word	0x08004ce5
 8004b9c:	08004c09 	.word	0x08004c09
 8004ba0:	08004cc7 	.word	0x08004cc7
 8004ba4:	08004b55 	.word	0x08004b55
 8004ba8:	08004b55 	.word	0x08004b55
 8004bac:	08004d07 	.word	0x08004d07
 8004bb0:	08004b55 	.word	0x08004b55
 8004bb4:	08004c09 	.word	0x08004c09
 8004bb8:	08004b55 	.word	0x08004b55
 8004bbc:	08004b55 	.word	0x08004b55
 8004bc0:	08004ccf 	.word	0x08004ccf
 8004bc4:	680b      	ldr	r3, [r1, #0]
 8004bc6:	1d1a      	adds	r2, r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	600a      	str	r2, [r1, #0]
 8004bcc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e0a3      	b.n	8004d20 <_printf_i+0x1f4>
 8004bd8:	6825      	ldr	r5, [r4, #0]
 8004bda:	6808      	ldr	r0, [r1, #0]
 8004bdc:	062e      	lsls	r6, r5, #24
 8004bde:	f100 0304 	add.w	r3, r0, #4
 8004be2:	d50a      	bpl.n	8004bfa <_printf_i+0xce>
 8004be4:	6805      	ldr	r5, [r0, #0]
 8004be6:	600b      	str	r3, [r1, #0]
 8004be8:	2d00      	cmp	r5, #0
 8004bea:	da03      	bge.n	8004bf4 <_printf_i+0xc8>
 8004bec:	232d      	movs	r3, #45	; 0x2d
 8004bee:	426d      	negs	r5, r5
 8004bf0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004bf4:	485e      	ldr	r0, [pc, #376]	; (8004d70 <_printf_i+0x244>)
 8004bf6:	230a      	movs	r3, #10
 8004bf8:	e019      	b.n	8004c2e <_printf_i+0x102>
 8004bfa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004bfe:	6805      	ldr	r5, [r0, #0]
 8004c00:	600b      	str	r3, [r1, #0]
 8004c02:	bf18      	it	ne
 8004c04:	b22d      	sxthne	r5, r5
 8004c06:	e7ef      	b.n	8004be8 <_printf_i+0xbc>
 8004c08:	680b      	ldr	r3, [r1, #0]
 8004c0a:	6825      	ldr	r5, [r4, #0]
 8004c0c:	1d18      	adds	r0, r3, #4
 8004c0e:	6008      	str	r0, [r1, #0]
 8004c10:	0628      	lsls	r0, r5, #24
 8004c12:	d501      	bpl.n	8004c18 <_printf_i+0xec>
 8004c14:	681d      	ldr	r5, [r3, #0]
 8004c16:	e002      	b.n	8004c1e <_printf_i+0xf2>
 8004c18:	0669      	lsls	r1, r5, #25
 8004c1a:	d5fb      	bpl.n	8004c14 <_printf_i+0xe8>
 8004c1c:	881d      	ldrh	r5, [r3, #0]
 8004c1e:	4854      	ldr	r0, [pc, #336]	; (8004d70 <_printf_i+0x244>)
 8004c20:	2f6f      	cmp	r7, #111	; 0x6f
 8004c22:	bf0c      	ite	eq
 8004c24:	2308      	moveq	r3, #8
 8004c26:	230a      	movne	r3, #10
 8004c28:	2100      	movs	r1, #0
 8004c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c2e:	6866      	ldr	r6, [r4, #4]
 8004c30:	60a6      	str	r6, [r4, #8]
 8004c32:	2e00      	cmp	r6, #0
 8004c34:	bfa2      	ittt	ge
 8004c36:	6821      	ldrge	r1, [r4, #0]
 8004c38:	f021 0104 	bicge.w	r1, r1, #4
 8004c3c:	6021      	strge	r1, [r4, #0]
 8004c3e:	b90d      	cbnz	r5, 8004c44 <_printf_i+0x118>
 8004c40:	2e00      	cmp	r6, #0
 8004c42:	d04d      	beq.n	8004ce0 <_printf_i+0x1b4>
 8004c44:	4616      	mov	r6, r2
 8004c46:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c4a:	fb03 5711 	mls	r7, r3, r1, r5
 8004c4e:	5dc7      	ldrb	r7, [r0, r7]
 8004c50:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c54:	462f      	mov	r7, r5
 8004c56:	42bb      	cmp	r3, r7
 8004c58:	460d      	mov	r5, r1
 8004c5a:	d9f4      	bls.n	8004c46 <_printf_i+0x11a>
 8004c5c:	2b08      	cmp	r3, #8
 8004c5e:	d10b      	bne.n	8004c78 <_printf_i+0x14c>
 8004c60:	6823      	ldr	r3, [r4, #0]
 8004c62:	07df      	lsls	r7, r3, #31
 8004c64:	d508      	bpl.n	8004c78 <_printf_i+0x14c>
 8004c66:	6923      	ldr	r3, [r4, #16]
 8004c68:	6861      	ldr	r1, [r4, #4]
 8004c6a:	4299      	cmp	r1, r3
 8004c6c:	bfde      	ittt	le
 8004c6e:	2330      	movle	r3, #48	; 0x30
 8004c70:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c74:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c78:	1b92      	subs	r2, r2, r6
 8004c7a:	6122      	str	r2, [r4, #16]
 8004c7c:	f8cd a000 	str.w	sl, [sp]
 8004c80:	464b      	mov	r3, r9
 8004c82:	aa03      	add	r2, sp, #12
 8004c84:	4621      	mov	r1, r4
 8004c86:	4640      	mov	r0, r8
 8004c88:	f7ff fee2 	bl	8004a50 <_printf_common>
 8004c8c:	3001      	adds	r0, #1
 8004c8e:	d14c      	bne.n	8004d2a <_printf_i+0x1fe>
 8004c90:	f04f 30ff 	mov.w	r0, #4294967295
 8004c94:	b004      	add	sp, #16
 8004c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c9a:	4835      	ldr	r0, [pc, #212]	; (8004d70 <_printf_i+0x244>)
 8004c9c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004ca0:	6823      	ldr	r3, [r4, #0]
 8004ca2:	680e      	ldr	r6, [r1, #0]
 8004ca4:	061f      	lsls	r7, r3, #24
 8004ca6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004caa:	600e      	str	r6, [r1, #0]
 8004cac:	d514      	bpl.n	8004cd8 <_printf_i+0x1ac>
 8004cae:	07d9      	lsls	r1, r3, #31
 8004cb0:	bf44      	itt	mi
 8004cb2:	f043 0320 	orrmi.w	r3, r3, #32
 8004cb6:	6023      	strmi	r3, [r4, #0]
 8004cb8:	b91d      	cbnz	r5, 8004cc2 <_printf_i+0x196>
 8004cba:	6823      	ldr	r3, [r4, #0]
 8004cbc:	f023 0320 	bic.w	r3, r3, #32
 8004cc0:	6023      	str	r3, [r4, #0]
 8004cc2:	2310      	movs	r3, #16
 8004cc4:	e7b0      	b.n	8004c28 <_printf_i+0xfc>
 8004cc6:	6823      	ldr	r3, [r4, #0]
 8004cc8:	f043 0320 	orr.w	r3, r3, #32
 8004ccc:	6023      	str	r3, [r4, #0]
 8004cce:	2378      	movs	r3, #120	; 0x78
 8004cd0:	4828      	ldr	r0, [pc, #160]	; (8004d74 <_printf_i+0x248>)
 8004cd2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cd6:	e7e3      	b.n	8004ca0 <_printf_i+0x174>
 8004cd8:	065e      	lsls	r6, r3, #25
 8004cda:	bf48      	it	mi
 8004cdc:	b2ad      	uxthmi	r5, r5
 8004cde:	e7e6      	b.n	8004cae <_printf_i+0x182>
 8004ce0:	4616      	mov	r6, r2
 8004ce2:	e7bb      	b.n	8004c5c <_printf_i+0x130>
 8004ce4:	680b      	ldr	r3, [r1, #0]
 8004ce6:	6826      	ldr	r6, [r4, #0]
 8004ce8:	6960      	ldr	r0, [r4, #20]
 8004cea:	1d1d      	adds	r5, r3, #4
 8004cec:	600d      	str	r5, [r1, #0]
 8004cee:	0635      	lsls	r5, r6, #24
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	d501      	bpl.n	8004cf8 <_printf_i+0x1cc>
 8004cf4:	6018      	str	r0, [r3, #0]
 8004cf6:	e002      	b.n	8004cfe <_printf_i+0x1d2>
 8004cf8:	0671      	lsls	r1, r6, #25
 8004cfa:	d5fb      	bpl.n	8004cf4 <_printf_i+0x1c8>
 8004cfc:	8018      	strh	r0, [r3, #0]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	6123      	str	r3, [r4, #16]
 8004d02:	4616      	mov	r6, r2
 8004d04:	e7ba      	b.n	8004c7c <_printf_i+0x150>
 8004d06:	680b      	ldr	r3, [r1, #0]
 8004d08:	1d1a      	adds	r2, r3, #4
 8004d0a:	600a      	str	r2, [r1, #0]
 8004d0c:	681e      	ldr	r6, [r3, #0]
 8004d0e:	6862      	ldr	r2, [r4, #4]
 8004d10:	2100      	movs	r1, #0
 8004d12:	4630      	mov	r0, r6
 8004d14:	f7fb fa64 	bl	80001e0 <memchr>
 8004d18:	b108      	cbz	r0, 8004d1e <_printf_i+0x1f2>
 8004d1a:	1b80      	subs	r0, r0, r6
 8004d1c:	6060      	str	r0, [r4, #4]
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	6123      	str	r3, [r4, #16]
 8004d22:	2300      	movs	r3, #0
 8004d24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d28:	e7a8      	b.n	8004c7c <_printf_i+0x150>
 8004d2a:	6923      	ldr	r3, [r4, #16]
 8004d2c:	4632      	mov	r2, r6
 8004d2e:	4649      	mov	r1, r9
 8004d30:	4640      	mov	r0, r8
 8004d32:	47d0      	blx	sl
 8004d34:	3001      	adds	r0, #1
 8004d36:	d0ab      	beq.n	8004c90 <_printf_i+0x164>
 8004d38:	6823      	ldr	r3, [r4, #0]
 8004d3a:	079b      	lsls	r3, r3, #30
 8004d3c:	d413      	bmi.n	8004d66 <_printf_i+0x23a>
 8004d3e:	68e0      	ldr	r0, [r4, #12]
 8004d40:	9b03      	ldr	r3, [sp, #12]
 8004d42:	4298      	cmp	r0, r3
 8004d44:	bfb8      	it	lt
 8004d46:	4618      	movlt	r0, r3
 8004d48:	e7a4      	b.n	8004c94 <_printf_i+0x168>
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	4632      	mov	r2, r6
 8004d4e:	4649      	mov	r1, r9
 8004d50:	4640      	mov	r0, r8
 8004d52:	47d0      	blx	sl
 8004d54:	3001      	adds	r0, #1
 8004d56:	d09b      	beq.n	8004c90 <_printf_i+0x164>
 8004d58:	3501      	adds	r5, #1
 8004d5a:	68e3      	ldr	r3, [r4, #12]
 8004d5c:	9903      	ldr	r1, [sp, #12]
 8004d5e:	1a5b      	subs	r3, r3, r1
 8004d60:	42ab      	cmp	r3, r5
 8004d62:	dcf2      	bgt.n	8004d4a <_printf_i+0x21e>
 8004d64:	e7eb      	b.n	8004d3e <_printf_i+0x212>
 8004d66:	2500      	movs	r5, #0
 8004d68:	f104 0619 	add.w	r6, r4, #25
 8004d6c:	e7f5      	b.n	8004d5a <_printf_i+0x22e>
 8004d6e:	bf00      	nop
 8004d70:	080059f1 	.word	0x080059f1
 8004d74:	08005a02 	.word	0x08005a02

08004d78 <_sbrk_r>:
 8004d78:	b538      	push	{r3, r4, r5, lr}
 8004d7a:	4d06      	ldr	r5, [pc, #24]	; (8004d94 <_sbrk_r+0x1c>)
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	4604      	mov	r4, r0
 8004d80:	4608      	mov	r0, r1
 8004d82:	602b      	str	r3, [r5, #0]
 8004d84:	f7fe fe4c 	bl	8003a20 <_sbrk>
 8004d88:	1c43      	adds	r3, r0, #1
 8004d8a:	d102      	bne.n	8004d92 <_sbrk_r+0x1a>
 8004d8c:	682b      	ldr	r3, [r5, #0]
 8004d8e:	b103      	cbz	r3, 8004d92 <_sbrk_r+0x1a>
 8004d90:	6023      	str	r3, [r4, #0]
 8004d92:	bd38      	pop	{r3, r4, r5, pc}
 8004d94:	20000cfc 	.word	0x20000cfc

08004d98 <__sread>:
 8004d98:	b510      	push	{r4, lr}
 8004d9a:	460c      	mov	r4, r1
 8004d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004da0:	f000 f8e8 	bl	8004f74 <_read_r>
 8004da4:	2800      	cmp	r0, #0
 8004da6:	bfab      	itete	ge
 8004da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004daa:	89a3      	ldrhlt	r3, [r4, #12]
 8004dac:	181b      	addge	r3, r3, r0
 8004dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004db2:	bfac      	ite	ge
 8004db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004db6:	81a3      	strhlt	r3, [r4, #12]
 8004db8:	bd10      	pop	{r4, pc}

08004dba <__swrite>:
 8004dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dbe:	461f      	mov	r7, r3
 8004dc0:	898b      	ldrh	r3, [r1, #12]
 8004dc2:	05db      	lsls	r3, r3, #23
 8004dc4:	4605      	mov	r5, r0
 8004dc6:	460c      	mov	r4, r1
 8004dc8:	4616      	mov	r6, r2
 8004dca:	d505      	bpl.n	8004dd8 <__swrite+0x1e>
 8004dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dd0:	2302      	movs	r3, #2
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	f000 f870 	bl	8004eb8 <_lseek_r>
 8004dd8:	89a3      	ldrh	r3, [r4, #12]
 8004dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004de2:	81a3      	strh	r3, [r4, #12]
 8004de4:	4632      	mov	r2, r6
 8004de6:	463b      	mov	r3, r7
 8004de8:	4628      	mov	r0, r5
 8004dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004dee:	f000 b817 	b.w	8004e20 <_write_r>

08004df2 <__sseek>:
 8004df2:	b510      	push	{r4, lr}
 8004df4:	460c      	mov	r4, r1
 8004df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004dfa:	f000 f85d 	bl	8004eb8 <_lseek_r>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	89a3      	ldrh	r3, [r4, #12]
 8004e02:	bf15      	itete	ne
 8004e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8004e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004e0e:	81a3      	strheq	r3, [r4, #12]
 8004e10:	bf18      	it	ne
 8004e12:	81a3      	strhne	r3, [r4, #12]
 8004e14:	bd10      	pop	{r4, pc}

08004e16 <__sclose>:
 8004e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004e1a:	f000 b81b 	b.w	8004e54 <_close_r>
	...

08004e20 <_write_r>:
 8004e20:	b538      	push	{r3, r4, r5, lr}
 8004e22:	4d07      	ldr	r5, [pc, #28]	; (8004e40 <_write_r+0x20>)
 8004e24:	4604      	mov	r4, r0
 8004e26:	4608      	mov	r0, r1
 8004e28:	4611      	mov	r1, r2
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	602a      	str	r2, [r5, #0]
 8004e2e:	461a      	mov	r2, r3
 8004e30:	f7fe fde8 	bl	8003a04 <_write>
 8004e34:	1c43      	adds	r3, r0, #1
 8004e36:	d102      	bne.n	8004e3e <_write_r+0x1e>
 8004e38:	682b      	ldr	r3, [r5, #0]
 8004e3a:	b103      	cbz	r3, 8004e3e <_write_r+0x1e>
 8004e3c:	6023      	str	r3, [r4, #0]
 8004e3e:	bd38      	pop	{r3, r4, r5, pc}
 8004e40:	20000cfc 	.word	0x20000cfc

08004e44 <abort>:
 8004e44:	b508      	push	{r3, lr}
 8004e46:	2006      	movs	r0, #6
 8004e48:	f000 f8ce 	bl	8004fe8 <raise>
 8004e4c:	2001      	movs	r0, #1
 8004e4e:	f7fe fdcc 	bl	80039ea <_exit>
	...

08004e54 <_close_r>:
 8004e54:	b538      	push	{r3, r4, r5, lr}
 8004e56:	4d06      	ldr	r5, [pc, #24]	; (8004e70 <_close_r+0x1c>)
 8004e58:	2300      	movs	r3, #0
 8004e5a:	4604      	mov	r4, r0
 8004e5c:	4608      	mov	r0, r1
 8004e5e:	602b      	str	r3, [r5, #0]
 8004e60:	f7fe fdf8 	bl	8003a54 <_close>
 8004e64:	1c43      	adds	r3, r0, #1
 8004e66:	d102      	bne.n	8004e6e <_close_r+0x1a>
 8004e68:	682b      	ldr	r3, [r5, #0]
 8004e6a:	b103      	cbz	r3, 8004e6e <_close_r+0x1a>
 8004e6c:	6023      	str	r3, [r4, #0]
 8004e6e:	bd38      	pop	{r3, r4, r5, pc}
 8004e70:	20000cfc 	.word	0x20000cfc

08004e74 <_fstat_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4d07      	ldr	r5, [pc, #28]	; (8004e94 <_fstat_r+0x20>)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	4611      	mov	r1, r2
 8004e80:	602b      	str	r3, [r5, #0]
 8004e82:	f7fe fdea 	bl	8003a5a <_fstat>
 8004e86:	1c43      	adds	r3, r0, #1
 8004e88:	d102      	bne.n	8004e90 <_fstat_r+0x1c>
 8004e8a:	682b      	ldr	r3, [r5, #0]
 8004e8c:	b103      	cbz	r3, 8004e90 <_fstat_r+0x1c>
 8004e8e:	6023      	str	r3, [r4, #0]
 8004e90:	bd38      	pop	{r3, r4, r5, pc}
 8004e92:	bf00      	nop
 8004e94:	20000cfc 	.word	0x20000cfc

08004e98 <_isatty_r>:
 8004e98:	b538      	push	{r3, r4, r5, lr}
 8004e9a:	4d06      	ldr	r5, [pc, #24]	; (8004eb4 <_isatty_r+0x1c>)
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	4604      	mov	r4, r0
 8004ea0:	4608      	mov	r0, r1
 8004ea2:	602b      	str	r3, [r5, #0]
 8004ea4:	f7fe fdde 	bl	8003a64 <_isatty>
 8004ea8:	1c43      	adds	r3, r0, #1
 8004eaa:	d102      	bne.n	8004eb2 <_isatty_r+0x1a>
 8004eac:	682b      	ldr	r3, [r5, #0]
 8004eae:	b103      	cbz	r3, 8004eb2 <_isatty_r+0x1a>
 8004eb0:	6023      	str	r3, [r4, #0]
 8004eb2:	bd38      	pop	{r3, r4, r5, pc}
 8004eb4:	20000cfc 	.word	0x20000cfc

08004eb8 <_lseek_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	4d07      	ldr	r5, [pc, #28]	; (8004ed8 <_lseek_r+0x20>)
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	4608      	mov	r0, r1
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	602a      	str	r2, [r5, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	f7fe fdce 	bl	8003a68 <_lseek>
 8004ecc:	1c43      	adds	r3, r0, #1
 8004ece:	d102      	bne.n	8004ed6 <_lseek_r+0x1e>
 8004ed0:	682b      	ldr	r3, [r5, #0]
 8004ed2:	b103      	cbz	r3, 8004ed6 <_lseek_r+0x1e>
 8004ed4:	6023      	str	r3, [r4, #0]
 8004ed6:	bd38      	pop	{r3, r4, r5, pc}
 8004ed8:	20000cfc 	.word	0x20000cfc

08004edc <memmove>:
 8004edc:	4288      	cmp	r0, r1
 8004ede:	b510      	push	{r4, lr}
 8004ee0:	eb01 0402 	add.w	r4, r1, r2
 8004ee4:	d902      	bls.n	8004eec <memmove+0x10>
 8004ee6:	4284      	cmp	r4, r0
 8004ee8:	4623      	mov	r3, r4
 8004eea:	d807      	bhi.n	8004efc <memmove+0x20>
 8004eec:	1e43      	subs	r3, r0, #1
 8004eee:	42a1      	cmp	r1, r4
 8004ef0:	d008      	beq.n	8004f04 <memmove+0x28>
 8004ef2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ef6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004efa:	e7f8      	b.n	8004eee <memmove+0x12>
 8004efc:	4402      	add	r2, r0
 8004efe:	4601      	mov	r1, r0
 8004f00:	428a      	cmp	r2, r1
 8004f02:	d100      	bne.n	8004f06 <memmove+0x2a>
 8004f04:	bd10      	pop	{r4, pc}
 8004f06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004f0e:	e7f7      	b.n	8004f00 <memmove+0x24>

08004f10 <__malloc_lock>:
 8004f10:	4801      	ldr	r0, [pc, #4]	; (8004f18 <__malloc_lock+0x8>)
 8004f12:	f7ff b9cf 	b.w	80042b4 <__retarget_lock_acquire_recursive>
 8004f16:	bf00      	nop
 8004f18:	20000cf4 	.word	0x20000cf4

08004f1c <__malloc_unlock>:
 8004f1c:	4801      	ldr	r0, [pc, #4]	; (8004f24 <__malloc_unlock+0x8>)
 8004f1e:	f7ff b9ca 	b.w	80042b6 <__retarget_lock_release_recursive>
 8004f22:	bf00      	nop
 8004f24:	20000cf4 	.word	0x20000cf4

08004f28 <_realloc_r>:
 8004f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2a:	4607      	mov	r7, r0
 8004f2c:	4614      	mov	r4, r2
 8004f2e:	460e      	mov	r6, r1
 8004f30:	b921      	cbnz	r1, 8004f3c <_realloc_r+0x14>
 8004f32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f36:	4611      	mov	r1, r2
 8004f38:	f7ff ba7a 	b.w	8004430 <_malloc_r>
 8004f3c:	b922      	cbnz	r2, 8004f48 <_realloc_r+0x20>
 8004f3e:	f7ff fa27 	bl	8004390 <_free_r>
 8004f42:	4625      	mov	r5, r4
 8004f44:	4628      	mov	r0, r5
 8004f46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f48:	f000 f86a 	bl	8005020 <_malloc_usable_size_r>
 8004f4c:	42a0      	cmp	r0, r4
 8004f4e:	d20f      	bcs.n	8004f70 <_realloc_r+0x48>
 8004f50:	4621      	mov	r1, r4
 8004f52:	4638      	mov	r0, r7
 8004f54:	f7ff fa6c 	bl	8004430 <_malloc_r>
 8004f58:	4605      	mov	r5, r0
 8004f5a:	2800      	cmp	r0, #0
 8004f5c:	d0f2      	beq.n	8004f44 <_realloc_r+0x1c>
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4622      	mov	r2, r4
 8004f62:	f7fe fdad 	bl	8003ac0 <memcpy>
 8004f66:	4631      	mov	r1, r6
 8004f68:	4638      	mov	r0, r7
 8004f6a:	f7ff fa11 	bl	8004390 <_free_r>
 8004f6e:	e7e9      	b.n	8004f44 <_realloc_r+0x1c>
 8004f70:	4635      	mov	r5, r6
 8004f72:	e7e7      	b.n	8004f44 <_realloc_r+0x1c>

08004f74 <_read_r>:
 8004f74:	b538      	push	{r3, r4, r5, lr}
 8004f76:	4d07      	ldr	r5, [pc, #28]	; (8004f94 <_read_r+0x20>)
 8004f78:	4604      	mov	r4, r0
 8004f7a:	4608      	mov	r0, r1
 8004f7c:	4611      	mov	r1, r2
 8004f7e:	2200      	movs	r2, #0
 8004f80:	602a      	str	r2, [r5, #0]
 8004f82:	461a      	mov	r2, r3
 8004f84:	f7fe fd37 	bl	80039f6 <_read>
 8004f88:	1c43      	adds	r3, r0, #1
 8004f8a:	d102      	bne.n	8004f92 <_read_r+0x1e>
 8004f8c:	682b      	ldr	r3, [r5, #0]
 8004f8e:	b103      	cbz	r3, 8004f92 <_read_r+0x1e>
 8004f90:	6023      	str	r3, [r4, #0]
 8004f92:	bd38      	pop	{r3, r4, r5, pc}
 8004f94:	20000cfc 	.word	0x20000cfc

08004f98 <_raise_r>:
 8004f98:	291f      	cmp	r1, #31
 8004f9a:	b538      	push	{r3, r4, r5, lr}
 8004f9c:	4604      	mov	r4, r0
 8004f9e:	460d      	mov	r5, r1
 8004fa0:	d904      	bls.n	8004fac <_raise_r+0x14>
 8004fa2:	2316      	movs	r3, #22
 8004fa4:	6003      	str	r3, [r0, #0]
 8004fa6:	f04f 30ff 	mov.w	r0, #4294967295
 8004faa:	bd38      	pop	{r3, r4, r5, pc}
 8004fac:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8004fae:	b112      	cbz	r2, 8004fb6 <_raise_r+0x1e>
 8004fb0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8004fb4:	b94b      	cbnz	r3, 8004fca <_raise_r+0x32>
 8004fb6:	4620      	mov	r0, r4
 8004fb8:	f000 f830 	bl	800501c <_getpid_r>
 8004fbc:	462a      	mov	r2, r5
 8004fbe:	4601      	mov	r1, r0
 8004fc0:	4620      	mov	r0, r4
 8004fc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fc6:	f000 b817 	b.w	8004ff8 <_kill_r>
 8004fca:	2b01      	cmp	r3, #1
 8004fcc:	d00a      	beq.n	8004fe4 <_raise_r+0x4c>
 8004fce:	1c59      	adds	r1, r3, #1
 8004fd0:	d103      	bne.n	8004fda <_raise_r+0x42>
 8004fd2:	2316      	movs	r3, #22
 8004fd4:	6003      	str	r3, [r0, #0]
 8004fd6:	2001      	movs	r0, #1
 8004fd8:	e7e7      	b.n	8004faa <_raise_r+0x12>
 8004fda:	2400      	movs	r4, #0
 8004fdc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8004fe0:	4628      	mov	r0, r5
 8004fe2:	4798      	blx	r3
 8004fe4:	2000      	movs	r0, #0
 8004fe6:	e7e0      	b.n	8004faa <_raise_r+0x12>

08004fe8 <raise>:
 8004fe8:	4b02      	ldr	r3, [pc, #8]	; (8004ff4 <raise+0xc>)
 8004fea:	4601      	mov	r1, r0
 8004fec:	6818      	ldr	r0, [r3, #0]
 8004fee:	f7ff bfd3 	b.w	8004f98 <_raise_r>
 8004ff2:	bf00      	nop
 8004ff4:	20000024 	.word	0x20000024

08004ff8 <_kill_r>:
 8004ff8:	b538      	push	{r3, r4, r5, lr}
 8004ffa:	4d07      	ldr	r5, [pc, #28]	; (8005018 <_kill_r+0x20>)
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	4604      	mov	r4, r0
 8005000:	4608      	mov	r0, r1
 8005002:	4611      	mov	r1, r2
 8005004:	602b      	str	r3, [r5, #0]
 8005006:	f7fe fce8 	bl	80039da <_kill>
 800500a:	1c43      	adds	r3, r0, #1
 800500c:	d102      	bne.n	8005014 <_kill_r+0x1c>
 800500e:	682b      	ldr	r3, [r5, #0]
 8005010:	b103      	cbz	r3, 8005014 <_kill_r+0x1c>
 8005012:	6023      	str	r3, [r4, #0]
 8005014:	bd38      	pop	{r3, r4, r5, pc}
 8005016:	bf00      	nop
 8005018:	20000cfc 	.word	0x20000cfc

0800501c <_getpid_r>:
 800501c:	f7fe bcdb 	b.w	80039d6 <_getpid>

08005020 <_malloc_usable_size_r>:
 8005020:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005024:	1f18      	subs	r0, r3, #4
 8005026:	2b00      	cmp	r3, #0
 8005028:	bfbc      	itt	lt
 800502a:	580b      	ldrlt	r3, [r1, r0]
 800502c:	18c0      	addlt	r0, r0, r3
 800502e:	4770      	bx	lr

08005030 <_init>:
 8005030:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005032:	bf00      	nop
 8005034:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005036:	bc08      	pop	{r3}
 8005038:	469e      	mov	lr, r3
 800503a:	4770      	bx	lr

0800503c <_fini>:
 800503c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800503e:	bf00      	nop
 8005040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005042:	bc08      	pop	{r3}
 8005044:	469e      	mov	lr, r3
 8005046:	4770      	bx	lr
